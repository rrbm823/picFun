
==================== FINAL INTERFACE ====================
2017-05-16 19:29:51.139356 UTC

interface picFun-0.1.0.0-41oGHt6VUNM2sRBPQhbfR4:Pixels 8002
  interface hash: 5a6cae7a9287ac270b8a18aaadc8378a
  ABI hash: d0e5893ed86983a907c8015860bf69b0
  export-list hash: a2521e5ec9036f627085dc177a6dac7f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1629a6b3a1be45bac89f3b20e82b5009
  sig of: Nothing
  used TH splices: False
  where
exports:
  Pixels.b
  Pixels.brightnessRGB8
  Pixels.cropImage
  Pixels.dynCrop
  Pixels.dynamicPixelMap
  Pixels.dynamicPixelMap2
  Pixels.imag
  Pixels.r
  Pixels.zipImages
module dependencies:
package dependencies: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed
                      aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      servant-JuicyPixels-0.3.0.2@servant-JuicyPixels-0.3.0.2-KFDh0ZSrRqdHyQZspaSYy6
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tga
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tiff
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture c28c03ed1b5e2bad2d1a6a2be36f49e1
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Png.Export 831ef4caae88c5878061bb9afbbaf2f7
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types 22b7a216fd591cfd9ca02dad94569487
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  servant-JuicyPixels-0.3.0.2@servant-JuicyPixels-0.3.0.2-KFDh0ZSrRqdHyQZspaSYy6:Servant.JuicyPixels 8b5d4bad3818d21fd79b30ab2960a0f1
import  -/  vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable 6efee64e1486b549434fd0e1352e7839
e7f5d8053cd6acdc0720391bae8dfeed
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Pixels.$trModule2
                   Pixels.$trModule1) -}
24324a25c8bd571cb54d8cbaeb2369c8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pixels"#) -}
b7978faee77775c41e034aad2c39dabb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-41oGHt6VUNM2sRBPQhbfR4"#) -}
5b6573a2d9beb1aca409ee8bc5cac514
  $w$scropImage ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Arity: 3, Strictness: <S,U><S,U><L,U(U,A,U(U,U,U))>,
     Inline: [0] -}
0f33d095b9a1115e5ac9660064e2cb0e
  $w$szipImages ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Storable.Vector
         (Codec.Picture.Types.PixelBaseComponent
            Codec.Picture.Types.PixelRGB8)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Storable.Vector
         (Codec.Picture.Types.PixelBaseComponent
            Codec.Picture.Types.PixelRGB8)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Data.Vector.Storable.Vector
            (Codec.Picture.Types.PixelBaseComponent
               Codec.Picture.Types.PixelRGB8) #)
  {- Arity: 6,
     Strictness: <S,U><S,U><L,U(U,U,U)><S,U><S,U><L,U(U,U,U)>,
     Inline: [0] -}
b0a90d09ebc284a638e7605209f310c3
  $wcropImage ::
    Codec.Picture.Types.Pixel a =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Codec.Picture.Types.Image a
    -> Codec.Picture.Types.Image a
  {- Arity: 4,
     Strictness: <S(SLLLLLC(S(S))LLLLLLLLL),U(1*U,A,A,A,A,A,1*C1(U(U)),A,A,A,C(C1(C1(U))),A,A,A,A,C(C1(C1(C1(U)))))><S,U><S,U><L,U>,
     Inline: [0] -}
3f167b73ba13c4a1ff0f075ff0d946c9
  $wzipImages ::
    Codec.Picture.Types.Pixel a =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Storable.Vector
         (Codec.Picture.Types.PixelBaseComponent a)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Storable.Vector
         (Codec.Picture.Types.PixelBaseComponent a)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          Data.Vector.Storable.Vector
            (Codec.Picture.Types.PixelBaseComponent a) #)
  {- Arity: 7,
     Strictness: <L,U(U,A,A,A,A,A,C(U(U)),A,A,A,C(C1(C1(U))),A,A,A,A,C(C1(C1(C1(U)))))><S,U><S,U><L,U><S,U><S,U><L,U>,
     Inline: [0] -}
c425bf6fe7726b109cc536d120c6cb2c
  b ::
    GHC.Types.IO
      (Data.Either.Either
         GHC.Base.String Codec.Picture.Types.DynamicImage)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Pixels.b1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             GHC.Base.String Codec.Picture.Types.DynamicImage>_R)) -}
9ed692795e2e010c984d8776560c9a29
  b1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Base.String Codec.Picture.Types.DynamicImage #)
  {- Arity: 1, Unfolding: (Codec.Picture.readImage1 Pixels.b2) -}
e20b18ce3c32d8ce97913b85991287bc
  b2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/home/lamb/Pictures/conspiracy.jpg"#) -}
a18dcbed1c0338257871cffbbdc54dca
  brightnessRGB8 ::
    GHC.Types.Int
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Arity: 2, Strictness: <L,U(U)><S(SSL),1*U(U,U,U(A,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8) ->
                 case w1 of ww { Codec.Picture.Types.Image ww1 ww2 ww3 ->
                 case Codec.Picture.Types.$w$spixelMap4
                        (\ (ds :: Codec.Picture.Types.PixelRGB8) ->
                         case ds of wild { Codec.Picture.Types.PixelRGB8 dt dt1 dt2 ->
                         case w of wild1 { GHC.Types.I# y ->
                         Codec.Picture.Types.PixelRGB8
                           (GHC.Prim.narrow8Word#
                              (GHC.Prim.int2Word# (GHC.Prim.+# (GHC.Prim.word2Int# dt) y)))
                           (GHC.Prim.narrow8Word#
                              (GHC.Prim.int2Word# (GHC.Prim.+# (GHC.Prim.word2Int# dt1) y)))
                           (GHC.Prim.narrow8Word#
                              (GHC.Prim.int2Word# (GHC.Prim.+# (GHC.Prim.word2Int# dt2) y))) } })
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Codec.Picture.Types.Image
                   @ Codec.Picture.Types.PixelRGB8
                   ww5
                   ww6
                   ww7 } }) -}
707d9f6e2e7bc28aab1ff8981cb1a892
  cropImage ::
    Codec.Picture.Types.Pixel a =>
    GHC.Types.Int
    -> GHC.Types.Int
    -> Codec.Picture.Types.Image a
    -> Codec.Picture.Types.Image a
  {- Arity: 4,
     Strictness: <S(SLLLLLC(S(S))LLLLLLLLL),U(1*U,A,A,A,A,A,1*C1(U(U)),A,A,A,C(C1(C1(U))),A,A,A,A,C(C1(C1(C1(U)))))><S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: Codec.Picture.Types.Pixel a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Codec.Picture.Types.Image a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 Pixels.$wcropImage @ a w ww1 ww3 w3 } }) -}
41ccb6ce9e811b8af21131b4bbb424da
  cropImage_$scropImage ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
    -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U(U,A,U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Pixels.$w$scropImage ww1 ww3 w2 } }) -}
91bb0fe2fea4ebd92e87255d4ee8dd6b
  dynCrop ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Codec.Picture.Types.DynamicImage
    -> Codec.Picture.Types.DynamicImage
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U> -}
45d3fd104ab62828cac1bf8542d3f96c
  dynamicPixelMap ::
    (forall pixel.
     Codec.Picture.Types.Pixel pixel =>
     Codec.Picture.Types.Image pixel -> Codec.Picture.Types.Image pixel)
    -> Codec.Picture.Types.DynamicImage
    -> Codec.Picture.Types.DynamicImage
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ (f :: forall pixel.
                         Codec.Picture.Types.Pixel pixel =>
                         Codec.Picture.Types.Image pixel -> Codec.Picture.Types.Image pixel)
                   (ds :: Codec.Picture.Types.DynamicImage) ->
                 case ds of wild {
                   Codec.Picture.Types.ImageY8 i
                   -> Codec.Picture.Types.ImageY8
                        (f @ Codec.Picture.Types.Pixel8 Codec.Picture.Types.$fPixelWord8 i)
                   Codec.Picture.Types.ImageY16 i
                   -> Codec.Picture.Types.ImageY16
                        (f @ Codec.Picture.Types.Pixel16
                           Codec.Picture.Types.$fPixelWord16
                           i)
                   Codec.Picture.Types.ImageYF i
                   -> Codec.Picture.Types.ImageYF
                        (f @ Codec.Picture.Types.PixelF Codec.Picture.Types.$fPixelFloat i)
                   Codec.Picture.Types.ImageYA8 i
                   -> Codec.Picture.Types.ImageYA8
                        (f @ Codec.Picture.Types.PixelYA8
                           Codec.Picture.Types.$fPixelPixelYA8
                           i)
                   Codec.Picture.Types.ImageYA16 i
                   -> Codec.Picture.Types.ImageYA16
                        (f @ Codec.Picture.Types.PixelYA16
                           Codec.Picture.Types.$fPixelPixelYA16
                           i)
                   Codec.Picture.Types.ImageRGB8 i
                   -> Codec.Picture.Types.ImageRGB8
                        (f @ Codec.Picture.Types.PixelRGB8
                           Codec.Picture.Types.$fPixelPixelRGB8
                           i)
                   Codec.Picture.Types.ImageRGB16 i
                   -> Codec.Picture.Types.ImageRGB16
                        (f @ Codec.Picture.Types.PixelRGB16
                           Codec.Picture.Types.$fPixelPixelRGB16
                           i)
                   Codec.Picture.Types.ImageRGBF i
                   -> Codec.Picture.Types.ImageRGBF
                        (f @ Codec.Picture.Types.PixelRGBF
                           Codec.Picture.Types.$fPixelPixelRGBF
                           i)
                   Codec.Picture.Types.ImageRGBA8 i
                   -> Codec.Picture.Types.ImageRGBA8
                        (f @ Codec.Picture.Types.PixelRGBA8
                           Codec.Picture.Types.$fPixelPixelRGBA8
                           i)
                   Codec.Picture.Types.ImageRGBA16 i
                   -> Codec.Picture.Types.ImageRGBA16
                        (f @ Codec.Picture.Types.PixelRGBA16
                           Codec.Picture.Types.$fPixelPixelRGBA16
                           i)
                   Codec.Picture.Types.ImageYCbCr8 i
                   -> Codec.Picture.Types.ImageYCbCr8
                        (f @ Codec.Picture.Types.PixelYCbCr8
                           Codec.Picture.Types.$fPixelPixelYCbCr8
                           i)
                   Codec.Picture.Types.ImageCMYK8 i
                   -> Codec.Picture.Types.ImageCMYK8
                        (f @ Codec.Picture.Types.PixelCMYK8
                           Codec.Picture.Types.$fPixelPixelCMYK8
                           i)
                   Codec.Picture.Types.ImageCMYK16 i
                   -> Codec.Picture.Types.ImageCMYK16
                        (f @ Codec.Picture.Types.PixelCMYK16
                           Codec.Picture.Types.$fPixelPixelCMYK16
                           i) }) -}
8aea27da04ade618e7e3ec53066a3122
  dynamicPixelMap2 ::
    (forall pixel.
     Codec.Picture.Types.Pixel pixel =>
     Codec.Picture.Types.Image pixel
     -> Codec.Picture.Types.Image pixel
     -> Codec.Picture.Types.Image pixel)
    -> Codec.Picture.Types.DynamicImage
    -> Codec.Picture.Types.DynamicImage
    -> Codec.Picture.Types.DynamicImage
  {- Arity: 3, Strictness: <L,1*C1(C1(C1(U)))><S,1*U><S,1*U> -}
4113f231352d25a6e0f695e4b4aff4de
  imag :: GHC.IO.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Pixels.imag1
                  `cast`
                (<GHC.IO.FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5aae7d0c9e2220131b7aa7457d60e7fe
  imag1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (o :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Codec.Picture.readImageWithMetadata1
                        Pixels.imag5
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,U><L,1*U(U,U,U(U,U,U))> -}
                   = \ (ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv3 :: Codec.Picture.Types.Image
                                  Codec.Picture.Types.PixelRGB8)[OneShot] ->
                     case Codec.Picture.readImage1
                            Pixels.b2
                            ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                     let {
                       $j1 :: GHC.Prim.State# GHC.Prim.RealWorld
                              -> Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                         {- Arity: 2, Strictness: <S,U><L,1*U(U,U,U(U,U,U))> -}
                       = \ (ipv6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                           (ipv7 :: Codec.Picture.Types.Image
                                      Codec.Picture.Types.PixelRGB8)[OneShot] ->
                         Data.ByteString.Lazy.writeFile1
                           o
                           (case ipv7 of ww { Codec.Picture.Types.Image ww1 ww2 ww3 ->
                            case ipv3 of ww4 { Codec.Picture.Types.Image ww5 ww6 ww7 ->
                            case Pixels.$w$szipImages
                                   ww1
                                   ww2
                                   ww3
                                   ww5
                                   ww6
                                   ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                            Codec.Picture.Png.Export.$w$sgenericEncodePng
                              (GHC.Base.Nothing @ Codec.Picture.Types.Palette)
                              Codec.Picture.Png.Type.PngTrueColour
                              (GHC.Types.[]
                                 @ (Codec.Picture.Metadata.Elem Codec.Picture.Metadata.Keys))
                                `cast`
                              (Sym (Codec.Picture.Metadata.N:Metadatas[0]))
                              ww9
                              ww10
                              ww11 } } })
                           ipv6
                     } in
                     case ipv5 of wild {
                       Data.Either.Left x -> $j1 ipv4 Pixels.imag2
                       Data.Either.Right y -> $j1 ipv4 (Codec.Picture.convertRGB8 y) } }
                 } in
                 case ipv1 of wild {
                   Data.Either.Left x -> $j ipv Pixels.imag2
                   Data.Either.Right y
                   -> $j
                        ipv
                        (case y of wild1 { (,) x ds2 ->
                         Codec.Picture.convertRGB8 x }) } }) -}
a074a0d149ec4b132796113a8cf641cd
  imag2 :: Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Unfolding: (Codec.Picture.Types.Image
                   @ Codec.Picture.Types.PixelRGB8
                   0#
                   0#
                   Pixels.imag3) -}
cced271c63d1134f48e9ab58224fe5d0
  imag3 ::
    Data.Vector.Storable.Vector
      (Codec.Picture.Types.PixelBaseComponent
         Codec.Picture.Types.PixelRGB8)
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Storable.Vector GHC.Word.Word8)
                        Pixels.imag4 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2
                   `cast`
                 (Data.Vector.Storable.Vector
                    <GHC.Word.Word8, Codec.Picture.Types.PixelBaseComponent
                                       Codec.Picture.Types.PixelRGB8>)_R }) -}
42979f47b397755ee3c0fa7e3d5373d3
  imag4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Storable.Vector GHC.Word.Word8 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        0#
                        s1 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Vector.Storable.Vector
                      @ GHC.Word.Word8
                      0#
                      (GHC.Prim.byteArrayContents#
                         ipv1
                           `cast`
                         (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                       GHC.Prim.RealWorld) GHC.Prim.ByteArray#))
                      (GHC.ForeignPtr.PlainPtr ipv1) #) }) -}
5184cf65b7828b5e8461bb66a0554f44
  imag5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/home/lamb/Pictures/bobby.jpeg"#) -}
a6b4f52431a457a1159c1032fa528886
  r ::
    GHC.Types.IO
      (Data.Either.Either
         GHC.Base.String Codec.Picture.Types.DynamicImage)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Pixels.r1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             GHC.Base.String Codec.Picture.Types.DynamicImage>_R)) -}
cb8aa4ae1fc5af85a419181d64f48d50
  r1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Base.String Codec.Picture.Types.DynamicImage #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Codec.Picture.readImageWithMetadata1
                        Pixels.imag5
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x
                      -> Data.Either.Left
                           @ [GHC.Types.Char]
                           @ Codec.Picture.Types.DynamicImage
                           x
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ [GHC.Types.Char]
                           @ Codec.Picture.Types.DynamicImage
                           (Data.Tuple.fst
                              @ Codec.Picture.Types.DynamicImage
                              @ Codec.Picture.Metadata.Metadatas
                              y) } #) }) -}
cecb5a8ea824497b2c98b04ecba3017d
  zipImages ::
    Codec.Picture.Types.Pixel a =>
    Codec.Picture.Types.Image a
    -> Codec.Picture.Types.Image a -> Codec.Picture.Types.Image a
  {- Arity: 3,
     Strictness: <L,U(U,A,A,A,A,A,C(U(U)),A,A,A,C(C1(C1(U))),A,A,A,A,C(C1(C1(C1(U)))))><S(SSL),1*U(U,U,U)><S(SSL),1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Codec.Picture.Types.Pixel a)
                   (w1 :: Codec.Picture.Types.Image a)
                   (w2 :: Codec.Picture.Types.Image a) ->
                 case w1 of ww { Codec.Picture.Types.Image ww1 ww2 ww3 ->
                 case w2 of ww4 { Codec.Picture.Types.Image ww5 ww6 ww7 ->
                 case Pixels.$wzipImages
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Codec.Picture.Types.Image @ a ww9 ww10 ww11 } } }) -}
"SPEC cropImage @ PixelRGB8" [ALWAYS] forall ($dPixel :: Codec.Picture.Types.Pixel
                                                           Codec.Picture.Types.PixelRGB8)
  Pixels.cropImage @ Codec.Picture.Types.PixelRGB8 $dPixel
  = Pixels.cropImage_$scropImage
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

