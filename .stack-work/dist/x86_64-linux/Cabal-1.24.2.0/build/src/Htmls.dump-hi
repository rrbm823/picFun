
==================== FINAL INTERFACE ====================
2017-07-04 19:27:50.059296 UTC

interface picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Htmls [orphan module] 8002
  interface hash: b402af05c64aa825e84927edca2e25bb
  ABI hash: c8f882b4e9492955dcce536e246ffd85
  export-list hash: 3aa197b1619ffdb8f2e6e00c837ee2cb
  orphan hash: 06c1db242e7f5a7ae1b6a70fbc7e7c34
  flag hash: d81c5bd899ee9bae2e83b7d3242d4f56
  sig of: Nothing
  used TH splices: False
  where
exports:
  Htmls.HTMLBlaze
module dependencies: Models
package dependencies: aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html 288dbf097dbd0ff17b50c3c1330477db
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html.Renderer.Utf8 5b26c380f5278a1c6a43c894929cec9d
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5 a78d4ae47bedb2841a6332de06a90707
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5.Attributes 7657fa2d710bc2ae02fd88196e7a43b7
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze e36927cead1a7aeccd029225c1dba5b4
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze.Internal 52ba665013f4dfa6d731e8584348806e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media 07625d65eebeff997f1e9bc032ba3b6e
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media.MediaType d33bfddaa1306ad267f9a6689258b69b
import  -/  Models 5992fa304552c7c8ef828c4d5dfbaa4c
  exports: ed66af611eab7c3185e2115f774dae78
  Checkerboard 4556cccb471b9e23ec232714fec9e5ef
  Draw 649a4d9ca566e87ee522a85c2315c827
  Frame 1e4081a8fa652880cc6d6d9da735b78c
  Spiral 48f6c0586db73bcd57232151895cf600
  Tool 55cf370781b39a8a4ed28483475a4bde
  ZipImage 13d8b8fa101f7f89d31128513beda6fc
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes f46c3af563d8e4f630ae29c1d96b30a9
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
71e9b6ef84f7601188f085ac6a4a2310
  $fAcceptTYPEHTMLBlaze ::
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  DFunId
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Htmls.HTMLBlaze>_N)) -}
84c6f4259dbe302f6dff6f7ebfe9ce94
  $fAcceptTYPEHTMLBlaze1 ::
    Network.HTTP.Media.MediaType.Internal.MediaType
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "text"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 let {
                   addr#1 :: GHC.Prim.Addr# = "html"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#1
                        ipv of wild1 { (#,#) ds2 ds6 ->
                 case Network.HTTP.Media.MediaType.$w//
                        addr#
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds4)
                        addr#1
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds6) of ww10 { (#,,#) ww11 ww12 ww13 ->
                 case Network.HTTP.Media.MediaType.$w/:
                        ww11
                        ww12
                        ww13
                        Htmls.$fAcceptTYPEHTMLBlaze3
                        Htmls.$fAcceptTYPEHTMLBlaze2 of ww7 { (#,,#) ww8 ww9 ww1 ->
                 Network.HTTP.Media.MediaType.Internal.MediaType
                   ww8
                   ww9
                   ww1 } } } } }) -}
8e95216fa631f79496d2463da60e3e03
  $fAcceptTYPEHTMLBlaze2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "utf-8"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
f1e65ebc5fd4fcaa21bfa26c25effc7f
  $fAcceptTYPEHTMLBlaze3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "charset"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fAcceptTYPEHTMLBlaze_$ccontentType ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze1) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazeMarkupM ::
    Servant.API.ContentTypes.MimeRender
      Htmls.HTMLBlaze Text.Blaze.Html.Html
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Text.Blaze.Html.Html
                  Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                    `cast`
                  (Sym (Servant.API.ContentTypes.N:Accept[0]
                            <*>_N <Htmls.HTMLBlaze>_N))
                  Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Text.Blaze.Html.Html -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (eta :: Text.Blaze.Internal.Markup) ->
                 Data.ByteString.Builder.toLazyByteString
                   (letrec {
                      go3 :: forall b.
                             Data.ByteString.Builder.Internal.Builder
                             -> Text.Blaze.Internal.MarkupM b
                             -> Data.ByteString.Builder.Internal.Builder
                        {- Arity: 2, Inline: NOINLINE -}
                      = \ @ b
                          (attrs :: Data.ByteString.Builder.Internal.Builder)
                          (ds1 :: Text.Blaze.Internal.MarkupM b) ->
                        case ds1 of wild {
                          Text.Blaze.Internal.Parent b10 ds2 open close content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString open)))
                                        attrs)
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '>'#)))
                                  (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString close)))
                          Text.Blaze.Internal.CustomParent b10 tag content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Types.Char
                                                    Data.ByteString.Builder.Prim.charUtf8
                                                    (GHC.Types.C# '<'#))
                                                 (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                              attrs)
                                           (Data.ByteString.Builder.Prim.primBounded
                                              @ GHC.Types.Char
                                              Data.ByteString.Builder.Prim.charUtf8
                                              (GHC.Types.C# '>'#)))
                                        (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                                     (let {
                                        bs5 :: Data.ByteString.Internal.ByteString
                                        = Data.ByteString.Internal.packChars
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b2 ->
                                                GHC.CString.unpackFoldrCString# @ b2 "</"#))
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (forall r.
                                           Data.ByteString.Builder.Internal.BuildStep r
                                           -> Data.ByteString.Builder.Internal.BuildStep r)
                                        @ Data.ByteString.Builder.Internal.Builder
                                        (\ (ds2 :: forall r.
                                                   Data.ByteString.Builder.Internal.BuildStep r
                                                   -> Data.ByteString.Builder.Internal.BuildStep
                                                        r) ->
                                         ds2)
                                          `cast`
                                        (<forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                        (\ @ r
                                           (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                           (br :: Data.ByteString.Builder.Internal.BufferRange)
                                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                         case k of k1 { DEFAULT ->
                                         case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                         case GHC.Classes.leInt
                                                (GHC.Types.I# dt3)
                                                Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                           GHC.Types.False
                                           -> (GHC.Base.$
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                 @ (GHC.Types.IO
                                                      (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (GHC.Base.returnIO
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (Data.ByteString.Builder.Internal.InsertChunk
                                                    @ r
                                                    dt4
                                                    wild1
                                                    k1))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                eta1
                                           GHC.Types.True
                                           -> let {
                                                ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                                = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                              } in
                                              let {
                                                isize :: GHC.Types.Int = GHC.Types.I# dt3
                                              } in
                                              let {
                                                op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                              } in
                                              let {
                                                ip :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr
                                                    @ GHC.Word.Word8
                                                    @ b2
                                                    (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (GHC.Types.I# dt2)
                                              } in
                                              let {
                                                op' :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b2 op isize
                                              } in
                                              case GHC.Ptr.$fOrdPtr_$c<=
                                                     @ GHC.Word.Word8
                                                     (op' @ GHC.Word.Word8)
                                                     (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                                GHC.Types.False
                                                -> case ip
                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                   case GHC.Ptr.plusPtr
                                                          @ GHC.Prim.Any
                                                          @ GHC.Word.Word8
                                                          (ip @ GHC.Prim.Any)
                                                          isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                   (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                      @ r
                                                      (Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt9)
                                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                         (eta2 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                       (GHC.Base.thenIO
                                                          @ ()
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r)
                                                          (GHC.ForeignPtr.touchForeignPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (k1 br1))
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                               r>_R)
                                                         eta2)
                                                        `cast`
                                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                       ->_R Sym (GHC.Types.N:IO[0]
                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                        r>_R))
                                                      wild2)
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } }
                                                GHC.Types.True
                                                -> (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (Foreign.Marshal.Utils.copyBytes
                                                         @ GHC.Word.Word8
                                                         op
                                                         (ip @ GHC.Word.Word8)
                                                         isize)
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1
                                                            (case op'
                                                                    @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                             Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt5 }))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } } } } })
                                          `cast`
                                        (forall (r :: <*>_N).
                                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                               (Data.ByteString.Builder.Prim.primBounded
                                  @ GHC.Types.Char
                                  Data.ByteString.Builder.Prim.charUtf8
                                  (GHC.Types.C# '>'#))
                          Text.Blaze.Internal.Leaf ds2 begin end
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds3 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds3)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r ->
                                      Data.ByteString.Builder.Internal.byteStringCopyStep
                                        @ r
                                        (Text.Blaze.Internal.getUtf8ByteString begin)))
                                  attrs)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString end)))
                          Text.Blaze.Internal.CustomLeaf tag close
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '<'#))
                                     (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                  attrs)
                               (case close of wild1 {
                                  GHC.Types.False
                                  -> Data.ByteString.Builder.Prim.primBounded
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.charUtf8
                                       (GHC.Types.C# '>'#)
                                  GHC.Types.True
                                  -> let {
                                       bs5 :: Data.ByteString.Internal.ByteString
                                       = Data.ByteString.Internal.packChars
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1 ->
                                               GHC.CString.unpackFoldrCString# @ b1 " />"#))
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r)
                                       @ Data.ByteString.Builder.Internal.Builder
                                       (\ (ds2 :: forall r.
                                                  Data.ByteString.Builder.Internal.BuildStep r
                                                  -> Data.ByteString.Builder.Internal.BuildStep
                                                       r) ->
                                        ds2)
                                         `cast`
                                       (<forall r.
                                         Data.ByteString.Builder.Internal.BuildStep r
                                         -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                       (\ @ r
                                          (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                          (br :: Data.ByteString.Builder.Internal.BufferRange)
                                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case bs5 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                        case k of k1 { DEFAULT ->
                                        case br of wild3 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                        case GHC.Classes.leInt
                                               (GHC.Types.I# dt3)
                                               Data.ByteString.Builder.Internal.maximalCopySize of wild4 {
                                          GHC.Types.False
                                          -> (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                @ (GHC.Types.IO
                                                     (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (GHC.Base.returnIO
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (Data.ByteString.Builder.Internal.InsertChunk
                                                   @ r
                                                   dt4
                                                   wild2
                                                   k1))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1
                                          GHC.Types.True
                                          -> let {
                                               ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                               = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                             } in
                                             let {
                                               isize :: GHC.Types.Int = GHC.Types.I# dt3
                                             } in
                                             let {
                                               op :: GHC.Ptr.Ptr GHC.Word.Word8
                                               = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                             } in
                                             let {
                                               ip :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr
                                                   @ GHC.Word.Word8
                                                   @ b1
                                                   (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (GHC.Types.I# dt2)
                                             } in
                                             let {
                                               op' :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                             } in
                                             case GHC.Ptr.$fOrdPtr_$c<=
                                                    @ GHC.Word.Word8
                                                    (op' @ GHC.Word.Word8)
                                                    (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild5 {
                                               GHC.Types.False
                                               -> case ip
                                                         @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                  case GHC.Ptr.plusPtr
                                                         @ GHC.Prim.Any
                                                         @ GHC.Word.Word8
                                                         (ip @ GHC.Prim.Any)
                                                         isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                  (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                     @ r
                                                     (Data.ByteString.Builder.Internal.BufferRange
                                                        dt7
                                                        dt9)
                                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                        (eta2 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1 br1))
                                                        `cast`
                                                      (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)
                                                        eta2)
                                                       `cast`
                                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                                       r>_R))
                                                     wild3)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } }
                                               GHC.Types.True
                                               -> (GHC.Base.thenIO
                                                     @ ()
                                                     @ (Data.ByteString.Builder.Internal.BuildSignal
                                                          r)
                                                     (Foreign.Marshal.Utils.copyBytes
                                                        @ GHC.Word.Word8
                                                        op
                                                        (ip @ GHC.Word.Word8)
                                                        isize)
                                                     (GHC.Base.thenIO
                                                        @ ()
                                                        @ (Data.ByteString.Builder.Internal.BuildSignal
                                                             r)
                                                        (GHC.ForeignPtr.touchForeignPtr
                                                           @ GHC.Word.Word8
                                                           ifp)
                                                        (k1
                                                           (case op'
                                                                   @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                            Data.ByteString.Builder.Internal.BufferRange
                                                              dt7
                                                              dt5 }))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } } } } })
                                         `cast`
                                       (forall (r :: <*>_N).
                                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)) })
                          Text.Blaze.Internal.Content content
                          -> Text.Blaze.Renderer.Utf8.fromChoiceString content
                          Text.Blaze.Internal.Comment comment
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (let {
                                     bs5 :: Data.ByteString.Internal.ByteString
                                     = Data.ByteString.Internal.packChars
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "<!-- "#))
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds2 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds2)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r
                                        (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                        (br :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case k of k1 { DEFAULT ->
                                      case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                      case GHC.Classes.leInt
                                             (GHC.Types.I# dt3)
                                             Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                        GHC.Types.False
                                        -> (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                              @ (GHC.Types.IO
                                                   (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (GHC.Base.returnIO
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (Data.ByteString.Builder.Internal.InsertChunk
                                                 @ r
                                                 dt4
                                                 wild1
                                                 k1))
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                             eta1
                                        GHC.Types.True
                                        -> let {
                                             ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                           } in
                                           let {
                                             isize :: GHC.Types.Int = GHC.Types.I# dt3
                                           } in
                                           let {
                                             op :: GHC.Ptr.Ptr GHC.Word.Word8
                                             = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                           } in
                                           let {
                                             ip :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr
                                                 @ GHC.Word.Word8
                                                 @ b1
                                                 (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                    @ GHC.Word.Word8
                                                    ifp)
                                                 (GHC.Types.I# dt2)
                                           } in
                                           let {
                                             op' :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                           } in
                                           case GHC.Ptr.$fOrdPtr_$c<=
                                                  @ GHC.Word.Word8
                                                  (op' @ GHC.Word.Word8)
                                                  (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                             GHC.Types.False
                                             -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                case GHC.Ptr.plusPtr
                                                       @ GHC.Prim.Any
                                                       @ GHC.Word.Word8
                                                       (ip @ GHC.Prim.Any)
                                                       isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                   @ r
                                                   (Data.ByteString.Builder.Internal.BufferRange
                                                      dt7
                                                      dt9)
                                                   (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                      (eta2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                    (GHC.Base.thenIO
                                                       @ ()
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       (GHC.ForeignPtr.touchForeignPtr
                                                          @ GHC.Word.Word8
                                                          ifp)
                                                       (k1 br1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta2)
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R))
                                                   wild2)
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } }
                                             GHC.Types.True
                                             -> (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (Foreign.Marshal.Utils.copyBytes
                                                      @ GHC.Word.Word8
                                                      op
                                                      (ip @ GHC.Word.Word8)
                                                      isize)
                                                   (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (GHC.ForeignPtr.touchForeignPtr
                                                         @ GHC.Word.Word8
                                                         ifp)
                                                      (k1
                                                         (case op'
                                                                 @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                          Data.ByteString.Builder.Internal.BufferRange
                                                            dt7
                                                            dt5 }))))
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } } } } })
                                       `cast`
                                     (forall (r :: <*>_N).
                                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString comment))
                               (let {
                                  bs5 :: Data.ByteString.Internal.ByteString
                                  = Data.ByteString.Internal.packChars
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 " -->"#))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds2 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds2)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r
                                     (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                     (br :: Data.ByteString.Builder.Internal.BufferRange)
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                   case k of k1 { DEFAULT ->
                                   case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                   case GHC.Classes.leInt
                                          (GHC.Types.I# dt3)
                                          Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                     GHC.Types.False
                                     -> (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                           @ (GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (GHC.Base.returnIO
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (Data.ByteString.Builder.Internal.InsertChunk
                                              @ r
                                              dt4
                                              wild1
                                              k1))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                          eta1
                                     GHC.Types.True
                                     -> let {
                                          ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                          = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                        } in
                                        let {
                                          isize :: GHC.Types.Int = GHC.Types.I# dt3
                                        } in
                                        let {
                                          op :: GHC.Ptr.Ptr GHC.Word.Word8
                                          = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                        } in
                                        let {
                                          ip :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 ->
                                            GHC.Ptr.plusPtr
                                              @ GHC.Word.Word8
                                              @ b1
                                              (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                 @ GHC.Word.Word8
                                                 ifp)
                                              (GHC.Types.I# dt2)
                                        } in
                                        let {
                                          op' :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 -> GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                        } in
                                        case GHC.Ptr.$fOrdPtr_$c<=
                                               @ GHC.Word.Word8
                                               (op' @ GHC.Word.Word8)
                                               (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                          GHC.Types.False
                                          -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                             case GHC.Ptr.plusPtr
                                                    @ GHC.Prim.Any
                                                    @ GHC.Word.Word8
                                                    (ip @ GHC.Prim.Any)
                                                    isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                             (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                @ r
                                                (Data.ByteString.Builder.Internal.BufferRange
                                                   dt7
                                                   dt9)
                                                (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                   (eta2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                 (GHC.Base.thenIO
                                                    @ ()
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r)
                                                    (GHC.ForeignPtr.touchForeignPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (k1 br1))
                                                   `cast`
                                                 (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)
                                                   eta2)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R))
                                                wild2)
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } }
                                          GHC.Types.True
                                          -> (GHC.Base.thenIO
                                                @ ()
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                (Foreign.Marshal.Utils.copyBytes
                                                   @ GHC.Word.Word8
                                                   op
                                                   (ip @ GHC.Word.Word8)
                                                   isize)
                                                (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (GHC.ForeignPtr.touchForeignPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (k1
                                                      (case op'
                                                              @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                       Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt5 }))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } } } } })
                                    `cast`
                                  (forall (r :: <*>_N).
                                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R)))
                          Text.Blaze.Internal.Append b10 c0 h1 h2
                          -> Data.ByteString.Builder.Internal.append
                               (go3 @ b10 attrs h1)
                               (go3 @ c0 attrs h2)
                          Text.Blaze.Internal.AddAttribute ds2 key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString key)))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.AddCustomAttribute key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Types.Char
                                                 Data.ByteString.Builder.Prim.charUtf8
                                                 (GHC.Types.C# ' '#))
                                              (Text.Blaze.Renderer.Utf8.fromChoiceString key))
                                           (let {
                                              bs5 :: Data.ByteString.Internal.ByteString
                                              = Data.ByteString.Internal.packChars
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b1 ->
                                                      GHC.CString.unpackFoldrCString# @ b1 "=\""#))
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (forall r.
                                                 Data.ByteString.Builder.Internal.BuildStep r
                                                 -> Data.ByteString.Builder.Internal.BuildStep r)
                                              @ Data.ByteString.Builder.Internal.Builder
                                              (\ (ds2 :: forall r.
                                                         Data.ByteString.Builder.Internal.BuildStep
                                                           r
                                                         -> Data.ByteString.Builder.Internal.BuildStep
                                                              r) ->
                                               ds2)
                                                `cast`
                                              (<forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                              (\ @ r
                                                 (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                                 (br :: Data.ByteString.Builder.Internal.BufferRange)
                                                 (eta1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                               case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                               case k of k1 { DEFAULT ->
                                               case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                               case GHC.Classes.leInt
                                                      (GHC.Types.I# dt3)
                                                      Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                                 GHC.Types.False
                                                 -> (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       @ (GHC.Types.IO
                                                            (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (GHC.Base.returnIO
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (Data.ByteString.Builder.Internal.InsertChunk
                                                          @ r
                                                          dt4
                                                          wild1
                                                          k1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta1
                                                 GHC.Types.True
                                                 -> let {
                                                      ifp :: GHC.ForeignPtr.ForeignPtr
                                                               GHC.Word.Word8
                                                      = GHC.ForeignPtr.ForeignPtr
                                                          @ GHC.Word.Word8
                                                          dt
                                                          dt1
                                                    } in
                                                    let {
                                                      isize :: GHC.Types.Int = GHC.Types.I# dt3
                                                    } in
                                                    let {
                                                      op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                      = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                                    } in
                                                    let {
                                                      ip :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (GHC.Types.I# dt2)
                                                    } in
                                                    let {
                                                      op' :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          op
                                                          isize
                                                    } in
                                                    case GHC.Ptr.$fOrdPtr_$c<=
                                                           @ GHC.Word.Word8
                                                           (op' @ GHC.Word.Word8)
                                                           (GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              dt5) of wild4 {
                                                      GHC.Types.False
                                                      -> case ip
                                                                @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                         case GHC.Ptr.plusPtr
                                                                @ GHC.Prim.Any
                                                                @ GHC.Word.Word8
                                                                (ip @ GHC.Prim.Any)
                                                                isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                         (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                            @ r
                                                            (Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt9)
                                                            (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                               (eta2 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                             (GHC.Base.thenIO
                                                                @ ()
                                                                @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r)
                                                                (GHC.ForeignPtr.touchForeignPtr
                                                                   @ GHC.Word.Word8
                                                                   ifp)
                                                                (k1 br1))
                                                               `cast`
                                                             (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)
                                                               eta2)
                                                              `cast`
                                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                            wild2)
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } }
                                                      GHC.Types.True
                                                      -> (GHC.Base.thenIO
                                                            @ ()
                                                            @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                            (Foreign.Marshal.Utils.copyBytes
                                                               @ GHC.Word.Word8
                                                               op
                                                               (ip @ GHC.Word.Word8)
                                                               isize)
                                                            (GHC.Base.thenIO
                                                               @ ()
                                                               @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                    r)
                                                               (GHC.ForeignPtr.touchForeignPtr
                                                                  @ GHC.Word.Word8
                                                                  ifp)
                                                               (k1
                                                                  (case op'
                                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                                   Data.ByteString.Builder.Internal.BufferRange
                                                                     dt7
                                                                     dt5 }))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } } } } })
                                                `cast`
                                              (forall (r :: <*>_N).
                                               <Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R))))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.Empty
                          -> Data.ByteString.Builder.Internal.empty }
                    } in
                    go3 @ () Data.ByteString.Builder.Internal.empty eta)) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazea ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze a
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dToMarkup :: Text.Blaze.ToMarkup a).
                  @ *
                  @ Htmls.HTMLBlaze
                  @ a
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender @ a $dToMarkup)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender @ a $dToMarkup) -}
df82e7b1da340e6321ba41f4a67cb466
  $fMimeRenderTYPEHTMLBlazea1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazea2 ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dToMarkup :: Text.Blaze.ToMarkup a)
                   (eta :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType eta) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazea_$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Text.Blaze.ToMarkup a)
                   (w1 :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (w2 :: a) ->
                 Htmls.$w$cmimeRender @ a w w2) -}
71e9b6ef84f7601188f085ac6a4a2310
  $fMimeRenderTYPEHTMLBlazea_$cp1MimeRender ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Htmls.$fMimeRenderTYPEHTMLBlazea2
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Blaze.ToMarkup a>_R
                 ->_R Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N)) -}
33d06ecd7857d30bc82f7d78347477f5
  $fMimeRenderTYPEHTMLBlazea_go3 ::
    Data.ByteString.Builder.Internal.Builder
    -> Text.Blaze.Internal.MarkupM b
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: NOINLINE -}
fbdd68cac9dadc06d8c90b635a908665
  $fToMarkupTool :: Text.Blaze.ToMarkup Models.Tool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.Tool
                  Htmls.$fToMarkupTool_$ctoMarkup
                  Htmls.$fToMarkupTool_$ctoMarkup -}
4d9cf2dc64965109dae4cf1ed9043a18
  $fToMarkupTool1 :: Text.Blaze.Internal.Markup
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   Htmls.$fToMarkupTool2) -}
3fa6892c774789ec39fc025aa45ccbba
  $fToMarkupTool10 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool26
                   Htmls.$fToMarkupTool24
                   Htmls.$fToMarkupTool11) -}
15c69a32ea3f40ebcc7fe832b3d410ae
  $fToMarkupTool100 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w15) -}
ffd173dc044d8b52807dfcf1164d2188
  $fToMarkupTool101 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool102) -}
5154adb76291a2fe50b2fe10e778baaa
  $fToMarkupTool102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "col-md-12 col-lg 4"#) -}
0a0b4b02811a8d19b3828d5d5df9557c
  $fToMarkupTool103 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool104) -}
7ce3abaae46fbfc4cfc9f8d02df30be8
  $fToMarkupTool104 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool105) -}
d43fda1bcc92ad4ebe0ecc35616382df
  $fToMarkupTool105 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool120
                   Htmls.$fToMarkupTool106) -}
9999842feffd112dd51f30a79a19f806
  $fToMarkupTool106 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool116
                   Htmls.$fToMarkupTool112
                   Htmls.$fToMarkupTool110
                   Htmls.$fToMarkupTool107) -}
143ba6d5af7f75e872f3c8e20d6cd262
  $fToMarkupTool107 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool26
                   Htmls.$fToMarkupTool108
                   Htmls.$fToMarkupTool56) -}
ef8b4ac0c2b26e9e227ff2ad689697d0
  $fToMarkupTool108 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool109) -}
d7d277e446a5d53db940c70694e1e2be
  $fToMarkupTool109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "button"#) -}
90a520825dfed0e8a825b754272045b4
  $fToMarkupTool11 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool_f
                   Htmls.$fToMarkupTool_f1
                   Htmls.$fToMarkupTool_f2
                   Htmls.$fToMarkupTool12) -}
dff6825e9c35572a48271e8095b29cdf
  $fToMarkupTool110 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool111) -}
19c5b5d8fe8cc578f55ba8308834ed51
  $fToMarkupTool111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "showPic()"#) -}
eafcfe3f8ede1f7a88ee042b0a19f755
  $fToMarkupTool112 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool115
                   Htmls.$fToMarkupTool114
                   Htmls.$fToMarkupTool_t17) -}
de6848f9298ed5c33ebffbadc44441e4
  $fToMarkupTool113 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w16
                   0#
                   ipv }) -}
c6804341388e810816f79f6704ed6f9e
  $fToMarkupTool114 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
00f0a0a78ea5ef824ee6a376f7d19c93
  $fToMarkupTool115 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w16) -}
d9e7bb366ad8c5e04eddf0f61e40f9b1
  $fToMarkupTool116 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool119
                   Htmls.$fToMarkupTool118
                   Htmls.$fToMarkupTool_t18) -}
9588dbd9145f7bd717f4ff65378e7684
  $fToMarkupTool117 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w17
                   0#
                   ipv }) -}
be95898a9266696d8beace324b8426aa
  $fToMarkupTool118 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3380f41e558deb669ef0a9b67d63ed85
  $fToMarkupTool119 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w17) -}
8401db85cc7983b4c52cafbc2f81f916
  $fToMarkupTool12 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool13) -}
fd33b107a574d789a5adcb85ac81c689
  $fToMarkupTool120 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool121) -}
af07479ce12c847f7e72860f2009de7f
  $fToMarkupTool121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Current Img"#) -}
eca7a9473aa4008715ebada8d2d6193e
  $fToMarkupTool122 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool125
                   Htmls.$fToMarkupTool124
                   Htmls.$fToMarkupTool_t19) -}
0b2a14ef2bd8e98735ab33475c9ab9e5
  $fToMarkupTool123 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w18
                   0#
                   ipv }) -}
70cee9d6e0f48a18dd3f5f66c5c37664
  $fToMarkupTool124 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
58666b873f653953cae3e0ed045806f3
  $fToMarkupTool125 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w18) -}
8bd7cb48482edc0a6ff93f4a45c4fc82
  $fToMarkupTool126 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool129
                   Htmls.$fToMarkupTool128
                   Htmls.$fToMarkupTool_t20) -}
634b44c5e21c9740ac3596813dbd361a
  $fToMarkupTool127 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w19
                   0#
                   ipv }) -}
87b71750044da57df182b1349ec2fd88
  $fToMarkupTool128 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
70d173001b31181c518be1ab74249040
  $fToMarkupTool129 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w19) -}
d616ebaa4718a5798f520176605703c3
  $fToMarkupTool13 :: Text.Blaze.Internal.MarkupM ()
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool14) -}
aeab007d68f4c8adfaab1f77c9eac615
  $fToMarkupTool130 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool131) -}
5b3b19c2151a9536bdbb308b46fd124d
  $fToMarkupTool131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "col-md-8 col-lg-4"#) -}
99a3308855b3680792ffeef68ca8e16a
  $fToMarkupTool132 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool133) -}
48515cc39c615301bbb118ab7316f64b
  $fToMarkupTool133 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool134) -}
0be03c8e0a5a8409e714eac8731bd9af
  $fToMarkupTool134 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool138
                   Htmls.$fToMarkupTool135) -}
da15288dee17a5affa3d59d1f3f51fa9
  $fToMarkupTool135 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool116
                   Htmls.$fToMarkupTool112
                   Htmls.$fToMarkupTool136
                   Htmls.$fToMarkupTool107) -}
11197ec32b5462becef2b1fb527a11d6
  $fToMarkupTool136 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool137) -}
dc0b8bfa1d4133134025e3cb802c456d
  $fToMarkupTool137 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "picUpdate()"#) -}
18a2cef9c1d127bad80748cceacf09bd
  $fToMarkupTool138 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool139) -}
6d0c4e1bc60668fd792dc257fce528f7
  $fToMarkupTool139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Update This Img"#) -}
6f597cbb962d2589f25f69847502b977
  $fToMarkupTool14 :: Text.Blaze.Internal.ChoiceString
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7c34993c2fcdf44900bdfbe4fa87bcc7
  $fToMarkupTool140 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool141) -}
1529ab17264031359178cb7af70d0255
  $fToMarkupTool141 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "container"#) -}
d735f589f9a379f2263689732ce81922
  $fToMarkupTool142 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool140
                   Htmls.$fToMarkupTool143) -}
125bc9211a81ea14dd0bea3df1a3b0d0
  $fToMarkupTool143 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool144) -}
7bc5b04c9760a967a43eae4f1779c78c
  $fToMarkupTool144 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool173
                   Htmls.$fToMarkupTool169
                   Htmls.$fToMarkupTool167
                   Htmls.$fToMarkupTool145) -}
9ff01b48f5c774f2cf489b937c60738d
  $fToMarkupTool145 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool163
                   Htmls.$fToMarkupTool159
                   Htmls.$fToMarkupTool110
                   Htmls.$fToMarkupTool146) -}
913ce00b42c964f023a385595301e937
  $fToMarkupTool146 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool155
                   Htmls.$fToMarkupTool151
                   Htmls.$fToMarkupTool147
                   Htmls.$fToMarkupTool13) -}
fd730a9bc2ecc978afc7dcae94c6a85f
  $fToMarkupTool147 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool150
                   Htmls.$fToMarkupTool149
                   Htmls.$fToMarkupTool_t21) -}
f20b8b67858cbe9bee85220e80650ae1
  $fToMarkupTool148 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w20
                   0#
                   ipv }) -}
47c8aa20fd9d9978b6fec204305f21e6
  $fToMarkupTool149 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8f25acc98a429245b94015e1ad096e0c
  $fToMarkupTool15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w
                   0#
                   ipv }) -}
a12805d14b8d9b9da4041060c1a29ad3
  $fToMarkupTool150 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w20) -}
7407ebaacba8e070e824f096e49bce22
  $fToMarkupTool151 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool154
                   Htmls.$fToMarkupTool153
                   Htmls.$fToMarkupTool_t22) -}
fce3e3c1ab854f76ce7a5e571633fa61
  $fToMarkupTool152 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w21
                   0#
                   ipv }) -}
c67b29f6459850305271990d94a3c2b8
  $fToMarkupTool153 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
68797671f301e8b0bf8c39739e2fbb42
  $fToMarkupTool154 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w21) -}
aeecba1940806ed06ab0aa4d9183f1b2
  $fToMarkupTool155 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool158
                   Htmls.$fToMarkupTool157
                   Htmls.$fToMarkupTool_t23) -}
6b1433ef5e45cbe7027090afca3c1cb7
  $fToMarkupTool156 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w22
                   0#
                   ipv }) -}
02bcd27fe685881c7dba4f3743db40b9
  $fToMarkupTool157 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4f12bf17a4909ea2f71702cb447ade8c
  $fToMarkupTool158 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w22) -}
2fc43b36df6ceddd2e0ca88b9716184a
  $fToMarkupTool159 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool162
                   Htmls.$fToMarkupTool161
                   Htmls.$fToMarkupTool_t24) -}
f9dc8fe5c97e8dfa7c748c2dd99969f9
  $fToMarkupTool16 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
23d43f6457a436f52d5b5ea28a0a0449
  $fToMarkupTool160 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w23
                   0#
                   ipv }) -}
43426a66b9e7503de7d9c4dbec3b8476
  $fToMarkupTool161 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cf42a53bd0eab70ec4af949fa3e0b800
  $fToMarkupTool162 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w23) -}
dedf1846218f9e48e5a12901ea7126e8
  $fToMarkupTool163 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool166
                   Htmls.$fToMarkupTool165
                   Htmls.$fToMarkupTool_t25) -}
08b22c9d1bed0f490c24ace8b7ea381d
  $fToMarkupTool164 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w24
                   0#
                   ipv }) -}
6860c286f0628c9a25521f3a2d91a2c9
  $fToMarkupTool165 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a4f3a203348ed2c6000d9bb791a0cd51
  $fToMarkupTool166 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w24) -}
0eec643869dcb2a1b51c3f1466bdfa4f
  $fToMarkupTool167 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool168) -}
7c4f28fdb89219315d7cebe221121b91
  $fToMarkupTool168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "theImage"#) -}
803d1e09b2c34283c98301f3d1da6933
  $fToMarkupTool169 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool172
                   Htmls.$fToMarkupTool171
                   Htmls.$fToMarkupTool_t26) -}
ff4f9332e6f97d5a7fe52db4a7a2f645
  $fToMarkupTool17 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Htmls.$fToMarkupTool_w) -}
e3bcbc122a7f857a4e074ff689ff93e4
  $fToMarkupTool170 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w25
                   0#
                   ipv }) -}
d3beefc373d9c0071375a906e64e4096
  $fToMarkupTool171 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
5b6ad2b144ea0e2efe918cee71bc33ee
  $fToMarkupTool172 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w25) -}
846b9ea21934fab75fe59f2bd8bc6b70
  $fToMarkupTool173 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool176
                   Htmls.$fToMarkupTool175
                   Htmls.$fToMarkupTool_t27) -}
a42e06172fb147d38d1ed9ef7b0acf39
  $fToMarkupTool174 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w26
                   0#
                   ipv }) -}
89f033fe89b5963689309f97e3f61f05
  $fToMarkupTool175 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bb1c3cf70a345ae988fd60fade8852f9
  $fToMarkupTool176 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w26) -}
74f3f1261ec5737df8ccd47770e65e16
  $fToMarkupTool177 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool200
                   Htmls.$fToMarkupTool196
                   Htmls.$fToMarkupTool194
                   Htmls.$fToMarkupTool178) -}
388018205eb98d7841f1930605ca6022
  $fToMarkupTool178 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool190
                   Htmls.$fToMarkupTool186
                   Htmls.$fToMarkupTool182
                   Htmls.$fToMarkupTool179) -}
4d6a792b3b0914beabbac8e889785a8e
  $fToMarkupTool179 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool180) -}
749378c58fd9e6ead360610b6f095ea8
  $fToMarkupTool18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w1
                   0#
                   ipv }) -}
caa2d6020b61384bae75a37b5c0444ef
  $fToMarkupTool180 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool181) -}
d74fefcfad2bc191d27826d333ab25f5
  $fToMarkupTool181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Draw something on an image or nothing with some friends. Yay!"#) -}
55c850b7fdc1f50ae82663cc0bd8e6e9
  $fToMarkupTool182 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool185
                   Htmls.$fToMarkupTool184
                   Htmls.$fToMarkupTool_t28) -}
f3162df0c1a0de4a6643d03b399c5148
  $fToMarkupTool183 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w27
                   0#
                   ipv }) -}
6d352f69d699f8aa6fedb138e7fdb91b
  $fToMarkupTool184 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
38eeeaca62950b98a09eba7058268cb8
  $fToMarkupTool185 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w27) -}
e94c14b8b41a03250bff18d9487545d4
  $fToMarkupTool186 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool189
                   Htmls.$fToMarkupTool188
                   Htmls.$fToMarkupTool_t29) -}
4bc03d4afd6502e91e524fa5d7c8c0fb
  $fToMarkupTool187 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w28
                   0#
                   ipv }) -}
6263df692924bd40b6cc80f22aa27417
  $fToMarkupTool188 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bb98135f65c99f0e2eda2d1da0fc3f61
  $fToMarkupTool189 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w28) -}
e7ee35ced332eb7c797b5949796d11f5
  $fToMarkupTool19 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6ee8b52e4e3cd27b3c0d43c64a8669b6
  $fToMarkupTool190 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool193
                   Htmls.$fToMarkupTool192
                   Htmls.$fToMarkupTool_t30) -}
69efd7aadeb818c3cd2fec4343f18412
  $fToMarkupTool191 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w29
                   0#
                   ipv }) -}
edf13d91528e60511df294ea9b992e7b
  $fToMarkupTool192 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
9fa33df00704ddb10ddc4392c5acc398
  $fToMarkupTool193 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w29) -}
0b6b6aeb6ff1160964f3059f87e7dd46
  $fToMarkupTool194 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool195) -}
0ff44fed42a4acf5b4b80673b56e0f4a
  $fToMarkupTool195 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "text-align: center"#) -}
d9010772f43c2f03fb63b4425b1d84b9
  $fToMarkupTool196 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool199
                   Htmls.$fToMarkupTool198
                   Htmls.$fToMarkupTool_t31) -}
79fbdcffb8dc01f84560447c485b1534
  $fToMarkupTool197 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w30
                   0#
                   ipv }) -}
5738f2afb9448681da6582e791e24cd2
  $fToMarkupTool198 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e7b62fabdecc59dbc8b06d96c5aced04
  $fToMarkupTool199 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w30) -}
f18b751aa46c052c89654bf6f4b95954
  $fToMarkupTool2 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool282
                   Htmls.$fToMarkupTool278
                   Htmls.$fToMarkupTool274
                   Htmls.$fToMarkupTool3) -}
98e6b071433e679bbcb99722810a1b9c
  $fToMarkupTool20 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w1) -}
f0d80c16f460f79d91786fbf0a4f2476
  $fToMarkupTool200 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool203
                   Htmls.$fToMarkupTool202
                   Htmls.$fToMarkupTool_t32) -}
581eaed228df58511eba00e79a983765
  $fToMarkupTool201 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w31
                   0#
                   ipv }) -}
c99a1158802ed60dabab06ef8cb67f67
  $fToMarkupTool202 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b6698c8be904a7c22a0a3217dcaa2a38
  $fToMarkupTool203 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w31) -}
d415c3f3041d448fbbbdf32907c6cb4c
  $fToMarkupTool204 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool207
                   Htmls.$fToMarkupTool206
                   Htmls.$fToMarkupTool_t33) -}
e2f81a1358171bce2a0fb817a0d62811
  $fToMarkupTool205 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w32
                   0#
                   ipv }) -}
5963c07f97ff4e961d85909c754d390d
  $fToMarkupTool206 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a96a912c87ef60ff5e8d7ffbe8765edb
  $fToMarkupTool207 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w32) -}
608f4275167d54ae75a010695f438e0f
  $fToMarkupTool208 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool211
                   Htmls.$fToMarkupTool210
                   Htmls.$fToMarkupTool_t34) -}
85943ebb46174a59e42a8d668c24088a
  $fToMarkupTool209 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w33
                   0#
                   ipv }) -}
7ef943ffe14de9a2bcab73f86c4c0120
  $fToMarkupTool21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w2
                   0#
                   ipv }) -}
121b6e2edb555b9d1f8b646d1b373a30
  $fToMarkupTool210 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6e8d6a100a95c5eb72a4c87b20bb1658
  $fToMarkupTool211 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w33) -}
3eafd718b1920850f6476da7192e2d50
  $fToMarkupTool212 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool215
                   Htmls.$fToMarkupTool214
                   Htmls.$fToMarkupTool_t35) -}
3fce69f6fbcb9f0fb98cd11804754535
  $fToMarkupTool213 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w34
                   0#
                   ipv }) -}
1a4ae27d61a146a1a0f30e28c588e447
  $fToMarkupTool214 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t35 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bdc390f415757a4df07ff80a6ce4de53
  $fToMarkupTool215 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w34) -}
764beaa0db0c7b054f9824648bea7e88
  $fToMarkupTool216 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool270
                   Htmls.$fToMarkupTool266
                   Htmls.$fToMarkupTool262
                   Htmls.$fToMarkupTool217) -}
d973a678a50240f7cc77d0d2eec149f6
  $fToMarkupTool217 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool240
                   Htmls.$fToMarkupTool218) -}
9804d82d52aa0b54001a559a3224990a
  $fToMarkupTool218 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool236
                   Htmls.$fToMarkupTool232
                   Htmls.$fToMarkupTool230
                   Htmls.$fToMarkupTool219) -}
ac0c25547a6b6396e101dd0637446fa6
  $fToMarkupTool219 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool226
                   Htmls.$fToMarkupTool222
                   Htmls.$fToMarkupTool220
                   Text.Blaze.Html5.meta) -}
309b0f1c260609030923808f500a61c7
  $fToMarkupTool22 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e6b9a0310229e7ef8d030432bf1351f0
  $fToMarkupTool220 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool221) -}
d880c48918723b24bc39ed59833fba8c
  $fToMarkupTool221 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "viewport"#) -}
b7ababa8794c4d16f358d63f8f2d9496
  $fToMarkupTool222 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool225
                   Htmls.$fToMarkupTool224
                   Htmls.$fToMarkupTool_t36) -}
9479ebbf9ddfa2550b39956ef18151ed
  $fToMarkupTool223 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w35
                   0#
                   ipv }) -}
a32f457ca367a1f74d40cf8f4457a962
  $fToMarkupTool224 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t36 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
eeddf7cba2ae989a6c15ac229dd71edf
  $fToMarkupTool225 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w35) -}
c16e33aaac3b7f0cef62606ad06ed783
  $fToMarkupTool226 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool229
                   Htmls.$fToMarkupTool228
                   Htmls.$fToMarkupTool_t37) -}
4416561f305a113513aed0f461ad15df
  $fToMarkupTool227 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w36
                   0#
                   ipv }) -}
8a6828498291d2f789b9a6534bfeee9a
  $fToMarkupTool228 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t37 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
faab108be21abff06a1bc41a622e6559
  $fToMarkupTool229 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w36) -}
ea0dbba6ee587dbfaec5957dd5892e38
  $fToMarkupTool23 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w2) -}
59c05cf0db14a78a53edfa937e755c4d
  $fToMarkupTool230 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool231) -}
e8f485610a136d0427f3a49f539483fe
  $fToMarkupTool231 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "width=device-width, initial-scale=1"#) -}
6cf1a361cd48bc3c735c84a72384f9ee
  $fToMarkupTool232 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool235
                   Htmls.$fToMarkupTool234
                   Htmls.$fToMarkupTool_t38) -}
0e343c1b6027867699ff6a72f0ae772e
  $fToMarkupTool233 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w37
                   0#
                   ipv }) -}
fda2ca63c4342f911b4adb94d68e14db
  $fToMarkupTool234 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t38 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
395fa6bae45a749035e193f8cc688315
  $fToMarkupTool235 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w37) -}
2960708a95c8931e32e4d67aafad1e7e
  $fToMarkupTool236 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool239
                   Htmls.$fToMarkupTool238
                   Htmls.$fToMarkupTool_t39) -}
de0a5356ab3234293c5080a5cb58d6f3
  $fToMarkupTool237 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w38
                   0#
                   ipv }) -}
a63b07e28dee00d7d09cd6f9b6052199
  $fToMarkupTool238 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t39 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7993487880ea0e40dc199f1294dcea68
  $fToMarkupTool239 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w38) -}
7732d26bb7f543c3f96bf5792ea5aeb3
  $fToMarkupTool24 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool25) -}
f62a313151fc3541da83b67833280abd
  $fToMarkupTool240 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool258
                   Htmls.$fToMarkupTool254
                   Htmls.$fToMarkupTool252
                   Htmls.$fToMarkupTool241) -}
0e1a9747a42b7739b6561c72b3d12f02
  $fToMarkupTool241 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool248
                   Htmls.$fToMarkupTool244
                   Htmls.$fToMarkupTool242
                   Text.Blaze.Html5.link) -}
27687cb455b00136ca91ca4d6db6c632
  $fToMarkupTool242 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool243) -}
dd126372613bb1ef16cf65b90f735242
  $fToMarkupTool243 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "stylesheet"#) -}
bf02e01edd615a304bddb1781d017bf3
  $fToMarkupTool244 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool247
                   Htmls.$fToMarkupTool246
                   Htmls.$fToMarkupTool_t40) -}
bfe739ede7b2e19e535a1524fc23a754
  $fToMarkupTool245 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w39
                   0#
                   ipv }) -}
7d47801271cf37228af3b12cca98efb5
  $fToMarkupTool246 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t40 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c1172df273cf6cccbbd60c482ceffc36
  $fToMarkupTool247 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w39) -}
49dffbca93b0f6943e38a06193a49582
  $fToMarkupTool248 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool251
                   Htmls.$fToMarkupTool250
                   Htmls.$fToMarkupTool_t41) -}
1646f22642f6a931297445e9934fc360
  $fToMarkupTool249 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w40
                   0#
                   ipv }) -}
dde4fd11e9718c0b9ed97dafa2c95d34
  $fToMarkupTool25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "text/javascript"#) -}
de33768e4b78feeabf8502401094f2d4
  $fToMarkupTool250 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t41 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c249a3f46612cbe39b1f83cf8a6235a8
  $fToMarkupTool251 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w40) -}
c04493294dcfde4ced7e60f34f39708a
  $fToMarkupTool252 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool253) -}
e33f25aa0da50c76b9ba5bfbcc13a0b4
  $fToMarkupTool253 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"#) -}
13afca6eed635aaf0d71d58ef8ceba35
  $fToMarkupTool254 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool257
                   Htmls.$fToMarkupTool256
                   Htmls.$fToMarkupTool_t42) -}
0a2fe62ba07958388657c4e0ba9bf2a0
  $fToMarkupTool255 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w41
                   0#
                   ipv }) -}
115a366a1c8382c29e3410fedb3ff676
  $fToMarkupTool256 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t42 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
62a7d293a480359a047729bea121c6ae
  $fToMarkupTool257 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w41) -}
3ea3a824c7a68d74b8a739b462c429ea
  $fToMarkupTool258 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool261
                   Htmls.$fToMarkupTool260
                   Htmls.$fToMarkupTool_t43) -}
948cf7425c8d796fa6e7ffca2a1e19ab
  $fToMarkupTool259 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w42
                   0#
                   ipv }) -}
c83f3cc820218d3e428c1ee04abafce8
  $fToMarkupTool26 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool29
                   Htmls.$fToMarkupTool28
                   Htmls.$fToMarkupTool_t4) -}
0cd5166d6304b89c75271cb4e3f5fc32
  $fToMarkupTool260 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t43 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
50913b2d9f90b40c7f50c44e33b79fe3
  $fToMarkupTool261 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w42) -}
3bd02f85dc012f5cae5bcb8b39f7c600
  $fToMarkupTool262 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool265
                   Htmls.$fToMarkupTool264
                   Htmls.$fToMarkupTool_t44) -}
453915cf5ad9e127fd64a98468d98844
  $fToMarkupTool263 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w43
                   0#
                   ipv }) -}
d7d58116225d1f25d5292f626af9057c
  $fToMarkupTool264 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t44 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bcb9aba2cbc8535dc931275787b78a60
  $fToMarkupTool265 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w43) -}
7c99f432cbe7255802a13096b3e61cfd
  $fToMarkupTool266 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool269
                   Htmls.$fToMarkupTool268
                   Htmls.$fToMarkupTool_t45) -}
86661a2a58a3743d2c015499c0d21242
  $fToMarkupTool267 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w44
                   0#
                   ipv }) -}
4d5607165a05537d88f7e73f8d842807
  $fToMarkupTool268 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t45 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e5fed76555ceb7eeb721d63a1ebe602f
  $fToMarkupTool269 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w44) -}
2380bc9493cd582e8998221c56a7bd2a
  $fToMarkupTool27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w3
                   0#
                   ipv }) -}
cd3fb87f7c6047e80e83f1621f1e90a7
  $fToMarkupTool270 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool273
                   Htmls.$fToMarkupTool272
                   Htmls.$fToMarkupTool_t46) -}
e24ad299f081e60eca7e339f4c45ed51
  $fToMarkupTool271 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w45
                   0#
                   ipv }) -}
20c78ef5b4593568a1b703cdc80b29c3
  $fToMarkupTool272 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t46 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c741bd429d7bcbaab42496b74fc1f9ff
  $fToMarkupTool273 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w45) -}
cbbd5046476c41d357edc7f7144452c9
  $fToMarkupTool274 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool277
                   Htmls.$fToMarkupTool276
                   Htmls.$fToMarkupTool_t47) -}
ae4b14a9baa1535b1b1e8bae1c3de1f9
  $fToMarkupTool275 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w46
                   0#
                   ipv }) -}
1222ae22c576fa64367efa7394faba54
  $fToMarkupTool276 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t47 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
261e61b6673550071334a6cd8bc9efa0
  $fToMarkupTool277 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w46) -}
351e2fb91e77e206d6abdf2df807c734
  $fToMarkupTool278 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool281
                   Htmls.$fToMarkupTool280
                   Htmls.$fToMarkupTool_t48) -}
697d0e901a4935a143e494ecdba05979
  $fToMarkupTool279 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w47
                   0#
                   ipv }) -}
8a0c07a2cdff0aa4cf8e63505107f6b7
  $fToMarkupTool28 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8eaf4b0a6ea9661dedbd3f5e5dae7493
  $fToMarkupTool280 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t48 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b497899bbf5418e07b2a2e613b9d29be
  $fToMarkupTool281 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w47) -}
90d0bab62b4a70fc7dec3e63b61c2e6e
  $fToMarkupTool282 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool285
                   Htmls.$fToMarkupTool284
                   Htmls.$fToMarkupTool_t49) -}
9985316e468bf94e6db2567044ddbf99
  $fToMarkupTool283 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w48
                   0#
                   ipv }) -}
e74044063cf01fb31e6b33aa828edc6c
  $fToMarkupTool284 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t49 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6f4a4128c0e5496f71a9ae35d35c2371
  $fToMarkupTool285 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w48) -}
8ac21b95a9d6b7f1329bb2438a4d199b
  $fToMarkupTool286 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool287) -}
bd6f0ce01d416b606f452314ba5698fa
  $fToMarkupTool287 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool288) -}
ff294ad07854b6961ff55ab3bd1b4e81
  $fToMarkupTool288 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "?d=' + Date.now(); showPic(); };"#) -}
412b657aa80235c8eac0ee59cf5c4f03
  $fToMarkupTool289 :: Text.Blaze.Html.Html
  {- Strictness: x -}
ab83636b41f3d13205d3f98c6c3b30eb
  $fToMarkupTool29 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w3) -}
366cf41523c65cf5ae0d4c81c92c0ac1
  $fToMarkupTool290 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool291) -}
11879ce5a5ebb8cce812713333d9de53
  $fToMarkupTool291 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool292) -}
c12185afb8d7718c61909c28d9e18008
  $fToMarkupTool292 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "../image/Checkerboard"#) -}
169d7e753eb0628920ed53b7f74376d9
  $fToMarkupTool293 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool294) -}
536ee487f521a2eef9bb13bd6eb96666
  $fToMarkupTool294 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool295) -}
6de43f885a69a50c925a30b6c44ea796
  $fToMarkupTool295 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Frame"#) -}
63368858c31c7eb24b621c89dc64ac0c
  $fToMarkupTool296 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool297) -}
3bda7d8a385ba7a34fe649c65a338a97
  $fToMarkupTool297 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool298) -}
2f73bcb48746ee4f31f0266b7c8eb41a
  $fToMarkupTool298 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Spiral"#) -}
f5d679131c17ce7f9dce4cef21591b10
  $fToMarkupTool299 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool300) -}
5d0f9af4fe37f2e1659c9897ef32615e
  $fToMarkupTool3 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool216
                   Htmls.$fToMarkupTool4) -}
9a6bcccc80a2bf90e850e57587ea78be
  $fToMarkupTool30 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool33
                   Htmls.$fToMarkupTool32
                   Htmls.$fToMarkupTool_t5) -}
5714ae19725bc4e265a510d1ea8419d9
  $fToMarkupTool300 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool301) -}
5795c4fa23b494fdbcdc42cef71643a5
  $fToMarkupTool301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/ZipImage"#) -}
060d30e1d216eb1cb1ff1bc13067bb16
  $fToMarkupTool302 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool303) -}
f1b1b706f116fe5637904bd19b92ce8f
  $fToMarkupTool303 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool304) -}
38ec07ddce82f374b766723ff77b294d
  $fToMarkupTool304 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "picUpdate2 = function() { img.src ='"#) -}
e2ef45f628b77b68667ff65c5a3d9c80
  $fToMarkupTool305 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool17
                   Htmls.$fToMarkupTool306
                   Htmls.$fToMarkupTool_t1) -}
7da5dbac521fd4588d76f663c9be4464
  $fToMarkupTool306 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
42010397c0430fd005505ab4b2709574
  $fToMarkupTool307 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool20
                   Htmls.$fToMarkupTool308
                   Htmls.$fToMarkupTool_t2) -}
1920f702fa2904a0a6dbfcdb62989ff5
  $fToMarkupTool308 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a3fac2aed73d28115837e0d7577cfedf
  $fToMarkupTool309 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool310
                   Htmls.$fToMarkupTool_t3) -}
39536cd0c72cb9ec9002e7805ce33476
  $fToMarkupTool31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w4
                   0#
                   ipv }) -}
f6b4ac54c3040d7a038a67122c4e18dc
  $fToMarkupTool310 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
9c985adcf1b6f09020b888ae70426370
  $fToMarkupTool311 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool140
                   Htmls.$fToMarkupTool312) -}
cd25792174b834ef79bf937f9fdfc8cb
  $fToMarkupTool312 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool313) -}
5f0208798c99ef67ff94fa6dbb487e1b
  $fToMarkupTool313 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool330
                   Htmls.$fToMarkupTool314) -}
1ea8eb8530f0d297fde275ccb60f27c5
  $fToMarkupTool314 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool323
                   Htmls.$fToMarkupTool315) -}
52b05c7404cc53260bce686e45a43ca2
  $fToMarkupTool315 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool316) -}
2eb6cb7644fa31632e06a20126ea27b2
  $fToMarkupTool316 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool317) -}
f6499019773ca3047b6552e2183efc87
  $fToMarkupTool317 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool321
                   Htmls.$fToMarkupTool318) -}
a273ceef57dca1d96e3bb1891fc058a8
  $fToMarkupTool318 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool116
                   Htmls.$fToMarkupTool112
                   Htmls.$fToMarkupTool319
                   Htmls.$fToMarkupTool107) -}
bded7e9895e5308e86cd7a690f503004
  $fToMarkupTool319 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool320) -}
75aba9cb2d45e8bf8c16507de40ad167
  $fToMarkupTool32 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4382f7d176741ea79893056a45ef2a12
  $fToMarkupTool320 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "picUpdate2()"#) -}
5a991187ca5f6488ad67f688c77ec62c
  $fToMarkupTool321 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool322) -}
4115db0542891384fbd3a6d408533d4f
  $fToMarkupTool322 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Combine!"#) -}
9d13eaeb342184bb462d38fbf3492ba0
  $fToMarkupTool323 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool328
                   Htmls.$fToMarkupTool324) -}
1172210cb99939cfefb6811d039bf9c6
  $fToMarkupTool324 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool325) -}
da96cef1a5b0b2ad6a77360db872be17
  $fToMarkupTool325 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool326
                   Htmls.$fToMarkupTool54) -}
c150c9c21f4e84c1dc781e11c39a0cea
  $fToMarkupTool326 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool327) -}
8e651ef1b52461dcffb843d1e6dc6727
  $fToMarkupTool327 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic2(this.files[0],'False')"#) -}
b5f5827651e13e69c92f90d73f026bde
  $fToMarkupTool328 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool329) -}
2750a3cf2d322796f43b0787fc69fec0
  $fToMarkupTool329 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "col-md-6 col-lg-4"#) -}
58cef43cba978ee926726d369c10ef64
  $fToMarkupTool33 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w4) -}
2d6d3b8874a39ca6953bcc4028990160
  $fToMarkupTool330 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool328
                   Htmls.$fToMarkupTool331) -}
f340b7212292b86cc35e9cc6cf9d4018
  $fToMarkupTool331 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool332) -}
824c513efd30afe60645426db05287e1
  $fToMarkupTool332 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool333
                   Htmls.$fToMarkupTool54) -}
22ca7aa37bc2cdac06f196bf6e0dd049
  $fToMarkupTool333 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool334) -}
9a721e63c54df1dc9275f003858fdbac
  $fToMarkupTool334 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic2(this.files[0],'True')"#) -}
4a30768fa100802ec064aac8b2d4ebce
  $fToMarkupTool335 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool140
                   Htmls.$fToMarkupTool336) -}
25fb2667b0df3eaa16f58d30e1b4294a
  $fToMarkupTool336 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool337) -}
e2383401e33192e80fda953a1c8f2215
  $fToMarkupTool337 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool173
                   Htmls.$fToMarkupTool169
                   Htmls.$fToMarkupTool167
                   Htmls.$fToMarkupTool146) -}
77a77110a32f8cc440d48b92a43f4d68
  $fToMarkupTool338 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool200
                   Htmls.$fToMarkupTool196
                   Htmls.$fToMarkupTool194
                   Htmls.$fToMarkupTool339) -}
bedb684ed859633143d2c9feaac86819
  $fToMarkupTool339 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool190
                   Htmls.$fToMarkupTool186
                   Htmls.$fToMarkupTool182
                   Htmls.$fToMarkupTool340) -}
8c85e89eec1e3f7113f90c4180491127
  $fToMarkupTool34 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool35) -}
712a0775c3801addfb4fe7e9e04feb39
  $fToMarkupTool340 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool341) -}
01a6c6ca87e4c44fa80d9fb61ae0cc7e
  $fToMarkupTool341 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool342) -}
8a279d66ee9053fd2922b961516ddf83
  $fToMarkupTool342 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Combine two pictures to create a cool new image"#) -}
8f82a9061657399c0b5a8474ac207a00
  $fToMarkupTool343 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool207
                   Htmls.$fToMarkupTool344
                   Htmls.$fToMarkupTool_t33) -}
91128dcb80df69f26af4c14bd8e67308
  $fToMarkupTool344 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
740132faf9b473a5b7360ed83dc1d1cf
  $fToMarkupTool345 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool211
                   Htmls.$fToMarkupTool346
                   Htmls.$fToMarkupTool_t34) -}
e272f9d20c18132e2f9a8256203dd9cb
  $fToMarkupTool346 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a6c51adcafacc12f908aeeaef56cfd98
  $fToMarkupTool347 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool215
                   Htmls.$fToMarkupTool348
                   Htmls.$fToMarkupTool_t35) -}
cf16df4fc2d4f71b1c8a30b79d489a60
  $fToMarkupTool348 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t35 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bd8d2d4c53e5833c11ee289d72f77eaf
  $fToMarkupTool349 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool277
                   Htmls.$fToMarkupTool350
                   Htmls.$fToMarkupTool_t47) -}
0779c8c098a629a965e94f08e5cb1e41
  $fToMarkupTool35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../loading.js"#) -}
b5bf22f043fb173d8b1f059da00c693f
  $fToMarkupTool350 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t47 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
dc77259175cb9deeb1f70d9725fff310
  $fToMarkupTool351 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool281
                   Htmls.$fToMarkupTool352
                   Htmls.$fToMarkupTool_t48) -}
3b15cbcb79f1a4813f8802ad8d58db12
  $fToMarkupTool352 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t48 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e0fc63395d7b1e88513d161a7cbcce08
  $fToMarkupTool353 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool285
                   Htmls.$fToMarkupTool354
                   Htmls.$fToMarkupTool_t49) -}
b68b90bd004105680f4ddcd5a4f83b2d
  $fToMarkupTool354 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t49 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0e4419eb7e6ae08cead276da043c2978
  $fToMarkupTool36 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool39
                   Htmls.$fToMarkupTool38
                   Htmls.$fToMarkupTool_t6) -}
0b18db93e983f4e13e372d825a7c955e
  $fToMarkupTool37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w5
                   0#
                   ipv }) -}
3e4454937e259e9c3644ff87eb46947e
  $fToMarkupTool38 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c4016ee484678f8e83f60a02ab255b80
  $fToMarkupTool39 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w5) -}
0c5d299d3ccb7fba082dc48c150e895e
  $fToMarkupTool4 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool212
                   Htmls.$fToMarkupTool208
                   Htmls.$fToMarkupTool204
                   Htmls.$fToMarkupTool5) -}
7ceceb5019f425d2ab9a88b1b86202f9
  $fToMarkupTool40 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool43
                   Htmls.$fToMarkupTool42
                   Htmls.$fToMarkupTool_t7) -}
a7968e00947fa2ab8e45034b983ed44b
  $fToMarkupTool41 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w6
                   0#
                   ipv }) -}
10a73f93ac7f136f4dfdb740483b0cc1
  $fToMarkupTool42 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7542113a22e89c48bdabeb1973e34126
  $fToMarkupTool43 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w6) -}
900d30180e3b3b6f79398adbd2c15efc
  $fToMarkupTool44 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool40
                   Htmls.$fToMarkupTool36
                   Htmls.$fToMarkupTool45
                   Htmls.$fToMarkupTool10) -}
83711653ece257fecb2e37bdfd58a682
  $fToMarkupTool45 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool46) -}
c83647753d83b4de422b6ca9861065fc
  $fToMarkupTool46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../canvas.js"#) -}
9e9147de80c3859cc9547b92bba79b4f
  $fToMarkupTool47 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool140
                   Htmls.$fToMarkupTool48) -}
2011ded6a6f9312644147871c2432e71
  $fToMarkupTool48 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool49) -}
0016986fe0659f275aaf40ee437ff948
  $fToMarkupTool49 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool132
                   Htmls.$fToMarkupTool50) -}
185fb17bb8c7f464f1d3e3ebac7ec13d
  $fToMarkupTool5 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool177
                   Htmls.$fToMarkupTool6) -}
2f55b653a0170a63a6564127e782462e
  $fToMarkupTool50 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool103
                   Htmls.$fToMarkupTool51) -}
864b8d487b1ce2e841c24a6ec84b59e1
  $fToMarkupTool51 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool101
                   Htmls.$fToMarkupTool52) -}
ed5e5b5b7898def29cdff94dea6c0815
  $fToMarkupTool52 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool53) -}
e10747c02b441c4ff7b9a551076e71d2
  $fToMarkupTool53 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool79
                   Htmls.$fToMarkupTool54) -}
dfbb1e84a429b3f71215e52985578bf7
  $fToMarkupTool54 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool75
                   Htmls.$fToMarkupTool71
                   Htmls.$fToMarkupTool69
                   Htmls.$fToMarkupTool55) -}
69e62552db43f2afffdce45290d7c780
  $fToMarkupTool55 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool26
                   Htmls.$fToMarkupTool67
                   Htmls.$fToMarkupTool56) -}
27611ec8a8a576333a526caf925fa7b5
  $fToMarkupTool56 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool57
                   Text.Blaze.Html5.input) -}
2bdb75ed331df3733661404d5a0540cc
  $fToMarkupTool57 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool58) -}
b1fc2f1d250eb8111a34c420d95017b6
  $fToMarkupTool58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "btn btn-default"#) -}
856c091ab8fa39446371880b1bbe33f8
  $fToMarkupTool59 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool62
                   Htmls.$fToMarkupTool61
                   Htmls.$fToMarkupTool_t8) -}
d014b137fb0548d6ccb4eae806ebcbc3
  $fToMarkupTool6 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool142
                   Htmls.$fToMarkupTool7) -}
e6635e17672b093ade17b2df0c19cecb
  $fToMarkupTool60 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w7
                   0#
                   ipv }) -}
2dace18067ece139abe46288800903a4
  $fToMarkupTool61 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e8cb0032112b25154ff9c586b8c1acc4
  $fToMarkupTool62 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w7) -}
6ca33dc9f2a400e2128c1568a4735b64
  $fToMarkupTool63 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool65
                   Htmls.$fToMarkupTool_t9) -}
615da11f50ef08f760aebff570aa8b40
  $fToMarkupTool64 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w8
                   0#
                   ipv }) -}
5b9c5ed23133e031c12856eb83dade9a
  $fToMarkupTool65 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bece472741862682429d81611f19e990
  $fToMarkupTool66 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w8) -}
9e1d00f6348672dd7a80fd54d47f0d2d
  $fToMarkupTool67 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool68) -}
d4a93f6c942302f1b328f09c84c74c23
  $fToMarkupTool68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "file"#) -}
35b21950dcf5746200fa6524ed8cd3c7
  $fToMarkupTool69 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool70) -}
7c9792109e77ce7aa2010d7e7f1afe33
  $fToMarkupTool7 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool47
                   Htmls.$fToMarkupTool8) -}
5f9fb88f6fadcbd0d40f13d87b65cf90
  $fToMarkupTool70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "image/jpeg"#) -}
18b6aa481d277af8821bd3b387ac7bc3
  $fToMarkupTool71 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool74
                   Htmls.$fToMarkupTool73
                   Htmls.$fToMarkupTool_t10) -}
defe1769c9c5c4568eca78c7a5cb3042
  $fToMarkupTool72 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w9
                   0#
                   ipv }) -}
f62ec0fb2c0a3ce5f9871db049c74d48
  $fToMarkupTool73 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cd66b2822674a507c97ee398f7c459b8
  $fToMarkupTool74 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w9) -}
123ebad3b1695fc1aaad5194c7219d6a
  $fToMarkupTool75 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool78
                   Htmls.$fToMarkupTool77
                   Htmls.$fToMarkupTool_t11) -}
e28b18b3a333c152ac6cc12ce7be6cbe
  $fToMarkupTool76 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w10
                   0#
                   ipv }) -}
c3c986ac78dcff93d42e92de9e51ab70
  $fToMarkupTool77 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cf556fb1cbfe7764e6386a15eb993308
  $fToMarkupTool78 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w10) -}
83fe2096796b0fb6771e57e1a2540b35
  $fToMarkupTool79 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool80) -}
d4b1282e8dcfc42bfd3b548be66aac0d
  $fToMarkupTool8 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool44
                   Htmls.$fToMarkupTool9) -}
7936ddc684b5fd82e72b906c8a0a7aa8
  $fToMarkupTool80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic(this.files[0])"#) -}
b962f404b9bd218a6d2168d277aa80c4
  $fToMarkupTool81 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool84
                   Htmls.$fToMarkupTool83
                   Htmls.$fToMarkupTool_t12) -}
32c67c9ab3694627d3a934a2af7c6b27
  $fToMarkupTool82 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w11
                   0#
                   ipv }) -}
9de72ae4d21fe8e02c2feffc7c5b23d3
  $fToMarkupTool83 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7d954ef8649466672116b8a43d6d2831
  $fToMarkupTool84 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w11) -}
927e846ff1baf9373b88c7b638361580
  $fToMarkupTool85 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool88
                   Htmls.$fToMarkupTool87
                   Htmls.$fToMarkupTool_t13) -}
4d139db86310ff370405e62ac9818b83
  $fToMarkupTool86 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w12
                   0#
                   ipv }) -}
7ea1e767421e8d23d53d417b87203ce3
  $fToMarkupTool87 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
99cc761e02bdc76341de21861debee78
  $fToMarkupTool88 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w12) -}
96ad1d044359251771395edb57fcd48d
  $fToMarkupTool89 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool92
                   Htmls.$fToMarkupTool91
                   Htmls.$fToMarkupTool_t14) -}
47580aeb566d69724342057111e22dc8
  $fToMarkupTool9 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool40
                   Htmls.$fToMarkupTool36
                   Htmls.$fToMarkupTool34
                   Htmls.$fToMarkupTool10) -}
bc5b8c122b6eb6903c0361ffca4c9aa5
  $fToMarkupTool90 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w13
                   0#
                   ipv }) -}
d39a9376d198dbb931bf5acce3e68473
  $fToMarkupTool91 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d3c95d26bf6becbe36e3ad48affaea2f
  $fToMarkupTool92 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w13) -}
222580bbb2f8f3e4c76e84df19a7de40
  $fToMarkupTool93 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool96
                   Htmls.$fToMarkupTool95
                   Htmls.$fToMarkupTool_t15) -}
37b8497b096e7d7cf5e1bf206d0b3187
  $fToMarkupTool94 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w14
                   0#
                   ipv }) -}
cd4c89dc8ec77a2e61db73de34f8d118
  $fToMarkupTool95 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d3425ff37503a49314565b13efe2ed4d
  $fToMarkupTool96 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w14) -}
6142dc77e08e69142d2183fb566c932e
  $fToMarkupTool97 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool100
                   Htmls.$fToMarkupTool99
                   Htmls.$fToMarkupTool_t16) -}
6f506f045a28a3c5c1950dbbfb71c361
  $fToMarkupTool98 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w15
                   0#
                   ipv }) -}
cdd8db2cbcf7cfd3c615d13a8ef434cf
  $fToMarkupTool99 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
24b8f6e36511d8b9f5f56463ddbdf211
  $fToMarkupTool_$ctoMarkup ::
    Models.Tool -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Models.Tool) ->
                 case ds of wild {
                   DEFAULT
                   -> Text.Blaze.Internal.Append
                        @ ()
                        @ ()
                        @ ()
                        Text.Blaze.Html5.docType
                        (Text.Blaze.Internal.Parent
                           @ ()
                           @ ()
                           Htmls.$fToMarkupTool353
                           Htmls.$fToMarkupTool351
                           Htmls.$fToMarkupTool349
                           (Text.Blaze.Internal.Append
                              @ ()
                              @ ()
                              @ ()
                              Htmls.$fToMarkupTool216
                              (Text.Blaze.Internal.Parent
                                 @ ()
                                 @ ()
                                 Htmls.$fToMarkupTool347
                                 Htmls.$fToMarkupTool345
                                 Htmls.$fToMarkupTool343
                                 (Text.Blaze.Internal.Append
                                    @ ()
                                    @ ()
                                    @ ()
                                    Htmls.$fToMarkupTool338
                                    (Text.Blaze.Internal.Append
                                       @ ()
                                       @ ()
                                       @ ()
                                       Htmls.$fToMarkupTool335
                                       (Text.Blaze.Internal.Append
                                          @ ()
                                          @ ()
                                          @ ()
                                          Htmls.$fToMarkupTool311
                                          (Text.Blaze.Internal.Append
                                             @ ()
                                             @ ()
                                             @ ()
                                             Htmls.$fToMarkupTool9
                                             (Text.Blaze.Internal.Parent
                                                @ ()
                                                @ ()
                                                Htmls.$fToMarkupTool309
                                                Htmls.$fToMarkupTool307
                                                Htmls.$fToMarkupTool305
                                                (Text.Blaze.Internal.external
                                                   @ ()
                                                   (Text.Blaze.Internal.Append
                                                      @ ()
                                                      @ ()
                                                      @ ()
                                                      Htmls.$fToMarkupTool302
                                                      (Text.Blaze.Internal.Append
                                                         @ ()
                                                         @ ()
                                                         @ ()
                                                         (case wild of wild1 {
                                                            Models.ZipImage
                                                            -> Htmls.$fToMarkupTool299
                                                            Models.Spiral -> Htmls.$fToMarkupTool296
                                                            Models.Frame -> Htmls.$fToMarkupTool293
                                                            Models.Checkerboard
                                                            -> Htmls.$fToMarkupTool290
                                                            Models.Rave
                                                            -> Htmls.$fToMarkupTool289 })
                                                         Htmls.$fToMarkupTool286)))))))))))
                   Models.Draw -> Htmls.$fToMarkupTool1 }) -}
cac3ad7cca7d9033eca41f0f2342b390
  $fToMarkupTool_f :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool_t3) -}
eea22b4f446f1f26c63f9c98d5499bd7
  $fToMarkupTool_f1 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool20
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool_t2) -}
b1ac4af8afef76175a0e15fba2fcf7d0
  $fToMarkupTool_f2 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool17
                   Htmls.$fToMarkupTool16
                   Htmls.$fToMarkupTool_t1) -}
f702cbc82e7512291891436b79cfdb15
  $fToMarkupTool_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool15 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7813e7e3df3b99bbd4484a1a92998ea0
  $fToMarkupTool_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool72 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
53624819a98e16d853b0ba3bbc11dee9
  $fToMarkupTool_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool76 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
eebbd35f25691a12157dcdc41c706afd
  $fToMarkupTool_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool82 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
99d0515b7453729982a2f4b9f003ee3b
  $fToMarkupTool_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool86 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
55aab68df300ed41ead992d93c3cd873
  $fToMarkupTool_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool90 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f70ae60b2127e296a2101f4c7bfae54e
  $fToMarkupTool_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool94 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
74b826c3f72572bbb19d32251d8b92de
  $fToMarkupTool_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool98 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
925e48ca00637ff31503c6f3978f9051
  $fToMarkupTool_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool113 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
47f9c3899cb5c26e2dbd423ef07b1d8e
  $fToMarkupTool_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool117 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3cd8064c327dc034871e98ff6e6e4904
  $fToMarkupTool_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool123 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
551d76ee3d10827b305849704950bb27
  $fToMarkupTool_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool18 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
221f4fc9423e4ed4695eb8fc00a1f676
  $fToMarkupTool_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool127 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
25449462768238a5b02dc63568fc4c2d
  $fToMarkupTool_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool148 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7ea03fb8c147cb1e719d1a5178e92ba2
  $fToMarkupTool_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool152 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
dda771cddee495b58e034056af603719
  $fToMarkupTool_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool156 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f38696391b5fcc3423a7e86d0455b8c7
  $fToMarkupTool_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool160 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c3647f241ac8414cfebcaade9b995403
  $fToMarkupTool_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool164 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f065fc8b97fc39a0745c2d7b8ca805d5
  $fToMarkupTool_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool170 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7ce1bcd76d1c356b4abf6e112b09fae9
  $fToMarkupTool_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool174 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
197e894559c7f4b8ba2892412cdcafe1
  $fToMarkupTool_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool183 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
898f8023e1d0f2da766817ff9dd4f04b
  $fToMarkupTool_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool187 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b7ef7a7fdbe4947b78cd20fce852c4ed
  $fToMarkupTool_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool21 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ecead5ab712b6e7f4001abde18a1c4da
  $fToMarkupTool_t30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool191 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0c655fcb2d0c197dfe0746254f1fbe72
  $fToMarkupTool_t31 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool197 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
48a95b7a5ef304845da0e998655727fc
  $fToMarkupTool_t32 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool201 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1bdc8472b8e6b82a89dfcb162360dc3f
  $fToMarkupTool_t33 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool205 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
dfb98c69d09df7c56749faac94b427d2
  $fToMarkupTool_t34 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool209 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
173e20861fb25adadf7b107471fc826d
  $fToMarkupTool_t35 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool213 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3324c1888e9c1fa0d6c56f2885a7ec5f
  $fToMarkupTool_t36 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool223 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b1836f876de13154405033b820189009
  $fToMarkupTool_t37 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool227 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6aa74babbd042ba52adba5013670f8e7
  $fToMarkupTool_t38 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool233 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a617ce05b0bbc45483a30604d09761cb
  $fToMarkupTool_t39 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool237 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
aad5668d95708566a45356dadf0e9aac
  $fToMarkupTool_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool27 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
40e3eab181092498ae4603e16be6d502
  $fToMarkupTool_t40 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool245 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b17b4d223e4da2dde956c34ee5fbe239
  $fToMarkupTool_t41 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool249 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
2cbb7537fbb9aa50fba37927aad06386
  $fToMarkupTool_t42 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool255 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4320a7e01c0453352dcee9cf145f1e80
  $fToMarkupTool_t43 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool259 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
590802fe2ebd2882eea5603b49525a1b
  $fToMarkupTool_t44 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool263 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
db666503643b3c2b148abcb302adc23d
  $fToMarkupTool_t45 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool267 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fe71e3c4a95139254de2292d274282f9
  $fToMarkupTool_t46 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool271 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
15facf33662400182c6d0416bde03595
  $fToMarkupTool_t47 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool275 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
eb31348bec17c9456eaa269010cf94a4
  $fToMarkupTool_t48 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool279 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c149a5f24dc420578060fc0fac7cc931
  $fToMarkupTool_t49 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool283 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
767988d80bda1a10c35afc36c2ca6aa3
  $fToMarkupTool_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool31 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
557746e60669510bc5cfc50da6b33875
  $fToMarkupTool_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool37 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3b47e846cadd2ecb8279dea399302f9a
  $fToMarkupTool_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool41 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
33c3bb829922bd642b329165a1ad698e
  $fToMarkupTool_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool60 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
de21ec2ddc8a8bfcd38176091e60d34c
  $fToMarkupTool_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool64 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
99344bb40b8e9f7a98670b3e50568c8c
  $fToMarkupTool_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</script>"#) -}
f965223ff7d9cafaf265b17e025d14ef
  $fToMarkupTool_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<script"#) -}
e836b6f1e76e43450858a5444cdc76c7
  $fToMarkupTool_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "accept"#) -}
cfe64cea02206204a62b37e1db7009b6
  $fToMarkupTool_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onchange=\""#) -}
5a0da5a0a8789274b7027df216b90c0a
  $fToMarkupTool_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onchange"#) -}
c1e1716a9b2729270df9a81bac9db783
  $fToMarkupTool_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</div>"#) -}
3975344c8e860545d9d70a695d8c7b95
  $fToMarkupTool_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<div"#) -}
c0ab24a3249f1bf6dc50b3b0c8005ce9
  $fToMarkupTool_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "div"#) -}
4bfac426bf13e994463e3ef5c5648df3
  $fToMarkupTool_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onclick=\""#) -}
e8775afe084e1ae851e7f798e609d0b8
  $fToMarkupTool_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onclick"#) -}
5b5c506d4eae3a2fe464ccf0b98d1fb0
  $fToMarkupTool_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " value=\""#) -}
ecff546bf04f3f2835d79843f9e75c1a
  $fToMarkupTool_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "value"#) -}
979acb1d53f039327077368bda864dc7
  $fToMarkupTool_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "script"#) -}
23adc62b05bad5aacfabd2ddc5be22ee
  $fToMarkupTool_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</canvas>"#) -}
92d0b3dfb9371f0d0d3cee0ec2a04369
  $fToMarkupTool_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<canvas"#) -}
fe11c65e4becc45becfd14cc13102552
  $fToMarkupTool_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "canvas"#) -}
e3dc5c09d8123386deea5b3fc92054c0
  $fToMarkupTool_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onload=\""#) -}
bd0cf894263fc1d6cd5c89cfbfea8db1
  $fToMarkupTool_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onload"#) -}
681b16f67b7fee39348ef77508c7c60a
  $fToMarkupTool_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " id=\""#) -}
2b49d488b004160b39abfc74113b14d9
  $fToMarkupTool_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "id"#) -}
bb3890eae338fd1b89b3eba63e30327c
  $fToMarkupTool_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</p>"#) -}
0be323e9af864807132a09f68128c3d0
  $fToMarkupTool_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<p"#) -}
8e476119b74c87603891dc4cba4ad709
  $fToMarkupTool_w29 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "p"#) -}
cc457b5f888fcaff9b26552810e60764
  $fToMarkupTool_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " type=\""#) -}
218c12c670cd4e0398be3e1b1939f623
  $fToMarkupTool_w30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " style=\""#) -}
fa67ed812c890ffd5cfa17eaf4f08fa1
  $fToMarkupTool_w31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "style"#) -}
b382f05c68f5ae41eac14f8081e19697
  $fToMarkupTool_w32 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</body>"#) -}
a3cd4f6dbf58cf0d69776ea1a23f40e9
  $fToMarkupTool_w33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<body"#) -}
4a2461ac027923f6abb8759e01be48a7
  $fToMarkupTool_w34 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
41dfac128bc7d77037b5594f88b92679
  $fToMarkupTool_w35 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " name=\""#) -}
39b7570947dfd86ba7a9d30aa7295ddd
  $fToMarkupTool_w36 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
9dcc3644558c14704de243b4410d0112
  $fToMarkupTool_w37 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " content=\""#) -}
f6bd73efd604c81ccdfaf2138fad266d
  $fToMarkupTool_w38 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "content"#) -}
b01766919fcf94ab56f5afaa56c8adaf
  $fToMarkupTool_w39 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " rel=\""#) -}
bee10195db2610da135a75e63e3b696b
  $fToMarkupTool_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "type"#) -}
db5e36309a9f0d148c0f47e406a3e86a
  $fToMarkupTool_w40 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "rel"#) -}
e18581b508784755181e9cc5d1252af7
  $fToMarkupTool_w41 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " href=\""#) -}
78f5129aa3ca1fa9e0bab168b52fdfb1
  $fToMarkupTool_w42 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "href"#) -}
d93daf0e4a1bb0e29f4da8943879c9b7
  $fToMarkupTool_w43 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</head>"#) -}
82b72f357a35eeed9367cd48ac43ae7d
  $fToMarkupTool_w44 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<head"#) -}
0b3eb69e07cb78d022722eea0d8cb8ab
  $fToMarkupTool_w45 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "head"#) -}
2f273c8a11e2e94c0f243ad3564e6a9f
  $fToMarkupTool_w46 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</html>"#) -}
7b757a9b0f13fdd54c8242072a33b6eb
  $fToMarkupTool_w47 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<html"#) -}
2ae0c774983fecfcab0a28108d3be4d3
  $fToMarkupTool_w48 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
9126f3e9526065a2c9cf996aee730863
  $fToMarkupTool_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " src=\""#) -}
0b4cdd4f97bb8cdde6fe032c17d6ea20
  $fToMarkupTool_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "src"#) -}
eb6ebb45e3d0c49ecaae0ae2ebf7286b
  $fToMarkupTool_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " class=\""#) -}
fca612dc2409a076317b701c25018715
  $fToMarkupTool_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "class"#) -}
dedf144ad6f3e2107dc81464625fa0e4
  $fToMarkupTool_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " accept=\""#) -}
d3f7204fa9d5a559a11cdd6435774bb5
  $tcHTMLBlaze :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18329992377669789137##
                   6837167869858480650##
                   Htmls.$trModule
                   Htmls.$tcHTMLBlaze1) -}
c0f51a87b7b6af3dbe0c006e18d9c566
  $tcHTMLBlaze1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HTMLBlaze"#) -}
b11813dab5430cecba3cdaa23f9ea72a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Htmls.$trModule2 Htmls.$trModule1) -}
5156d38db40bc1a5362b21473d1a3584
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Htmls"#) -}
801a4f4b8902da7499cad633f6dd2ff4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf"#) -}
722bff95a7b11371340c4a9efbeaf8da
  $w$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Text.Blaze.ToMarkup a) (w1 :: a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                      @ ()
                      Htmls.$fMimeRenderTYPEHTMLBlazea1
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                      (Text.Blaze.toMarkup @ a w w1))) -}
71e9b6ef84f7601188f085ac6a4a2310
  data HTMLBlaze
instance Servant.API.ContentTypes.Accept [TYPE, Htmls.HTMLBlaze]
  = Htmls.$fAcceptTYPEHTMLBlaze
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, Text.Blaze.Internal.MarkupM]
  = Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, .]
  = Htmls.$fMimeRenderTYPEHTMLBlazea
instance Text.Blaze.ToMarkup [Models.Tool] = Htmls.$fToMarkupTool
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

