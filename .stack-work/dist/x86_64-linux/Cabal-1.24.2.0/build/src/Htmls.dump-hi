
==================== FINAL INTERFACE ====================
2017-06-08 18:55:21.956349 UTC

interface picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Htmls [orphan module] 8002
  interface hash: aae7e313561f4604a330334176a9e271
  ABI hash: 66aa1e2126dbb30f5ec7eb36c90a41bc
  export-list hash: 916788173142834e424c5476e53f681f
  orphan hash: 1df9567ed14450c0d9d003518909f466
  flag hash: d81c5bd899ee9bae2e83b7d3242d4f56
  sig of: Nothing
  used TH splices: False
  where
exports:
  Htmls.HTMLBlaze
module dependencies: Models
package dependencies: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed
                      aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html 288dbf097dbd0ff17b50c3c1330477db
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html.Renderer.Utf8 5b26c380f5278a1c6a43c894929cec9d
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5 a78d4ae47bedb2841a6332de06a90707
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5.Attributes 7657fa2d710bc2ae02fd88196e7a43b7
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze e36927cead1a7aeccd029225c1dba5b4
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze.Internal 52ba665013f4dfa6d731e8584348806e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media 07625d65eebeff997f1e9bc032ba3b6e
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media.MediaType d33bfddaa1306ad267f9a6689258b69b
import  -/  Models a583d3d139141f01a428355c3be9e3e0
  exports: 649c66b751c1cc1240dccaa93aa3621e
  Checkerboard d18c045cf311857166018e7c7b89bb5f
  Frame 268e61aa0777504eda62811730b0a81e
  Spiral 0d48b9deaa765ca4c31d0e7122af2a74
  Tool fad96378789a8d19005dcb78b174623e
  ZipImage e541d41fd7cffcc77a9e57f0f14ed6ff
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes f46c3af563d8e4f630ae29c1d96b30a9
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fAcceptTYPEHTMLBlaze ::
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  DFunId
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Htmls.HTMLBlaze>_N)) -}
6a6b46c25642391121a4a67558474bcf
  $fAcceptTYPEHTMLBlaze1 ::
    Network.HTTP.Media.MediaType.Internal.MediaType
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "text"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 let {
                   addr#1 :: GHC.Prim.Addr# = "html"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#1
                        ipv of wild1 { (#,#) ds2 ds6 ->
                 case Network.HTTP.Media.MediaType.$w//
                        addr#
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds4)
                        addr#1
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds6) of ww10 { (#,,#) ww11 ww12 ww13 ->
                 case Network.HTTP.Media.MediaType.$w/:
                        ww11
                        ww12
                        ww13
                        Htmls.$fAcceptTYPEHTMLBlaze3
                        Htmls.$fAcceptTYPEHTMLBlaze2 of ww7 { (#,,#) ww8 ww9 ww1 ->
                 Network.HTTP.Media.MediaType.Internal.MediaType
                   ww8
                   ww9
                   ww1 } } } } }) -}
9cb504f035c8a4d37b98c6aab3ec3ef4
  $fAcceptTYPEHTMLBlaze2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "utf-8"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
66f07396d29a06176e24834a8a2bd555
  $fAcceptTYPEHTMLBlaze3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "charset"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fAcceptTYPEHTMLBlaze_$ccontentType ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze1) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazeMarkupM ::
    Servant.API.ContentTypes.MimeRender
      Htmls.HTMLBlaze Text.Blaze.Html.Html
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Text.Blaze.Html.Html
                  Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                    `cast`
                  (Sym (Servant.API.ContentTypes.N:Accept[0]
                            <*>_N <Htmls.HTMLBlaze>_N))
                  Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Text.Blaze.Html.Html -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (eta :: Text.Blaze.Internal.Markup) ->
                 Data.ByteString.Builder.toLazyByteString
                   (letrec {
                      go3 :: forall b.
                             Data.ByteString.Builder.Internal.Builder
                             -> Text.Blaze.Internal.MarkupM b
                             -> Data.ByteString.Builder.Internal.Builder
                        {- Arity: 2, Inline: NOINLINE -}
                      = \ @ b
                          (attrs :: Data.ByteString.Builder.Internal.Builder)
                          (ds1 :: Text.Blaze.Internal.MarkupM b) ->
                        case ds1 of wild {
                          Text.Blaze.Internal.Parent b10 ds2 open close content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString open)))
                                        attrs)
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '>'#)))
                                  (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString close)))
                          Text.Blaze.Internal.CustomParent b10 tag content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Types.Char
                                                    Data.ByteString.Builder.Prim.charUtf8
                                                    (GHC.Types.C# '<'#))
                                                 (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                              attrs)
                                           (Data.ByteString.Builder.Prim.primBounded
                                              @ GHC.Types.Char
                                              Data.ByteString.Builder.Prim.charUtf8
                                              (GHC.Types.C# '>'#)))
                                        (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                                     (let {
                                        bs5 :: Data.ByteString.Internal.ByteString
                                        = Data.ByteString.Internal.packChars
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b2 ->
                                                GHC.CString.unpackFoldrCString# @ b2 "</"#))
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (forall r.
                                           Data.ByteString.Builder.Internal.BuildStep r
                                           -> Data.ByteString.Builder.Internal.BuildStep r)
                                        @ Data.ByteString.Builder.Internal.Builder
                                        (\ (ds2 :: forall r.
                                                   Data.ByteString.Builder.Internal.BuildStep r
                                                   -> Data.ByteString.Builder.Internal.BuildStep
                                                        r) ->
                                         ds2)
                                          `cast`
                                        (<forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                        (\ @ r
                                           (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                           (br :: Data.ByteString.Builder.Internal.BufferRange)
                                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                         case k of k1 { DEFAULT ->
                                         case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                         case GHC.Classes.leInt
                                                (GHC.Types.I# dt3)
                                                Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                           GHC.Types.False
                                           -> (GHC.Base.$
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                 @ (GHC.Types.IO
                                                      (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (GHC.Base.returnIO
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (Data.ByteString.Builder.Internal.InsertChunk
                                                    @ r
                                                    dt4
                                                    wild1
                                                    k1))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                eta1
                                           GHC.Types.True
                                           -> let {
                                                ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                                = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                              } in
                                              let {
                                                isize :: GHC.Types.Int = GHC.Types.I# dt3
                                              } in
                                              let {
                                                op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                              } in
                                              let {
                                                ip :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr
                                                    @ GHC.Word.Word8
                                                    @ b2
                                                    (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (GHC.Types.I# dt2)
                                              } in
                                              let {
                                                op' :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b2 op isize
                                              } in
                                              case GHC.Ptr.$fOrdPtr_$c<=
                                                     @ GHC.Word.Word8
                                                     (op' @ GHC.Word.Word8)
                                                     (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                                GHC.Types.False
                                                -> case ip
                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                   case GHC.Ptr.plusPtr
                                                          @ GHC.Prim.Any
                                                          @ GHC.Word.Word8
                                                          (ip @ GHC.Prim.Any)
                                                          isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                   (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                      @ r
                                                      (Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt9)
                                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                         (eta2 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                       (GHC.Base.thenIO
                                                          @ ()
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r)
                                                          (GHC.ForeignPtr.touchForeignPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (k1 br1))
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                               r>_R)
                                                         eta2)
                                                        `cast`
                                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                       ->_R Sym (GHC.Types.N:IO[0]
                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                        r>_R))
                                                      wild2)
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } }
                                                GHC.Types.True
                                                -> (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (Foreign.Marshal.Utils.copyBytes
                                                         @ GHC.Word.Word8
                                                         op
                                                         (ip @ GHC.Word.Word8)
                                                         isize)
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1
                                                            (case op'
                                                                    @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                             Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt5 }))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } } } } })
                                          `cast`
                                        (forall (r :: <*>_N).
                                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                               (Data.ByteString.Builder.Prim.primBounded
                                  @ GHC.Types.Char
                                  Data.ByteString.Builder.Prim.charUtf8
                                  (GHC.Types.C# '>'#))
                          Text.Blaze.Internal.Leaf ds2 begin end
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds3 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds3)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r ->
                                      Data.ByteString.Builder.Internal.byteStringCopyStep
                                        @ r
                                        (Text.Blaze.Internal.getUtf8ByteString begin)))
                                  attrs)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString end)))
                          Text.Blaze.Internal.CustomLeaf tag close
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '<'#))
                                     (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                  attrs)
                               (case close of wild1 {
                                  GHC.Types.False
                                  -> Data.ByteString.Builder.Prim.primBounded
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.charUtf8
                                       (GHC.Types.C# '>'#)
                                  GHC.Types.True
                                  -> let {
                                       bs5 :: Data.ByteString.Internal.ByteString
                                       = Data.ByteString.Internal.packChars
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1 ->
                                               GHC.CString.unpackFoldrCString# @ b1 " />"#))
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r)
                                       @ Data.ByteString.Builder.Internal.Builder
                                       (\ (ds2 :: forall r.
                                                  Data.ByteString.Builder.Internal.BuildStep r
                                                  -> Data.ByteString.Builder.Internal.BuildStep
                                                       r) ->
                                        ds2)
                                         `cast`
                                       (<forall r.
                                         Data.ByteString.Builder.Internal.BuildStep r
                                         -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                       (\ @ r
                                          (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                          (br :: Data.ByteString.Builder.Internal.BufferRange)
                                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case bs5 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                        case k of k1 { DEFAULT ->
                                        case br of wild3 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                        case GHC.Classes.leInt
                                               (GHC.Types.I# dt3)
                                               Data.ByteString.Builder.Internal.maximalCopySize of wild4 {
                                          GHC.Types.False
                                          -> (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                @ (GHC.Types.IO
                                                     (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (GHC.Base.returnIO
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (Data.ByteString.Builder.Internal.InsertChunk
                                                   @ r
                                                   dt4
                                                   wild2
                                                   k1))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1
                                          GHC.Types.True
                                          -> let {
                                               ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                               = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                             } in
                                             let {
                                               isize :: GHC.Types.Int = GHC.Types.I# dt3
                                             } in
                                             let {
                                               op :: GHC.Ptr.Ptr GHC.Word.Word8
                                               = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                             } in
                                             let {
                                               ip :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr
                                                   @ GHC.Word.Word8
                                                   @ b1
                                                   (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (GHC.Types.I# dt2)
                                             } in
                                             let {
                                               op' :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                             } in
                                             case GHC.Ptr.$fOrdPtr_$c<=
                                                    @ GHC.Word.Word8
                                                    (op' @ GHC.Word.Word8)
                                                    (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild5 {
                                               GHC.Types.False
                                               -> case ip
                                                         @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                  case GHC.Ptr.plusPtr
                                                         @ GHC.Prim.Any
                                                         @ GHC.Word.Word8
                                                         (ip @ GHC.Prim.Any)
                                                         isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                  (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                     @ r
                                                     (Data.ByteString.Builder.Internal.BufferRange
                                                        dt7
                                                        dt9)
                                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                        (eta2 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1 br1))
                                                        `cast`
                                                      (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)
                                                        eta2)
                                                       `cast`
                                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                                       r>_R))
                                                     wild3)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } }
                                               GHC.Types.True
                                               -> (GHC.Base.thenIO
                                                     @ ()
                                                     @ (Data.ByteString.Builder.Internal.BuildSignal
                                                          r)
                                                     (Foreign.Marshal.Utils.copyBytes
                                                        @ GHC.Word.Word8
                                                        op
                                                        (ip @ GHC.Word.Word8)
                                                        isize)
                                                     (GHC.Base.thenIO
                                                        @ ()
                                                        @ (Data.ByteString.Builder.Internal.BuildSignal
                                                             r)
                                                        (GHC.ForeignPtr.touchForeignPtr
                                                           @ GHC.Word.Word8
                                                           ifp)
                                                        (k1
                                                           (case op'
                                                                   @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                            Data.ByteString.Builder.Internal.BufferRange
                                                              dt7
                                                              dt5 }))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } } } } })
                                         `cast`
                                       (forall (r :: <*>_N).
                                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)) })
                          Text.Blaze.Internal.Content content
                          -> Text.Blaze.Renderer.Utf8.fromChoiceString content
                          Text.Blaze.Internal.Comment comment
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (let {
                                     bs5 :: Data.ByteString.Internal.ByteString
                                     = Data.ByteString.Internal.packChars
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "<!-- "#))
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds2 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds2)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r
                                        (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                        (br :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case k of k1 { DEFAULT ->
                                      case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                      case GHC.Classes.leInt
                                             (GHC.Types.I# dt3)
                                             Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                        GHC.Types.False
                                        -> (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                              @ (GHC.Types.IO
                                                   (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (GHC.Base.returnIO
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (Data.ByteString.Builder.Internal.InsertChunk
                                                 @ r
                                                 dt4
                                                 wild1
                                                 k1))
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                             eta1
                                        GHC.Types.True
                                        -> let {
                                             ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                           } in
                                           let {
                                             isize :: GHC.Types.Int = GHC.Types.I# dt3
                                           } in
                                           let {
                                             op :: GHC.Ptr.Ptr GHC.Word.Word8
                                             = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                           } in
                                           let {
                                             ip :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr
                                                 @ GHC.Word.Word8
                                                 @ b1
                                                 (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                    @ GHC.Word.Word8
                                                    ifp)
                                                 (GHC.Types.I# dt2)
                                           } in
                                           let {
                                             op' :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                           } in
                                           case GHC.Ptr.$fOrdPtr_$c<=
                                                  @ GHC.Word.Word8
                                                  (op' @ GHC.Word.Word8)
                                                  (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                             GHC.Types.False
                                             -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                case GHC.Ptr.plusPtr
                                                       @ GHC.Prim.Any
                                                       @ GHC.Word.Word8
                                                       (ip @ GHC.Prim.Any)
                                                       isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                   @ r
                                                   (Data.ByteString.Builder.Internal.BufferRange
                                                      dt7
                                                      dt9)
                                                   (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                      (eta2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                    (GHC.Base.thenIO
                                                       @ ()
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       (GHC.ForeignPtr.touchForeignPtr
                                                          @ GHC.Word.Word8
                                                          ifp)
                                                       (k1 br1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta2)
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R))
                                                   wild2)
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } }
                                             GHC.Types.True
                                             -> (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (Foreign.Marshal.Utils.copyBytes
                                                      @ GHC.Word.Word8
                                                      op
                                                      (ip @ GHC.Word.Word8)
                                                      isize)
                                                   (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (GHC.ForeignPtr.touchForeignPtr
                                                         @ GHC.Word.Word8
                                                         ifp)
                                                      (k1
                                                         (case op'
                                                                 @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                          Data.ByteString.Builder.Internal.BufferRange
                                                            dt7
                                                            dt5 }))))
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } } } } })
                                       `cast`
                                     (forall (r :: <*>_N).
                                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString comment))
                               (let {
                                  bs5 :: Data.ByteString.Internal.ByteString
                                  = Data.ByteString.Internal.packChars
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 " -->"#))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds2 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds2)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r
                                     (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                     (br :: Data.ByteString.Builder.Internal.BufferRange)
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                   case k of k1 { DEFAULT ->
                                   case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                   case GHC.Classes.leInt
                                          (GHC.Types.I# dt3)
                                          Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                     GHC.Types.False
                                     -> (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                           @ (GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (GHC.Base.returnIO
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (Data.ByteString.Builder.Internal.InsertChunk
                                              @ r
                                              dt4
                                              wild1
                                              k1))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                          eta1
                                     GHC.Types.True
                                     -> let {
                                          ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                          = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                        } in
                                        let {
                                          isize :: GHC.Types.Int = GHC.Types.I# dt3
                                        } in
                                        let {
                                          op :: GHC.Ptr.Ptr GHC.Word.Word8
                                          = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                        } in
                                        let {
                                          ip :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 ->
                                            GHC.Ptr.plusPtr
                                              @ GHC.Word.Word8
                                              @ b1
                                              (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                 @ GHC.Word.Word8
                                                 ifp)
                                              (GHC.Types.I# dt2)
                                        } in
                                        let {
                                          op' :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 -> GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                        } in
                                        case GHC.Ptr.$fOrdPtr_$c<=
                                               @ GHC.Word.Word8
                                               (op' @ GHC.Word.Word8)
                                               (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                          GHC.Types.False
                                          -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                             case GHC.Ptr.plusPtr
                                                    @ GHC.Prim.Any
                                                    @ GHC.Word.Word8
                                                    (ip @ GHC.Prim.Any)
                                                    isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                             (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                @ r
                                                (Data.ByteString.Builder.Internal.BufferRange
                                                   dt7
                                                   dt9)
                                                (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                   (eta2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                 (GHC.Base.thenIO
                                                    @ ()
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r)
                                                    (GHC.ForeignPtr.touchForeignPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (k1 br1))
                                                   `cast`
                                                 (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)
                                                   eta2)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R))
                                                wild2)
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } }
                                          GHC.Types.True
                                          -> (GHC.Base.thenIO
                                                @ ()
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                (Foreign.Marshal.Utils.copyBytes
                                                   @ GHC.Word.Word8
                                                   op
                                                   (ip @ GHC.Word.Word8)
                                                   isize)
                                                (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (GHC.ForeignPtr.touchForeignPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (k1
                                                      (case op'
                                                              @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                       Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt5 }))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } } } } })
                                    `cast`
                                  (forall (r :: <*>_N).
                                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R)))
                          Text.Blaze.Internal.Append b10 c0 h1 h2
                          -> Data.ByteString.Builder.Internal.append
                               (go3 @ b10 attrs h1)
                               (go3 @ c0 attrs h2)
                          Text.Blaze.Internal.AddAttribute ds2 key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString key)))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.AddCustomAttribute key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Types.Char
                                                 Data.ByteString.Builder.Prim.charUtf8
                                                 (GHC.Types.C# ' '#))
                                              (Text.Blaze.Renderer.Utf8.fromChoiceString key))
                                           (let {
                                              bs5 :: Data.ByteString.Internal.ByteString
                                              = Data.ByteString.Internal.packChars
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b1 ->
                                                      GHC.CString.unpackFoldrCString# @ b1 "=\""#))
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (forall r.
                                                 Data.ByteString.Builder.Internal.BuildStep r
                                                 -> Data.ByteString.Builder.Internal.BuildStep r)
                                              @ Data.ByteString.Builder.Internal.Builder
                                              (\ (ds2 :: forall r.
                                                         Data.ByteString.Builder.Internal.BuildStep
                                                           r
                                                         -> Data.ByteString.Builder.Internal.BuildStep
                                                              r) ->
                                               ds2)
                                                `cast`
                                              (<forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                              (\ @ r
                                                 (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                                 (br :: Data.ByteString.Builder.Internal.BufferRange)
                                                 (eta1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                               case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                               case k of k1 { DEFAULT ->
                                               case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                               case GHC.Classes.leInt
                                                      (GHC.Types.I# dt3)
                                                      Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                                 GHC.Types.False
                                                 -> (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       @ (GHC.Types.IO
                                                            (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (GHC.Base.returnIO
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (Data.ByteString.Builder.Internal.InsertChunk
                                                          @ r
                                                          dt4
                                                          wild1
                                                          k1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta1
                                                 GHC.Types.True
                                                 -> let {
                                                      ifp :: GHC.ForeignPtr.ForeignPtr
                                                               GHC.Word.Word8
                                                      = GHC.ForeignPtr.ForeignPtr
                                                          @ GHC.Word.Word8
                                                          dt
                                                          dt1
                                                    } in
                                                    let {
                                                      isize :: GHC.Types.Int = GHC.Types.I# dt3
                                                    } in
                                                    let {
                                                      op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                      = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                                    } in
                                                    let {
                                                      ip :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (GHC.Types.I# dt2)
                                                    } in
                                                    let {
                                                      op' :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          op
                                                          isize
                                                    } in
                                                    case GHC.Ptr.$fOrdPtr_$c<=
                                                           @ GHC.Word.Word8
                                                           (op' @ GHC.Word.Word8)
                                                           (GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              dt5) of wild4 {
                                                      GHC.Types.False
                                                      -> case ip
                                                                @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                         case GHC.Ptr.plusPtr
                                                                @ GHC.Prim.Any
                                                                @ GHC.Word.Word8
                                                                (ip @ GHC.Prim.Any)
                                                                isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                         (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                            @ r
                                                            (Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt9)
                                                            (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                               (eta2 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                             (GHC.Base.thenIO
                                                                @ ()
                                                                @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r)
                                                                (GHC.ForeignPtr.touchForeignPtr
                                                                   @ GHC.Word.Word8
                                                                   ifp)
                                                                (k1 br1))
                                                               `cast`
                                                             (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)
                                                               eta2)
                                                              `cast`
                                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                            wild2)
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } }
                                                      GHC.Types.True
                                                      -> (GHC.Base.thenIO
                                                            @ ()
                                                            @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                            (Foreign.Marshal.Utils.copyBytes
                                                               @ GHC.Word.Word8
                                                               op
                                                               (ip @ GHC.Word.Word8)
                                                               isize)
                                                            (GHC.Base.thenIO
                                                               @ ()
                                                               @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                    r)
                                                               (GHC.ForeignPtr.touchForeignPtr
                                                                  @ GHC.Word.Word8
                                                                  ifp)
                                                               (k1
                                                                  (case op'
                                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                                   Data.ByteString.Builder.Internal.BufferRange
                                                                     dt7
                                                                     dt5 }))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } } } } })
                                                `cast`
                                              (forall (r :: <*>_N).
                                               <Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R))))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.Empty
                          -> Data.ByteString.Builder.Internal.empty }
                    } in
                    go3 @ () Data.ByteString.Builder.Internal.empty eta)) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze a
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dToMarkup :: Text.Blaze.ToMarkup a).
                  @ *
                  @ Htmls.HTMLBlaze
                  @ a
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender @ a $dToMarkup)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender @ a $dToMarkup) -}
e411e8d36ab18f2ba031c6ab7174b831
  $fMimeRenderTYPEHTMLBlazea1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea2 ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dToMarkup :: Text.Blaze.ToMarkup a)
                   (eta :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType eta) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea_$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Text.Blaze.ToMarkup a)
                   (w1 :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (w2 :: a) ->
                 Htmls.$w$cmimeRender @ a w w2) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea_$cp1MimeRender ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Htmls.$fMimeRenderTYPEHTMLBlazea2
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Blaze.ToMarkup a>_R
                 ->_R Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N)) -}
f15bcad8d454861faa53d8609e7f7f2f
  $fMimeRenderTYPEHTMLBlazea_go3 ::
    Data.ByteString.Builder.Internal.Builder
    -> Text.Blaze.Internal.MarkupM b
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: NOINLINE -}
9a322e848af820b649953a4575eb0fcf
  $fToMarkupTool :: Text.Blaze.ToMarkup Models.Tool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.Tool
                  Htmls.$fToMarkupTool_$ctoMarkup
                  Htmls.$fToMarkupTool_$ctoMarkup -}
72fff26d22aeccf7d42b8de1d21cbd91
  $fToMarkupTool1 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool2) -}
4c42f22671c9a27d9c182b2cd8f3e7cc
  $fToMarkupTool10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w
                   0#
                   ipv }) -}
ff02a6fb28f546f06056b4db92cd57f9
  $fToMarkupTool100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w17
                   0#
                   ipv }) -}
c9877246163cee78604726d95615021b
  $fToMarkupTool101 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ac863fd4da609d41ec71d63c569264c3
  $fToMarkupTool102 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w17) -}
936346e5605b160f790c6abacb570601
  $fToMarkupTool103 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool106
                   Htmls.$fToMarkupTool105
                   Htmls.$fToMarkupTool_t19) -}
c75348b8ff29bd65b8acf566236d5b05
  $fToMarkupTool104 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w18
                   0#
                   ipv }) -}
0b12a6623864aa93d25d6dde44ebffe7
  $fToMarkupTool105 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
80250c8b6977965add8dfbc65e398ef7
  $fToMarkupTool106 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w18) -}
dca69490395cf812ccbda698bfb03bfb
  $fToMarkupTool107 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool119
                   Htmls.$fToMarkupTool115
                   Htmls.$fToMarkupTool111
                   Htmls.$fToMarkupTool108) -}
e79f11639b4b8bcff93c4e57617fc9ae
  $fToMarkupTool108 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool109) -}
e50bef8666ae1cd7ad77e25ce89bc374
  $fToMarkupTool109 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool110) -}
577b04755a08a01d200e7f9d1d8b3932
  $fToMarkupTool11 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f57611e0ccc65565bc8c7f5e986847a4
  $fToMarkupTool110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Combine two pictures to create a cool new image"#) -}
ecad9d47cecfc42efce658f7fa69a080
  $fToMarkupTool111 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool114
                   Htmls.$fToMarkupTool113
                   Htmls.$fToMarkupTool_t20) -}
a0f2a5fec11af11e2f1b4cafe3fb4f1d
  $fToMarkupTool112 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w19
                   0#
                   ipv }) -}
b883b74d60afe0428a6a46b02cd44a77
  $fToMarkupTool113 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
247c70501dc61e906cbb2bae537e0169
  $fToMarkupTool114 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w19) -}
403ae137e87f7f64ff35eddfdde47644
  $fToMarkupTool115 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool118
                   Htmls.$fToMarkupTool117
                   Htmls.$fToMarkupTool_t21) -}
a12ffd517cbb29897714c7af40c224c6
  $fToMarkupTool116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w20
                   0#
                   ipv }) -}
22bf8c09b26096a192365f38778e5388
  $fToMarkupTool117 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
38f7eb4523e9dd28aac155c6c72f3e83
  $fToMarkupTool118 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w20) -}
3bc5e7ef6d9f5c9220c2c7988c5f7dc9
  $fToMarkupTool119 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool121
                   Htmls.$fToMarkupTool_t22) -}
faf81a216c1266ad7bd703cc9aa7e179
  $fToMarkupTool12 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Htmls.$fToMarkupTool_w) -}
6eb07cddcf3657e85646d136d85994f5
  $fToMarkupTool120 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w21
                   0#
                   ipv }) -}
f14e162f2ad2e9549445e537af9584fb
  $fToMarkupTool121 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
dd204565e3879ae488f467e5994cc02d
  $fToMarkupTool122 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w21) -}
8da0134201576c8d67b17c94352b1596
  $fToMarkupTool123 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool125
                   Htmls.$fToMarkupTool_t23) -}
5dd53fb9b8655f7502cd190b8c65b373
  $fToMarkupTool124 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w22
                   0#
                   ipv }) -}
15f176250f9ff9304cb1555f2edd881c
  $fToMarkupTool125 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d8cbdf219fd7da584316e53a2ff45ec2
  $fToMarkupTool126 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w22) -}
589a6373be49aea7eb22292ef1a2974c
  $fToMarkupTool127 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool129
                   Htmls.$fToMarkupTool_t24) -}
70c3629753a8f73af4ae4cc2b29dca0f
  $fToMarkupTool128 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w23
                   0#
                   ipv }) -}
b6d961dcd878e097ceb0579ed92bc2a5
  $fToMarkupTool129 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a6f299d600b520188c7c3cf9127fe784
  $fToMarkupTool13 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool16
                   Htmls.$fToMarkupTool15
                   Htmls.$fToMarkupTool_t2) -}
517a050a78057c4047161db7dd4f255f
  $fToMarkupTool130 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w23) -}
24e4b9e263641a7140a3b9fc36c52878
  $fToMarkupTool131 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool134
                   Htmls.$fToMarkupTool133
                   Htmls.$fToMarkupTool_t25) -}
9090ab45eeaf336b7fe2da824606c3f1
  $fToMarkupTool132 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w24
                   0#
                   ipv }) -}
3209facb92d1d6234cd67988f0a35047
  $fToMarkupTool133 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b96a624672df419149e51470edf198e2
  $fToMarkupTool134 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w24) -}
d71c778bf7a33e9613ad54452f11113e
  $fToMarkupTool135 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool158
                   Htmls.$fToMarkupTool154
                   Htmls.$fToMarkupTool150
                   Htmls.$fToMarkupTool136) -}
8631a09937afe073f7fa3b65b1953dbe
  $fToMarkupTool136 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool_f
                   Htmls.$fToMarkupTool_f1
                   Htmls.$fToMarkupTool_f2
                   Htmls.$fToMarkupTool137) -}
a538da4d217dec390b3bfbf262def690
  $fToMarkupTool137 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool138) -}
c105bbaecc05e7bb6a1a70fa61ee84d9
  $fToMarkupTool138 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool139) -}
b95c1de70912d67f01ac922b14007cdf
  $fToMarkupTool139 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupTool140) -}
f6f4f5b382f675315c82a0cdc920542e
  $fToMarkupTool14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w1
                   0#
                   ipv }) -}
bcc60b4aa4f8af2d6a168a490b0af828
  $fToMarkupTool140 :: [GHC.Types.Char]
89ceae8be6d2b5891c35b294def3f8b1
  $fToMarkupTool141 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w25
                   0#
                   ipv }) -}
9e587d3b8427a12838cdad404ae61357
  $fToMarkupTool142 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e0cb57f08985fe54d27334912673ebd4
  $fToMarkupTool143 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w25) -}
e220a448d99a0feeceff17e9fed4ac50
  $fToMarkupTool144 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w26
                   0#
                   ipv }) -}
ef5e187efd8a44f4d5b04985e793a9a0
  $fToMarkupTool145 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a274321e92f11042f6ea92fff6a93c65
  $fToMarkupTool146 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w26) -}
484a5b12ca004bf6e30852d1573a9638
  $fToMarkupTool147 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w27
                   0#
                   ipv }) -}
b85da15073a96f6bcf6acc9bf03b7551
  $fToMarkupTool148 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ccdc1f8a7a9065d3796025fb471bb883
  $fToMarkupTool149 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w27) -}
b8a847bf615331c24b43910340d1dd5d
  $fToMarkupTool15 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7a6e23481abec79fe1508c756d864e33
  $fToMarkupTool150 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool153
                   Htmls.$fToMarkupTool152
                   Htmls.$fToMarkupTool_t29) -}
508791695097e9fa07276bee1a4afe5e
  $fToMarkupTool151 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w28
                   0#
                   ipv }) -}
d57372b2e4367328e16718f36d5a3221
  $fToMarkupTool152 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7c469dbe10f23d888842b1496f08bc2e
  $fToMarkupTool153 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w28) -}
a28be352d0818e1adf2666629acebcdb
  $fToMarkupTool154 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool157
                   Htmls.$fToMarkupTool156
                   Htmls.$fToMarkupTool_t30) -}
8f98d7811b137bf42bf13ceeeef1336a
  $fToMarkupTool155 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w29
                   0#
                   ipv }) -}
d7cb3092e5a63b834651ed3b7097050d
  $fToMarkupTool156 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6cb134e5e575acac241015fcd2f1ec85
  $fToMarkupTool157 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w29) -}
ed0331d0594e8907d31aa8964472c0b4
  $fToMarkupTool158 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool161
                   Htmls.$fToMarkupTool160
                   Htmls.$fToMarkupTool_t31) -}
87a19d13a6e293678f3df81e7d2d5171
  $fToMarkupTool159 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w30
                   0#
                   ipv }) -}
e18d529cb9f723b0761979703bc07cb4
  $fToMarkupTool16 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w1) -}
2034c26d95a725812cd30d4d0087bec0
  $fToMarkupTool160 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b58dbf4c16d478c60cbe46e3bc943a95
  $fToMarkupTool161 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w30) -}
2898adf059d40079fe2faec8996adf58
  $fToMarkupTool162 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool165
                   Htmls.$fToMarkupTool164
                   Htmls.$fToMarkupTool_t32) -}
fe5264a4da1d8bef1b1831b4c3f48402
  $fToMarkupTool163 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w31
                   0#
                   ipv }) -}
6deb73eebe68e81f9f9aee91c02ef9c1
  $fToMarkupTool164 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
847bb6911bb161f60b1f39311f468466
  $fToMarkupTool165 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w31) -}
c79c2205315618934169848408022ea9
  $fToMarkupTool166 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool169
                   Htmls.$fToMarkupTool168
                   Htmls.$fToMarkupTool_t33) -}
4a3635a2a78a7f8f829087016b7eaf38
  $fToMarkupTool167 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w32
                   0#
                   ipv }) -}
5997d05d8ff2ee0e3cc35b2ae359d636
  $fToMarkupTool168 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6f24d7613773c8843dfcc221c85f0d0d
  $fToMarkupTool169 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w32) -}
229f21566f3d67592a7e740db9299e61
  $fToMarkupTool17 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool18) -}
bde20e6a78261f319c0755710d5ac1ec
  $fToMarkupTool170 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool173
                   Htmls.$fToMarkupTool172
                   Htmls.$fToMarkupTool_t34) -}
76589b84d2fe9b847040963a45973daf
  $fToMarkupTool171 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w33
                   0#
                   ipv }) -}
31982a0914e33cb76c1a60399a6db0df
  $fToMarkupTool172 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
29defae7017cc5001d6a629fbebde869
  $fToMarkupTool173 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w33) -}
d1efda0e5022a89e514a9d63f634ef2e
  $fToMarkupTool18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "width: 50%; height: 50%"#) -}
3bd317d4764aba81c8c7de9b44ac01af
  $fToMarkupTool19 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool21
                   Htmls.$fToMarkupTool_t3) -}
2bfb0828b55d8b36f7e50fbcd2ecb57a
  $fToMarkupTool2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "../image/Checkerboard"#) -}
5b74040e381ae9721fd4ac2caf77236e
  $fToMarkupTool20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w2
                   0#
                   ipv }) -}
014bbc78ec7191858ce21045feb5f0d1
  $fToMarkupTool21 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7c9652db5e1ca7b7769693323c833f09
  $fToMarkupTool22 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w2) -}
5d8e941d958b45398fbec08aa8b258d3
  $fToMarkupTool23 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool26
                   Htmls.$fToMarkupTool25
                   Htmls.$fToMarkupTool_t4) -}
3131a721a65967188b1dfad18241078b
  $fToMarkupTool24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w3
                   0#
                   ipv }) -}
353d987be2ef00c933fb28c33dae7875
  $fToMarkupTool25 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
5b974ad868c1e83fb92c12c102954fe0
  $fToMarkupTool26 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w3) -}
e6f2c2e4cbaf88fa7625075ea43fc6a5
  $fToMarkupTool27 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool29
                   Htmls.$fToMarkupTool_t5) -}
0201be33cddafb629b2b3233b7b941cc
  $fToMarkupTool28 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w4
                   0#
                   ipv }) -}
7c418f1941a18f34b5f5844e0e75b852
  $fToMarkupTool29 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
71f59bc9d51031350fc05191d88ba184
  $fToMarkupTool3 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool4) -}
6a1783f9c0dd3117e840b96e68e31ec4
  $fToMarkupTool30 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w4) -}
dbb3963783899106bee2f79cba0ef558
  $fToMarkupTool31 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool34
                   Htmls.$fToMarkupTool33
                   Htmls.$fToMarkupTool_t6) -}
42d97e0aee0e77a2beb255234b81639a
  $fToMarkupTool32 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w5
                   0#
                   ipv }) -}
53fb31508760cd149afd62f6f8ea3711
  $fToMarkupTool33 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
95d1456f5f48a354abbec8cefcf26163
  $fToMarkupTool34 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w5) -}
fdfba3cf80d4e7fa4b7769ca42b20ccc
  $fToMarkupTool35 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool38
                   Htmls.$fToMarkupTool37
                   Htmls.$fToMarkupTool_t7) -}
0ceca0df7b1c677c053d07ac04d404ff
  $fToMarkupTool36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w6
                   0#
                   ipv }) -}
ab10a0ecca5f02397942c1ba57703723
  $fToMarkupTool37 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2bea1eb8aeb210ca39cfc6f25d024eb9
  $fToMarkupTool38 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w6) -}
0b660dcd9bad62a007aa0fc477cc35b9
  $fToMarkupTool39 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool79
                   Htmls.$fToMarkupTool77
                   Htmls.$fToMarkupTool40) -}
20f462114ff0964692f7179e1489bbce
  $fToMarkupTool4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Frame"#) -}
b0edb261f61d75d59258f8b2ea3fd6ab
  $fToMarkupTool40 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool74
                   Htmls.$fToMarkupTool41) -}
941819e6aa6a8feeb2905a889371f9d4
  $fToMarkupTool41 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool70
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool42) -}
cec31da8bfd6b115a263981b6cf9bdfc
  $fToMarkupTool42 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool56
                   Htmls.$fToMarkupTool54
                   Htmls.$fToMarkupTool43) -}
dee4226319b8ecb9d8ee03520c103a47
  $fToMarkupTool43 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool50
                   Htmls.$fToMarkupTool46
                   Htmls.$fToMarkupTool44
                   Text.Blaze.Html5.input) -}
522f9465c4b54c8df3a45e43b35c432d
  $fToMarkupTool44 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool45) -}
18e9e76f208e7aa40638b9ba6deee648
  $fToMarkupTool45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "file"#) -}
cd3ebbdf7b3b69eaf42fae1fc30bbba9
  $fToMarkupTool46 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool49
                   Htmls.$fToMarkupTool48
                   Htmls.$fToMarkupTool_t8) -}
8156521161175c9f92d4ea40bb890922
  $fToMarkupTool47 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w7
                   0#
                   ipv }) -}
fc9a756d4b913345077f2af4ae2ed643
  $fToMarkupTool48 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4e2b55906024d216531e1acedfe7766a
  $fToMarkupTool49 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w7) -}
3621b156711098a37b7c78d7ad6deace
  $fToMarkupTool5 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool6) -}
0610a368a024858cb6f786913b7de169
  $fToMarkupTool50 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool53
                   Htmls.$fToMarkupTool52
                   Htmls.$fToMarkupTool_t9) -}
5f497c2764c2783e37e063bead1c4bfb
  $fToMarkupTool51 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w8
                   0#
                   ipv }) -}
9e35b2adf523d10f9444d6ad63b24b04
  $fToMarkupTool52 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cb06bfe7013976676dfc85719c875a16
  $fToMarkupTool53 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w8) -}
a6543bd2076bfc64bcef3425b750b157
  $fToMarkupTool54 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool55) -}
305cdf4f3862c3e153c43dbd38ef4ba6
  $fToMarkupTool55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "image/jpeg"#) -}
3cd409bcaba0309aa5cabb07170a4452
  $fToMarkupTool56 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool58
                   Htmls.$fToMarkupTool_t10) -}
700903790609b3e3e462b71ea49fea4e
  $fToMarkupTool57 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w9
                   0#
                   ipv }) -}
e00615597549238539620b394ec3ded5
  $fToMarkupTool58 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cc16ebb2ec250dbebd41622d74277051
  $fToMarkupTool59 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w9) -}
d9f82d8ff63e273547aa94d01800688e
  $fToMarkupTool6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Spiral"#) -}
d181e06033ac9509851e045b87e855d0
  $fToMarkupTool60 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool62
                   Htmls.$fToMarkupTool_t11) -}
5b99a8dde48812c70b21e5e29324ca58
  $fToMarkupTool61 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w10
                   0#
                   ipv }) -}
e0890f1ff8be1030e28a925cac27c46f
  $fToMarkupTool62 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3fc78ec4cb46f7e6e7314fa412adac92
  $fToMarkupTool63 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w10) -}
52e8d64c52f564c421a3539de3140998
  $fToMarkupTool64 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool65) -}
cbe9f278b05ea5d8bd2c663981a9b81c
  $fToMarkupTool65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleRight(this.files[0])"#) -}
d477e0f8880cd585f42fef22d4260a58
  $fToMarkupTool66 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool69
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool_t12) -}
930904a706c14849278ebe51f22825fe
  $fToMarkupTool67 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w11
                   0#
                   ipv }) -}
c54a8b075bf6f84290482c38eb5bd4a4
  $fToMarkupTool68 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2e351df3d02960f7d66f60cdc8665f33
  $fToMarkupTool69 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w11) -}
668f7bea76fa4cf8e704c18736e6b7c2
  $fToMarkupTool7 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool8) -}
9d033767df9e8e3f4bd144169585e6fa
  $fToMarkupTool70 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool73
                   Htmls.$fToMarkupTool72
                   Htmls.$fToMarkupTool_t13) -}
804958af127df7f3e0f533f39b1ea36b
  $fToMarkupTool71 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w12
                   0#
                   ipv }) -}
67c6b8c8ea9bd0be28528336c9e2b977
  $fToMarkupTool72 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
48a71245f476aff0c85ae4b57e24f417
  $fToMarkupTool73 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w12) -}
fa8288fad7470c1c9864c47db099e7a3
  $fToMarkupTool74 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool70
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool75
                   Htmls.$fToMarkupTool42) -}
c790d570b911553efe7858868d8594b6
  $fToMarkupTool75 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool76) -}
25a66ec92a361160f7d2849430d20c1b
  $fToMarkupTool76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleLeft(this.files[0])"#) -}
9515fe7ee21689d115f121848752179d
  $fToMarkupTool77 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool78
                   Htmls.$fToMarkupTool_t5) -}
53489cbd0acda8ae999e4187e0ac6c1c
  $fToMarkupTool78 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f36e086f9617b84222f7ff339d6c56e4
  $fToMarkupTool79 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool34
                   Htmls.$fToMarkupTool80
                   Htmls.$fToMarkupTool_t6) -}
a393a48afa80f6200eb81c9e6faafaad
  $fToMarkupTool8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/ZipImage"#) -}
d2385d56c9d517567aafb9b8aa2bc524
  $fToMarkupTool80 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3f8fd4aebef6a1733c2693aa185a3830
  $fToMarkupTool81 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool38
                   Htmls.$fToMarkupTool82
                   Htmls.$fToMarkupTool_t7) -}
aec68ea6748790df390e649c4f856052
  $fToMarkupTool82 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e82393b9fdb5357d400f1259eebfc1a7
  $fToMarkupTool83 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool86
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool_t14) -}
5b36b4f5143958e281a273a693758f37
  $fToMarkupTool84 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w13
                   0#
                   ipv }) -}
57a67855ec8864ea647e5c9773f4fbf5
  $fToMarkupTool85 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
757a2e88aa7e8ff9ca768e2d56745d47
  $fToMarkupTool86 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w13) -}
20c9058ed8501faeb6cf950cc2f0fa58
  $fToMarkupTool87 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool90
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool_t15) -}
25be14349220a6240ebd82aa1af8d4f9
  $fToMarkupTool88 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w14
                   0#
                   ipv }) -}
73025616ed8344c72e9df5849ea3eed7
  $fToMarkupTool89 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
58426a9611a9b625e7aad81705e998a4
  $fToMarkupTool9 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool12
                   Htmls.$fToMarkupTool11
                   Htmls.$fToMarkupTool_t1) -}
9879c51143303aa1e05f25919349ed59
  $fToMarkupTool90 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w14) -}
458211485de99ab75be5dc5802979315
  $fToMarkupTool91 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool94
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool_t16) -}
763c614cbaf9c86a65431ef8deb00683
  $fToMarkupTool92 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w15
                   0#
                   ipv }) -}
3cba2114d1d1092f712c4f2cbe86e462
  $fToMarkupTool93 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d6f7e6956d9de9faf2e0ab925d799689
  $fToMarkupTool94 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w15) -}
02ef9ac33143ac83281a51013d3cfe46
  $fToMarkupTool95 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool98
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool_t17) -}
a093bd6454ae63268072da6fdcdfe264
  $fToMarkupTool96 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w16
                   0#
                   ipv }) -}
6ed23257e27a7c9082596cde1187c867
  $fToMarkupTool97 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
89f4662ec3a324d766a8a73b5c388b20
  $fToMarkupTool98 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w16) -}
8a80748cb135e7030570a8b40731496f
  $fToMarkupTool99 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool102
                   Htmls.$fToMarkupTool101
                   Htmls.$fToMarkupTool_t18) -}
9d0330f04e33c2f77d358587f7ef50a5
  $fToMarkupTool_$ctoMarkup ::
    Models.Tool -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (t :: Models.Tool) ->
                 Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   (Text.Blaze.Internal.Parent
                      @ ()
                      @ ()
                      Htmls.$fToMarkupTool170
                      Htmls.$fToMarkupTool166
                      Htmls.$fToMarkupTool162
                      (Text.Blaze.Internal.Append
                         @ ()
                         @ ()
                         @ ()
                         Htmls.$fToMarkupTool135
                         (Text.Blaze.Internal.Parent
                            @ ()
                            @ ()
                            Htmls.$fToMarkupTool131
                            Htmls.$fToMarkupTool127
                            Htmls.$fToMarkupTool123
                            (Text.Blaze.Internal.Append
                               @ ()
                               @ ()
                               @ ()
                               Htmls.$fToMarkupTool107
                               (Text.Blaze.Internal.Append
                                  @ ()
                                  @ ()
                                  @ ()
                                  Text.Blaze.Html5.br
                                  (Text.Blaze.Internal.Parent
                                     @ ()
                                     @ ()
                                     Htmls.$fToMarkupTool103
                                     Htmls.$fToMarkupTool99
                                     Htmls.$fToMarkupTool95
                                     (Text.Blaze.Internal.Parent
                                        @ ()
                                        @ ()
                                        Htmls.$fToMarkupTool91
                                        Htmls.$fToMarkupTool87
                                        Htmls.$fToMarkupTool83
                                        (Text.Blaze.Internal.Append
                                           @ ()
                                           @ ()
                                           @ ()
                                           Htmls.$fToMarkupTool39
                                           (Text.Blaze.Internal.Parent
                                              @ ()
                                              @ ()
                                              Htmls.$fToMarkupTool35
                                              Htmls.$fToMarkupTool31
                                              Htmls.$fToMarkupTool27
                                              (Text.Blaze.Internal.AddAttribute
                                                 @ ()
                                                 Htmls.$fToMarkupTool23
                                                 Htmls.$fToMarkupTool19
                                                 Htmls.$fToMarkupTool17
                                                 (Text.Blaze.Internal.AddAttribute
                                                    @ ()
                                                    Htmls.$fToMarkupTool13
                                                    Htmls.$fToMarkupTool9
                                                    (case t of wild {
                                                       Models.ZipImage -> Htmls.$fToMarkupTool7
                                                       Models.Spiral -> Htmls.$fToMarkupTool5
                                                       Models.Frame -> Htmls.$fToMarkupTool3
                                                       Models.Checkerboard
                                                       -> Htmls.$fToMarkupTool1 })
                                                    Text.Blaze.Html5.img)))))))))))) -}
55234ea428a7003fdf39e4c73ac5c320
  $fToMarkupTool_f :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool149
                   Htmls.$fToMarkupTool148
                   Htmls.$fToMarkupTool_t28) -}
e3a6bd59f847a04f5d10b032c36bafb9
  $fToMarkupTool_f1 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool146
                   Htmls.$fToMarkupTool145
                   Htmls.$fToMarkupTool_t27) -}
59464ba342121e6098f69d5d96e117aa
  $fToMarkupTool_f2 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool143
                   Htmls.$fToMarkupTool142
                   Htmls.$fToMarkupTool_t26) -}
3608ed982a9c5fc9a072a0ec1e072d19
  $fToMarkupTool_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool10 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
71cb00211463675559b0dfd377d87c76
  $fToMarkupTool_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool57 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
83ab5f80d9053d67d2fa9c1316b44222
  $fToMarkupTool_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool61 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
912af16a691b336366a5ddfa25ba6054
  $fToMarkupTool_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool67 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6250cc249ebde856aaa1fac767654f44
  $fToMarkupTool_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool71 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
84c150bbd1cee2e14728b705cfb23fbb
  $fToMarkupTool_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool84 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f5262c02df6020712d60e26f73a5b16a
  $fToMarkupTool_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool88 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6a7da1eba4d5045feb919c9578d8b989
  $fToMarkupTool_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool92 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b6604cf03de7ca9dc008139a95c615b5
  $fToMarkupTool_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool96 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d2116fe69537fa9a0450e914faaf90ad
  $fToMarkupTool_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool100 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
bc8266b9a8443b2bc0704801496adae6
  $fToMarkupTool_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool104 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
2db9763a4a3d5a0740d2393a2c255f25
  $fToMarkupTool_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool14 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
991c1845f86063faa71ea795da44a9a9
  $fToMarkupTool_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool112 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0e6746aff9fd101dea82be6189367ce2
  $fToMarkupTool_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool116 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e999401b3987366f7106083edf3a52e0
  $fToMarkupTool_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool120 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c888b41f53c928f0f28ebea014aa3def
  $fToMarkupTool_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool124 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f2ba16c83afbc359d477a3cc87748b84
  $fToMarkupTool_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool128 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fc65e1ed77cd174e7b799b64de72cb09
  $fToMarkupTool_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool132 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
af530f6d07cbdae7e0dd7d89cf28cd57
  $fToMarkupTool_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool141 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
160f8a65c13cbae39d0f9b4584fb6910
  $fToMarkupTool_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool144 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cdc56e15d4823a3fb0ad0ec9ef4f442f
  $fToMarkupTool_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool147 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
027a1be74c9ac58853d042c8f15d2a18
  $fToMarkupTool_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool151 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e6f0fb89912bd0b300e15ff95c26f529
  $fToMarkupTool_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool20 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
42e42abc814b70e677335ac0130ede4d
  $fToMarkupTool_t30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool155 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3e04f6c414e8cfa3a243b2c8a8e37fb1
  $fToMarkupTool_t31 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool159 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
495bf279dc17f147d684df4ca07b97a9
  $fToMarkupTool_t32 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool163 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9375f888152c60003eef675d36f462b6
  $fToMarkupTool_t33 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool167 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d1b84bf276482a7505f7b47cb4e636dc
  $fToMarkupTool_t34 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool171 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6ea3a37039fc50602611fab91928a40b
  $fToMarkupTool_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool24 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cb0c7c4e528f53fa662baea8a467f10f
  $fToMarkupTool_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool28 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ad86021bd70b26e612724c00994d4ef9
  $fToMarkupTool_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool32 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8a8d89ca3903d723186a0ffa059cf4a7
  $fToMarkupTool_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool36 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0d1db742d632fff4d0825c7e769b3aba
  $fToMarkupTool_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool47 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6c4ed046c0c0a03caf8130221f5b5357
  $fToMarkupTool_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool51 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
932e9fb11e6438dfda21675699b05a7f
  $fToMarkupTool_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " src=\""#) -}
8dc37c00a2cf9636fe2c23693177e439
  $fToMarkupTool_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "src"#) -}
93a3e4765b069d342474da92121475c9
  $fToMarkupTool_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "accept"#) -}
b2967ac390825a222dce892a58a50051
  $fToMarkupTool_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onchange=\""#) -}
cf14a0f64d57924c88071e3d1f88d6a6
  $fToMarkupTool_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onchange"#) -}
7219e173e5dcfea28fd4f8fa060d4f42
  $fToMarkupTool_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</tr>"#) -}
fb20f4197534c5dd7bb2e2e0b2f37d22
  $fToMarkupTool_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<tr"#) -}
53d58c3c41013849630b1e5fc5795538
  $fToMarkupTool_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "tr"#) -}
a1d9d7e6b598a26028a09a4864980580
  $fToMarkupTool_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</table>"#) -}
5d6b34f90fcec30467f01275e2c5ff4b
  $fToMarkupTool_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<table"#) -}
81c920f68688f08f4d285555f85cd904
  $fToMarkupTool_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "table"#) -}
fd13c75f186df05d8cbd9f985eff2739
  $fToMarkupTool_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</p>"#) -}
11595f53e611df0d2395dc2b95d28ca6
  $fToMarkupTool_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " style=\""#) -}
17668ff462d8bbf5e48951104ab3a9b5
  $fToMarkupTool_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<p"#) -}
50a0435f55e93b9ca7928228cf4fddce
  $fToMarkupTool_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "p"#) -}
7a807e77ca87b2196853cb5735b44962
  $fToMarkupTool_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</body>"#) -}
8d6f55526ef9d446c66aec92398cb3e7
  $fToMarkupTool_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<body"#) -}
22ecd1802343685b31cdc18f6a6a2d58
  $fToMarkupTool_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
21a7401f629e92bc4b489bacc37cf7bf
  $fToMarkupTool_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</script>"#) -}
e1674b5eacfa1af0450fc9c0c3615487
  $fToMarkupTool_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<script"#) -}
a34404155a3b5b7ac29ba7d72fadd507
  $fToMarkupTool_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "script"#) -}
2e068af3edd4f8b77c9c9f7bf66c2970
  $fToMarkupTool_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</head>"#) -}
f3b44a8832a65a88b7a475d9eacdcece
  $fToMarkupTool_w29 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<head"#) -}
690ae3d0fdfcb28bb6b8cbfbb602a55d
  $fToMarkupTool_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "style"#) -}
1fb52aa3f8b4911aa01cfb1008b5eb9c
  $fToMarkupTool_w30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "head"#) -}
c8161739aa36aa3fe2d6e4f10e84fba9
  $fToMarkupTool_w31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</html>"#) -}
462981b13d501fa3c77d8ac17a716d8a
  $fToMarkupTool_w32 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<html"#) -}
09cc8f61d3fc71fca8b527657ea99803
  $fToMarkupTool_w33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
078642e62628db17a69ef4f03cff0f2a
  $fToMarkupTool_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</td>"#) -}
1008ff6e555229b37e21cba7f2616aa1
  $fToMarkupTool_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<td"#) -}
3f817203ef3d410736d7d3fb15544e9d
  $fToMarkupTool_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "td"#) -}
e0aab82d98840963ec2f873ec984e6ad
  $fToMarkupTool_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " type=\""#) -}
3350a812880919f2b9d357ee43fdf62b
  $fToMarkupTool_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "type"#) -}
9b9019d64f042b309d8baa8f01dd1498
  $fToMarkupTool_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " accept=\""#) -}
c84ca684a3d4594bcfb6aa97036bd9c7
  $tcHTMLBlaze :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14897272260289620837##
                   14412945957028595674##
                   Htmls.$trModule
                   Htmls.$tcHTMLBlaze1) -}
abc81367338c53ce6edbcc8645f04a90
  $tcHTMLBlaze1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HTMLBlaze"#) -}
2b1b7ba1a15920fa5ba87d2a82c4c1f7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Htmls.$trModule2 Htmls.$trModule1) -}
029d6c90b2c528d56af34d0663f89e0f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Htmls"#) -}
849e1404f8989a1534b0e00704c445be
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk"#) -}
8ef2a5d0fe9b6ebca40c9113fc275399
  $w$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Text.Blaze.ToMarkup a) (w1 :: a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                      @ ()
                      Htmls.$fMimeRenderTYPEHTMLBlazea1
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                      (Text.Blaze.toMarkup @ a w w1))) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  data HTMLBlaze
instance Servant.API.ContentTypes.Accept [TYPE, Htmls.HTMLBlaze]
  = Htmls.$fAcceptTYPEHTMLBlaze
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, Text.Blaze.Internal.MarkupM]
  = Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, .]
  = Htmls.$fMimeRenderTYPEHTMLBlazea
instance Text.Blaze.ToMarkup [Models.Tool] = Htmls.$fToMarkupTool
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

