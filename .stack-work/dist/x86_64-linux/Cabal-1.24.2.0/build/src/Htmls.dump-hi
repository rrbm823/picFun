
==================== FINAL INTERFACE ====================
2017-10-06 16:39:31.012611 UTC

interface picFun-0.1.0.0-fnBZLECtUoD0q3S6USYHa:Htmls [orphan module] 8002
  interface hash: 4a8ed81a9f276caa0cc50f0886a616b3
  ABI hash: fbe6cee4cb1bdc24037f691d60706371
  export-list hash: 9a51531d178c11de78e81a1d321a056f
  orphan hash: e005e35dd15ac807a498f672b64d23b3
  flag hash: d81c5bd899ee9bae2e83b7d3242d4f56
  sig of: Nothing
  used TH splices: False
  where
exports:
  Htmls.HTMLBlaze
  Htmls.SVGFrontend{Htmls.SVGFrontend}
module dependencies: Models
package dependencies: aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      svg-builder-0.1.0.2@svg-builder-0.1.0.2-Blfiw5KrhOtGQnbQwRjlw8
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-fnBZLECtUoD0q3S6USYHa:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html 288dbf097dbd0ff17b50c3c1330477db
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html.Renderer.Utf8 5b26c380f5278a1c6a43c894929cec9d
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5 a78d4ae47bedb2841a6332de06a90707
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5.Attributes 7657fa2d710bc2ae02fd88196e7a43b7
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze e36927cead1a7aeccd029225c1dba5b4
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze.Internal 52ba665013f4dfa6d731e8584348806e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media 07625d65eebeff997f1e9bc032ba3b6e
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media.MediaType d33bfddaa1306ad267f9a6689258b69b
import  -/  Models 7d3250f21e4e13310e96485cb8536c6b
  exports: ed06455ab5bd3330dabbc815c2b943a9
  Checkerboard bfa9e4dc1945558fb60ae092805d62ee
  Draw bd5e4589b9f1069f4aaf10ccaafbc240
  Frame 3c4df08aaa0da1da52be5b599d254be4
  Spiral c56bf81aa0b57990537ebb61830e2563
  Tool 75b7b121946ec4bfbe0e4c2a7ab6e4da
  ZipImage ed9697677f61fb741c0f003fd39412ab
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes f46c3af563d8e4f630ae29c1d96b30a9
import  -/  svg-builder-0.1.0.2@svg-builder-0.1.0.2-Blfiw5KrhOtGQnbQwRjlw8:Graphics.Svg.Core 6eaf34305978cfd583195ea32982cb82
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
6653e4735380b4e095ed3f83e412e2f6
  $fAcceptTYPEHTMLBlaze ::
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  DFunId
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Htmls.HTMLBlaze>_N)) -}
99d155892e67d3e9d5a12eb07152abd0
  $fAcceptTYPEHTMLBlaze1 ::
    Network.HTTP.Media.MediaType.Internal.MediaType
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "text"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 let {
                   addr#1 :: GHC.Prim.Addr# = "html"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#1
                        ipv of wild1 { (#,#) ds2 ds6 ->
                 case Network.HTTP.Media.MediaType.$w//
                        addr#
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds4)
                        addr#1
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds6) of ww10 { (#,,#) ww11 ww12 ww13 ->
                 case Network.HTTP.Media.MediaType.$w/:
                        ww11
                        ww12
                        ww13
                        Htmls.$fAcceptTYPEHTMLBlaze3
                        Htmls.$fAcceptTYPEHTMLBlaze2 of ww7 { (#,,#) ww8 ww9 ww1 ->
                 Network.HTTP.Media.MediaType.Internal.MediaType
                   ww8
                   ww9
                   ww1 } } } } }) -}
e6051b521125a9183d0fd18201d3de41
  $fAcceptTYPEHTMLBlaze2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "utf-8"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
a0e4a9d76e14723924243ded365c971b
  $fAcceptTYPEHTMLBlaze3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "charset"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
6653e4735380b4e095ed3f83e412e2f6
  $fAcceptTYPEHTMLBlaze_$ccontentType ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze1) -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazeMarkupM ::
    Servant.API.ContentTypes.MimeRender
      Htmls.HTMLBlaze Text.Blaze.Html.Html
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Text.Blaze.Html.Html
                  Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                    `cast`
                  (Sym (Servant.API.ContentTypes.N:Accept[0]
                            <*>_N <Htmls.HTMLBlaze>_N))
                  Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Text.Blaze.Html.Html -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (eta :: Text.Blaze.Internal.Markup) ->
                 Data.ByteString.Builder.toLazyByteString
                   (letrec {
                      go3 :: forall b.
                             Data.ByteString.Builder.Internal.Builder
                             -> Text.Blaze.Internal.MarkupM b
                             -> Data.ByteString.Builder.Internal.Builder
                        {- Arity: 2, Inline: NOINLINE -}
                      = \ @ b
                          (attrs :: Data.ByteString.Builder.Internal.Builder)
                          (ds1 :: Text.Blaze.Internal.MarkupM b) ->
                        case ds1 of wild {
                          Text.Blaze.Internal.Parent b10 ds2 open close content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString open)))
                                        attrs)
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '>'#)))
                                  (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString close)))
                          Text.Blaze.Internal.CustomParent b10 tag content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Types.Char
                                                    Data.ByteString.Builder.Prim.charUtf8
                                                    (GHC.Types.C# '<'#))
                                                 (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                              attrs)
                                           (Data.ByteString.Builder.Prim.primBounded
                                              @ GHC.Types.Char
                                              Data.ByteString.Builder.Prim.charUtf8
                                              (GHC.Types.C# '>'#)))
                                        (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                                     (let {
                                        bs5 :: Data.ByteString.Internal.ByteString
                                        = Data.ByteString.Internal.packChars
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b2 ->
                                                GHC.CString.unpackFoldrCString# @ b2 "</"#))
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (forall r.
                                           Data.ByteString.Builder.Internal.BuildStep r
                                           -> Data.ByteString.Builder.Internal.BuildStep r)
                                        @ Data.ByteString.Builder.Internal.Builder
                                        (\ (ds2 :: forall r.
                                                   Data.ByteString.Builder.Internal.BuildStep r
                                                   -> Data.ByteString.Builder.Internal.BuildStep
                                                        r) ->
                                         ds2)
                                          `cast`
                                        (<forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                        (\ @ r
                                           (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                           (br :: Data.ByteString.Builder.Internal.BufferRange)
                                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                         case k of k1 { DEFAULT ->
                                         case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                         case GHC.Classes.leInt
                                                (GHC.Types.I# dt3)
                                                Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                           GHC.Types.False
                                           -> (GHC.Base.$
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                 @ (GHC.Types.IO
                                                      (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (GHC.Base.returnIO
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (Data.ByteString.Builder.Internal.InsertChunk
                                                    @ r
                                                    dt4
                                                    wild1
                                                    k1))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                eta1
                                           GHC.Types.True
                                           -> let {
                                                ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                                = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                              } in
                                              let {
                                                isize :: GHC.Types.Int = GHC.Types.I# dt3
                                              } in
                                              let {
                                                op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                              } in
                                              let {
                                                ip :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr
                                                    @ GHC.Word.Word8
                                                    @ b2
                                                    (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (GHC.Types.I# dt2)
                                              } in
                                              let {
                                                op' :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b2 op isize
                                              } in
                                              case GHC.Ptr.$fOrdPtr_$c<=
                                                     @ GHC.Word.Word8
                                                     (op' @ GHC.Word.Word8)
                                                     (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                                GHC.Types.False
                                                -> case ip
                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                   case GHC.Ptr.plusPtr
                                                          @ GHC.Prim.Any
                                                          @ GHC.Word.Word8
                                                          (ip @ GHC.Prim.Any)
                                                          isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                   (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                      @ r
                                                      (Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt9)
                                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                         (eta2 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                       (GHC.Base.thenIO
                                                          @ ()
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r)
                                                          (GHC.ForeignPtr.touchForeignPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (k1 br1))
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                               r>_R)
                                                         eta2)
                                                        `cast`
                                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                       ->_R Sym (GHC.Types.N:IO[0]
                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                        r>_R))
                                                      wild2)
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } }
                                                GHC.Types.True
                                                -> (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (Foreign.Marshal.Utils.copyBytes
                                                         @ GHC.Word.Word8
                                                         op
                                                         (ip @ GHC.Word.Word8)
                                                         isize)
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1
                                                            (case op'
                                                                    @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                             Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt5 }))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } } } } })
                                          `cast`
                                        (forall (r :: <*>_N).
                                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                               (Data.ByteString.Builder.Prim.primBounded
                                  @ GHC.Types.Char
                                  Data.ByteString.Builder.Prim.charUtf8
                                  (GHC.Types.C# '>'#))
                          Text.Blaze.Internal.Leaf ds2 begin end
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds3 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds3)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r ->
                                      Data.ByteString.Builder.Internal.byteStringCopyStep
                                        @ r
                                        (Text.Blaze.Internal.getUtf8ByteString begin)))
                                  attrs)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString end)))
                          Text.Blaze.Internal.CustomLeaf tag close
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '<'#))
                                     (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                  attrs)
                               (case close of wild1 {
                                  GHC.Types.False
                                  -> Data.ByteString.Builder.Prim.primBounded
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.charUtf8
                                       (GHC.Types.C# '>'#)
                                  GHC.Types.True
                                  -> let {
                                       bs5 :: Data.ByteString.Internal.ByteString
                                       = Data.ByteString.Internal.packChars
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1 ->
                                               GHC.CString.unpackFoldrCString# @ b1 " />"#))
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r)
                                       @ Data.ByteString.Builder.Internal.Builder
                                       (\ (ds2 :: forall r.
                                                  Data.ByteString.Builder.Internal.BuildStep r
                                                  -> Data.ByteString.Builder.Internal.BuildStep
                                                       r) ->
                                        ds2)
                                         `cast`
                                       (<forall r.
                                         Data.ByteString.Builder.Internal.BuildStep r
                                         -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                       (\ @ r
                                          (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                          (br :: Data.ByteString.Builder.Internal.BufferRange)
                                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case bs5 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                        case k of k1 { DEFAULT ->
                                        case br of wild3 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                        case GHC.Classes.leInt
                                               (GHC.Types.I# dt3)
                                               Data.ByteString.Builder.Internal.maximalCopySize of wild4 {
                                          GHC.Types.False
                                          -> (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                @ (GHC.Types.IO
                                                     (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (GHC.Base.returnIO
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (Data.ByteString.Builder.Internal.InsertChunk
                                                   @ r
                                                   dt4
                                                   wild2
                                                   k1))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1
                                          GHC.Types.True
                                          -> let {
                                               ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                               = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                             } in
                                             let {
                                               isize :: GHC.Types.Int = GHC.Types.I# dt3
                                             } in
                                             let {
                                               op :: GHC.Ptr.Ptr GHC.Word.Word8
                                               = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                             } in
                                             let {
                                               ip :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr
                                                   @ GHC.Word.Word8
                                                   @ b1
                                                   (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (GHC.Types.I# dt2)
                                             } in
                                             let {
                                               op' :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                             } in
                                             case GHC.Ptr.$fOrdPtr_$c<=
                                                    @ GHC.Word.Word8
                                                    (op' @ GHC.Word.Word8)
                                                    (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild5 {
                                               GHC.Types.False
                                               -> case ip
                                                         @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                  case GHC.Ptr.plusPtr
                                                         @ GHC.Prim.Any
                                                         @ GHC.Word.Word8
                                                         (ip @ GHC.Prim.Any)
                                                         isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                  (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                     @ r
                                                     (Data.ByteString.Builder.Internal.BufferRange
                                                        dt7
                                                        dt9)
                                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                        (eta2 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1 br1))
                                                        `cast`
                                                      (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)
                                                        eta2)
                                                       `cast`
                                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                                       r>_R))
                                                     wild3)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } }
                                               GHC.Types.True
                                               -> (GHC.Base.thenIO
                                                     @ ()
                                                     @ (Data.ByteString.Builder.Internal.BuildSignal
                                                          r)
                                                     (Foreign.Marshal.Utils.copyBytes
                                                        @ GHC.Word.Word8
                                                        op
                                                        (ip @ GHC.Word.Word8)
                                                        isize)
                                                     (GHC.Base.thenIO
                                                        @ ()
                                                        @ (Data.ByteString.Builder.Internal.BuildSignal
                                                             r)
                                                        (GHC.ForeignPtr.touchForeignPtr
                                                           @ GHC.Word.Word8
                                                           ifp)
                                                        (k1
                                                           (case op'
                                                                   @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                            Data.ByteString.Builder.Internal.BufferRange
                                                              dt7
                                                              dt5 }))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } } } } })
                                         `cast`
                                       (forall (r :: <*>_N).
                                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)) })
                          Text.Blaze.Internal.Content content
                          -> Text.Blaze.Renderer.Utf8.fromChoiceString content
                          Text.Blaze.Internal.Comment comment
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (let {
                                     bs5 :: Data.ByteString.Internal.ByteString
                                     = Data.ByteString.Internal.packChars
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "<!-- "#))
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds2 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds2)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r
                                        (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                        (br :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case k of k1 { DEFAULT ->
                                      case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                      case GHC.Classes.leInt
                                             (GHC.Types.I# dt3)
                                             Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                        GHC.Types.False
                                        -> (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                              @ (GHC.Types.IO
                                                   (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (GHC.Base.returnIO
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (Data.ByteString.Builder.Internal.InsertChunk
                                                 @ r
                                                 dt4
                                                 wild1
                                                 k1))
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                             eta1
                                        GHC.Types.True
                                        -> let {
                                             ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                           } in
                                           let {
                                             isize :: GHC.Types.Int = GHC.Types.I# dt3
                                           } in
                                           let {
                                             op :: GHC.Ptr.Ptr GHC.Word.Word8
                                             = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                           } in
                                           let {
                                             ip :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr
                                                 @ GHC.Word.Word8
                                                 @ b1
                                                 (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                    @ GHC.Word.Word8
                                                    ifp)
                                                 (GHC.Types.I# dt2)
                                           } in
                                           let {
                                             op' :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                           } in
                                           case GHC.Ptr.$fOrdPtr_$c<=
                                                  @ GHC.Word.Word8
                                                  (op' @ GHC.Word.Word8)
                                                  (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                             GHC.Types.False
                                             -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                case GHC.Ptr.plusPtr
                                                       @ GHC.Prim.Any
                                                       @ GHC.Word.Word8
                                                       (ip @ GHC.Prim.Any)
                                                       isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                   @ r
                                                   (Data.ByteString.Builder.Internal.BufferRange
                                                      dt7
                                                      dt9)
                                                   (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                      (eta2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                    (GHC.Base.thenIO
                                                       @ ()
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       (GHC.ForeignPtr.touchForeignPtr
                                                          @ GHC.Word.Word8
                                                          ifp)
                                                       (k1 br1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta2)
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R))
                                                   wild2)
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } }
                                             GHC.Types.True
                                             -> (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (Foreign.Marshal.Utils.copyBytes
                                                      @ GHC.Word.Word8
                                                      op
                                                      (ip @ GHC.Word.Word8)
                                                      isize)
                                                   (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (GHC.ForeignPtr.touchForeignPtr
                                                         @ GHC.Word.Word8
                                                         ifp)
                                                      (k1
                                                         (case op'
                                                                 @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                          Data.ByteString.Builder.Internal.BufferRange
                                                            dt7
                                                            dt5 }))))
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } } } } })
                                       `cast`
                                     (forall (r :: <*>_N).
                                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString comment))
                               (let {
                                  bs5 :: Data.ByteString.Internal.ByteString
                                  = Data.ByteString.Internal.packChars
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 " -->"#))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds2 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds2)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r
                                     (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                     (br :: Data.ByteString.Builder.Internal.BufferRange)
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                   case k of k1 { DEFAULT ->
                                   case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                   case GHC.Classes.leInt
                                          (GHC.Types.I# dt3)
                                          Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                     GHC.Types.False
                                     -> (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                           @ (GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (GHC.Base.returnIO
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (Data.ByteString.Builder.Internal.InsertChunk
                                              @ r
                                              dt4
                                              wild1
                                              k1))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                          eta1
                                     GHC.Types.True
                                     -> let {
                                          ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                          = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                        } in
                                        let {
                                          isize :: GHC.Types.Int = GHC.Types.I# dt3
                                        } in
                                        let {
                                          op :: GHC.Ptr.Ptr GHC.Word.Word8
                                          = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                        } in
                                        let {
                                          ip :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 ->
                                            GHC.Ptr.plusPtr
                                              @ GHC.Word.Word8
                                              @ b1
                                              (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                 @ GHC.Word.Word8
                                                 ifp)
                                              (GHC.Types.I# dt2)
                                        } in
                                        let {
                                          op' :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 -> GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                        } in
                                        case GHC.Ptr.$fOrdPtr_$c<=
                                               @ GHC.Word.Word8
                                               (op' @ GHC.Word.Word8)
                                               (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                          GHC.Types.False
                                          -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                             case GHC.Ptr.plusPtr
                                                    @ GHC.Prim.Any
                                                    @ GHC.Word.Word8
                                                    (ip @ GHC.Prim.Any)
                                                    isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                             (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                @ r
                                                (Data.ByteString.Builder.Internal.BufferRange
                                                   dt7
                                                   dt9)
                                                (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                   (eta2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                 (GHC.Base.thenIO
                                                    @ ()
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r)
                                                    (GHC.ForeignPtr.touchForeignPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (k1 br1))
                                                   `cast`
                                                 (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)
                                                   eta2)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R))
                                                wild2)
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } }
                                          GHC.Types.True
                                          -> (GHC.Base.thenIO
                                                @ ()
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                (Foreign.Marshal.Utils.copyBytes
                                                   @ GHC.Word.Word8
                                                   op
                                                   (ip @ GHC.Word.Word8)
                                                   isize)
                                                (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (GHC.ForeignPtr.touchForeignPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (k1
                                                      (case op'
                                                              @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                       Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt5 }))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } } } } })
                                    `cast`
                                  (forall (r :: <*>_N).
                                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R)))
                          Text.Blaze.Internal.Append b10 c0 h1 h2
                          -> Data.ByteString.Builder.Internal.append
                               (go3 @ b10 attrs h1)
                               (go3 @ c0 attrs h2)
                          Text.Blaze.Internal.AddAttribute ds2 key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString key)))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.AddCustomAttribute key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Types.Char
                                                 Data.ByteString.Builder.Prim.charUtf8
                                                 (GHC.Types.C# ' '#))
                                              (Text.Blaze.Renderer.Utf8.fromChoiceString key))
                                           (let {
                                              bs5 :: Data.ByteString.Internal.ByteString
                                              = Data.ByteString.Internal.packChars
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b1 ->
                                                      GHC.CString.unpackFoldrCString# @ b1 "=\""#))
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (forall r.
                                                 Data.ByteString.Builder.Internal.BuildStep r
                                                 -> Data.ByteString.Builder.Internal.BuildStep r)
                                              @ Data.ByteString.Builder.Internal.Builder
                                              (\ (ds2 :: forall r.
                                                         Data.ByteString.Builder.Internal.BuildStep
                                                           r
                                                         -> Data.ByteString.Builder.Internal.BuildStep
                                                              r) ->
                                               ds2)
                                                `cast`
                                              (<forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                              (\ @ r
                                                 (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                                 (br :: Data.ByteString.Builder.Internal.BufferRange)
                                                 (eta1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                               case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                               case k of k1 { DEFAULT ->
                                               case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                               case GHC.Classes.leInt
                                                      (GHC.Types.I# dt3)
                                                      Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                                 GHC.Types.False
                                                 -> (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       @ (GHC.Types.IO
                                                            (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (GHC.Base.returnIO
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (Data.ByteString.Builder.Internal.InsertChunk
                                                          @ r
                                                          dt4
                                                          wild1
                                                          k1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta1
                                                 GHC.Types.True
                                                 -> let {
                                                      ifp :: GHC.ForeignPtr.ForeignPtr
                                                               GHC.Word.Word8
                                                      = GHC.ForeignPtr.ForeignPtr
                                                          @ GHC.Word.Word8
                                                          dt
                                                          dt1
                                                    } in
                                                    let {
                                                      isize :: GHC.Types.Int = GHC.Types.I# dt3
                                                    } in
                                                    let {
                                                      op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                      = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                                    } in
                                                    let {
                                                      ip :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (GHC.Types.I# dt2)
                                                    } in
                                                    let {
                                                      op' :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          op
                                                          isize
                                                    } in
                                                    case GHC.Ptr.$fOrdPtr_$c<=
                                                           @ GHC.Word.Word8
                                                           (op' @ GHC.Word.Word8)
                                                           (GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              dt5) of wild4 {
                                                      GHC.Types.False
                                                      -> case ip
                                                                @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                         case GHC.Ptr.plusPtr
                                                                @ GHC.Prim.Any
                                                                @ GHC.Word.Word8
                                                                (ip @ GHC.Prim.Any)
                                                                isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                         (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                            @ r
                                                            (Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt9)
                                                            (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                               (eta2 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                             (GHC.Base.thenIO
                                                                @ ()
                                                                @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r)
                                                                (GHC.ForeignPtr.touchForeignPtr
                                                                   @ GHC.Word.Word8
                                                                   ifp)
                                                                (k1 br1))
                                                               `cast`
                                                             (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)
                                                               eta2)
                                                              `cast`
                                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                            wild2)
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } }
                                                      GHC.Types.True
                                                      -> (GHC.Base.thenIO
                                                            @ ()
                                                            @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                            (Foreign.Marshal.Utils.copyBytes
                                                               @ GHC.Word.Word8
                                                               op
                                                               (ip @ GHC.Word.Word8)
                                                               isize)
                                                            (GHC.Base.thenIO
                                                               @ ()
                                                               @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                    r)
                                                               (GHC.ForeignPtr.touchForeignPtr
                                                                  @ GHC.Word.Word8
                                                                  ifp)
                                                               (k1
                                                                  (case op'
                                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                                   Data.ByteString.Builder.Internal.BufferRange
                                                                     dt7
                                                                     dt5 }))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } } } } })
                                                `cast`
                                              (forall (r :: <*>_N).
                                               <Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R))))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.Empty
                          -> Data.ByteString.Builder.Internal.empty }
                    } in
                    go3 @ () Data.ByteString.Builder.Internal.empty eta)) -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazea ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze a
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dToMarkup :: Text.Blaze.ToMarkup a).
                  @ *
                  @ Htmls.HTMLBlaze
                  @ a
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender @ a $dToMarkup)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender @ a $dToMarkup) -}
b48739322aa18ca7c88de96ff248ba36
  $fMimeRenderTYPEHTMLBlazea1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazea2 ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dToMarkup :: Text.Blaze.ToMarkup a)
                   (eta :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType eta) -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazea_$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Text.Blaze.ToMarkup a)
                   (w1 :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (w2 :: a) ->
                 Htmls.$w$cmimeRender @ a w w2) -}
6653e4735380b4e095ed3f83e412e2f6
  $fMimeRenderTYPEHTMLBlazea_$cp1MimeRender ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Htmls.$fMimeRenderTYPEHTMLBlazea2
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Blaze.ToMarkup a>_R
                 ->_R Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N)) -}
bfebf6be318051f05f9160ab524fc8ea
  $fMimeRenderTYPEHTMLBlazea_go3 ::
    Data.ByteString.Builder.Internal.Builder
    -> Text.Blaze.Internal.MarkupM b
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: NOINLINE -}
efce44bbf2f73112bf281992f0bbf0fc
  $fToMarkupSVGFrontend :: Text.Blaze.ToMarkup Htmls.SVGFrontend
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Htmls.SVGFrontend
                  Htmls.$fToMarkupSVGFrontend_$ctoMarkup
                  Htmls.$fToMarkupSVGFrontend_$ctoMarkup -}
98ace6e1776c3e116e06a4eb74217b55
  $fToMarkupSVGFrontend1 :: Text.Blaze.Internal.Markup
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   Htmls.$fToMarkupSVGFrontend2) -}
a35eba88627402b9e10727b6ca5f2554
  $fToMarkupSVGFrontend10 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend68
                   Htmls.$fToMarkupSVGFrontend11) -}
32c34b22348326843263d7289b50f000
  $fToMarkupSVGFrontend100 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend101) -}
eacb8611d49cb95a382738ea91e62257
  $fToMarkupSVGFrontend101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "container"#) -}
fbe30d2c2e12fee4bfd36957fee5ced2
  $fToMarkupSVGFrontend102 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend100
                   Htmls.$fToMarkupSVGFrontend103) -}
65edc86b9f4ed5162141d6265d71ba20
  $fToMarkupSVGFrontend103 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupSVGFrontend104) -}
e65449d2fbe0429f62076b6db2102a0a
  $fToMarkupSVGFrontend104 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend142
                   Htmls.$fToMarkupSVGFrontend138
                   Htmls.$fToMarkupSVGFrontend128
                   Htmls.$fToMarkupSVGFrontend105) -}
a000165fca7d22724b582bfd07a98778
  $fToMarkupSVGFrontend105 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend134
                   Htmls.$fToMarkupSVGFrontend130
                   Htmls.$fToMarkupSVGFrontend128
                   Htmls.$fToMarkupSVGFrontend106) -}
3993cf10bc2bd44d7cadf516858241a6
  $fToMarkupSVGFrontend106 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend124
                   Htmls.$fToMarkupSVGFrontend120
                   Htmls.$fToMarkupSVGFrontend118
                   Htmls.$fToMarkupSVGFrontend107) -}
a183f0bc24b5af4421bfbe7936600394
  $fToMarkupSVGFrontend107 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend114
                   Htmls.$fToMarkupSVGFrontend110
                   Htmls.$fToMarkupSVGFrontend108
                   Text.Blaze.Html5.img) -}
afc959cd16030c9aefb5de2929d7797a
  $fToMarkupSVGFrontend108 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend109) -}
c41d62da45f07572d8f5b4fbf7f8db00
  $fToMarkupSVGFrontend109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SVG/30"#) -}
16c6a6f7ea2e0a41e9d33ae9d5a29b94
  $fToMarkupSVGFrontend11 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupSVGFrontend12) -}
7547052cb6982a10583c2feff25bbb5d
  $fToMarkupSVGFrontend110 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend113
                   Htmls.$fToMarkupSVGFrontend112
                   Htmls.$fToMarkupSVGFrontend_t17) -}
83bbe76d93b99a8ff98646ccb0ee72db
  $fToMarkupSVGFrontend111 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w16
                   0#
                   ipv }) -}
5466b77e90fb13ed644b850c00e6b90a
  $fToMarkupSVGFrontend112 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3dc15491afb622af21fdd152bf914e14
  $fToMarkupSVGFrontend113 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w16) -}
6d8f649d22a0cf210361aa5a4a90ed04
  $fToMarkupSVGFrontend114 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend117
                   Htmls.$fToMarkupSVGFrontend116
                   Htmls.$fToMarkupSVGFrontend_t18) -}
424ff5b688bd6677a7a9bacc947a94dc
  $fToMarkupSVGFrontend115 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w17
                   0#
                   ipv }) -}
18649aa763cf97759138f2b845dcfc17
  $fToMarkupSVGFrontend116 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7e2b16dfe59ecf1c61fc15dd3d9f38bb
  $fToMarkupSVGFrontend117 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w17) -}
170d3fcdd017962fa381dcb0b7b1950c
  $fToMarkupSVGFrontend118 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend119) -}
3e1e213f0d7758a37142964d36058fd5
  $fToMarkupSVGFrontend119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "theImage"#) -}
a313f0fdf882d43a1e0a14995548e552
  $fToMarkupSVGFrontend12 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend52
                   Htmls.$fToMarkupSVGFrontend48
                   Htmls.$fToMarkupSVGFrontend46
                   Htmls.$fToMarkupSVGFrontend13) -}
a637585611dce3db63b8f267c7be833c
  $fToMarkupSVGFrontend120 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend123
                   Htmls.$fToMarkupSVGFrontend122
                   Htmls.$fToMarkupSVGFrontend_t19) -}
f314e0a7273dbee6a178073a3ae65be9
  $fToMarkupSVGFrontend121 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w18
                   0#
                   ipv }) -}
76a18888ac1d314a2517bb962b163763
  $fToMarkupSVGFrontend122 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
10d45c8aacf8c38b929086bcbe6749ac
  $fToMarkupSVGFrontend123 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w18) -}
8b75b183c5cbe27a4b02e18da585f180
  $fToMarkupSVGFrontend124 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend127
                   Htmls.$fToMarkupSVGFrontend126
                   Htmls.$fToMarkupSVGFrontend_t20) -}
9e0e70699d3d383cf37f11bb91a40df8
  $fToMarkupSVGFrontend125 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w19
                   0#
                   ipv }) -}
6126e0e2ff576fe6314591e57dd428ea
  $fToMarkupSVGFrontend126 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4d3003002cfbb34d84440c9ee32e854c
  $fToMarkupSVGFrontend127 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w19) -}
bcd07a5d73b7950f81ed02e0cca8ab9b
  $fToMarkupSVGFrontend128 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend129) -}
59e1f75542ea2a4f7e500e0ee63f43e3
  $fToMarkupSVGFrontend129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "250px"#) -}
99db0903595570781e8676f79dd6fb46
  $fToMarkupSVGFrontend13 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend42
                   Htmls.$fToMarkupSVGFrontend38
                   Htmls.$fToMarkupSVGFrontend36
                   Htmls.$fToMarkupSVGFrontend14) -}
86449aaf970c77b30d295a16ffc7e62b
  $fToMarkupSVGFrontend130 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend133
                   Htmls.$fToMarkupSVGFrontend132
                   Htmls.$fToMarkupSVGFrontend_t21) -}
f6a96c0f4dba9811d97e9c9286790e98
  $fToMarkupSVGFrontend131 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w20
                   0#
                   ipv }) -}
32030e3e737899992004b9be299bcfe6
  $fToMarkupSVGFrontend132 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
26a81467c42032f7e73e97ff58d040ed
  $fToMarkupSVGFrontend133 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w20) -}
69062a0cdd43e34d41f43147c17d5c75
  $fToMarkupSVGFrontend134 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend137
                   Htmls.$fToMarkupSVGFrontend136
                   Htmls.$fToMarkupSVGFrontend_t22) -}
a8f23f92e3f299951f86b4f9973935c5
  $fToMarkupSVGFrontend135 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w21
                   0#
                   ipv }) -}
70426521c2cbde9779b9779bf3b083d7
  $fToMarkupSVGFrontend136 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f48a01e3c83b4de67e6c32beaf6e8b19
  $fToMarkupSVGFrontend137 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w21) -}
0efc44758fd30fef90ed03629428bb39
  $fToMarkupSVGFrontend138 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend141
                   Htmls.$fToMarkupSVGFrontend140
                   Htmls.$fToMarkupSVGFrontend_t23) -}
564c11ce34da09326bd4671bcfb6d6ae
  $fToMarkupSVGFrontend139 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w22
                   0#
                   ipv }) -}
3ece3e2c89d307f330914e0d9fb75895
  $fToMarkupSVGFrontend14 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend32
                   Htmls.$fToMarkupSVGFrontend28
                   Htmls.$fToMarkupSVGFrontend26
                   Htmls.$fToMarkupSVGFrontend15) -}
3ae5ae45ddbc9e4582cce315bc2da8c9
  $fToMarkupSVGFrontend140 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
95131cf0000e533e7cf23c320ecc454b
  $fToMarkupSVGFrontend141 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w22) -}
7f92aa1d0b10663db3bf9abd43fb726b
  $fToMarkupSVGFrontend142 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend145
                   Htmls.$fToMarkupSVGFrontend144
                   Htmls.$fToMarkupSVGFrontend_t24) -}
f536bd3d73f5772e412589ad276c76a3
  $fToMarkupSVGFrontend143 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w23
                   0#
                   ipv }) -}
26394406e8cc946dc4f5617c03f323c4
  $fToMarkupSVGFrontend144 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
71d6235ec53dc86271f4854e7465bcf4
  $fToMarkupSVGFrontend145 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w23) -}
50a86eb9d71267d3e6a84379ab6c3158
  $fToMarkupSVGFrontend146 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend169
                   Htmls.$fToMarkupSVGFrontend165
                   Htmls.$fToMarkupSVGFrontend163
                   Htmls.$fToMarkupSVGFrontend147) -}
0e44cac9ec98143f44d28f579642def1
  $fToMarkupSVGFrontend147 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend159
                   Htmls.$fToMarkupSVGFrontend155
                   Htmls.$fToMarkupSVGFrontend151
                   Htmls.$fToMarkupSVGFrontend148) -}
6915e3e9039c0889fd5a38d00c38c8e9
  $fToMarkupSVGFrontend148 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupSVGFrontend149) -}
840162c8c4bbbc2ceb85ee8cb8571743
  $fToMarkupSVGFrontend149 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend150) -}
54141c3e0210ac9877d6005d3b71c76b
  $fToMarkupSVGFrontend15 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend16
                   Text.Blaze.Html5.input) -}
8733e741cfeb677e02ad6e817bef1450
  $fToMarkupSVGFrontend150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Create a diagram"#) -}
e9c49d855537410771c6da49ef4bdfcf
  $fToMarkupSVGFrontend151 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend154
                   Htmls.$fToMarkupSVGFrontend153
                   Htmls.$fToMarkupSVGFrontend_t25) -}
76c5e0858aa8750445ac4b85afe53940
  $fToMarkupSVGFrontend152 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w24
                   0#
                   ipv }) -}
8b73b8a5dbdf619ae957996c1fb4b150
  $fToMarkupSVGFrontend153 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
60b01c3aebc0567194c0eb740ebcd47b
  $fToMarkupSVGFrontend154 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w24) -}
464bb77257d9f8afc374352603076ae4
  $fToMarkupSVGFrontend155 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend158
                   Htmls.$fToMarkupSVGFrontend157
                   Htmls.$fToMarkupSVGFrontend_t26) -}
035218eca52e4ee7b3f9d98f5b2fc684
  $fToMarkupSVGFrontend156 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w25
                   0#
                   ipv }) -}
ab3780c650e6ab0fe0b68d77b6151660
  $fToMarkupSVGFrontend157 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
95712aaf4e13380b9a20bca930ed539f
  $fToMarkupSVGFrontend158 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w25) -}
50a1806cf858a0805065c6e0f9d57bae
  $fToMarkupSVGFrontend159 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend162
                   Htmls.$fToMarkupSVGFrontend161
                   Htmls.$fToMarkupSVGFrontend_t27) -}
2e385aad8fa0c308ff72c0a390de67f5
  $fToMarkupSVGFrontend16 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend17) -}
825dcc9ee9615ee1ea1528526bde9ab5
  $fToMarkupSVGFrontend160 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w26
                   0#
                   ipv }) -}
b8e7a405dae8ac4b87aa26584d2288f9
  $fToMarkupSVGFrontend161 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
03a01569238dedfdd7045e3049bc3f69
  $fToMarkupSVGFrontend162 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w26) -}
540d7de78e091c8cbfc8abb20ca63f33
  $fToMarkupSVGFrontend163 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend164) -}
ebf6e586ccb9de29616043cff1497f32
  $fToMarkupSVGFrontend164 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "text-align: center"#) -}
41569d479b3c587f3cc8519bde7684f4
  $fToMarkupSVGFrontend165 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend168
                   Htmls.$fToMarkupSVGFrontend167
                   Htmls.$fToMarkupSVGFrontend_t28) -}
63c5aacf28318d5102482e669d2b0705
  $fToMarkupSVGFrontend166 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w27
                   0#
                   ipv }) -}
1e2f1a280fb4f37d3f83e5d511f3b21e
  $fToMarkupSVGFrontend167 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4a56099ea75984ad57f9111c7b954190
  $fToMarkupSVGFrontend168 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w27) -}
2cf895a2003bce0fe262ac6bc96c11ab
  $fToMarkupSVGFrontend169 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend172
                   Htmls.$fToMarkupSVGFrontend171
                   Htmls.$fToMarkupSVGFrontend_t29) -}
8f87019ec4f58eab042a5620bda26c86
  $fToMarkupSVGFrontend17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "form-control"#) -}
11d3ed5c07239f9eb0d62c90aa3f96ab
  $fToMarkupSVGFrontend170 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w28
                   0#
                   ipv }) -}
04765fe592fe8924263c6aca4eed8bce
  $fToMarkupSVGFrontend171 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
9d14b6de6df81989942edee65545ad41
  $fToMarkupSVGFrontend172 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w28) -}
b90ee096acf057671f50f3fe2a199043
  $fToMarkupSVGFrontend173 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend176
                   Htmls.$fToMarkupSVGFrontend175
                   Htmls.$fToMarkupSVGFrontend_t30) -}
220610c7fd68ed3f50efa02bab2854ed
  $fToMarkupSVGFrontend174 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w29
                   0#
                   ipv }) -}
c2fc206cab3453221ecb36765f61a801
  $fToMarkupSVGFrontend175 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
108322c5c2b83d1209ddbabc14a70150
  $fToMarkupSVGFrontend176 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w29) -}
f126ec16bf975a4b977b9d83feeb4524
  $fToMarkupSVGFrontend177 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend180
                   Htmls.$fToMarkupSVGFrontend179
                   Htmls.$fToMarkupSVGFrontend_t31) -}
7f223ca364596db6ba1acaffb66b5d62
  $fToMarkupSVGFrontend178 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w30
                   0#
                   ipv }) -}
70f6d7f23c7fd156025d0fc120ee665e
  $fToMarkupSVGFrontend179 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2393102c939812ee7c915ecf46f4acf9
  $fToMarkupSVGFrontend18 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend21
                   Htmls.$fToMarkupSVGFrontend20
                   Htmls.$fToMarkupSVGFrontend_t1) -}
bea1eb3c2b4a67cc665eb93ca9ee2d60
  $fToMarkupSVGFrontend180 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w30) -}
82e8ffe85ff8c0cb9fe682557a7b2dde
  $fToMarkupSVGFrontend181 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend184
                   Htmls.$fToMarkupSVGFrontend183
                   Htmls.$fToMarkupSVGFrontend_t32) -}
09b4f8d1f8193d3ea15da2285b6147fd
  $fToMarkupSVGFrontend182 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w31
                   0#
                   ipv }) -}
37029553c42fa48da9802f82423b05bf
  $fToMarkupSVGFrontend183 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
73170a419f90ab1aa72bdeec44d8feaf
  $fToMarkupSVGFrontend184 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w31) -}
37bdee8bdb748b924e12ebbfd8229d01
  $fToMarkupSVGFrontend185 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend239
                   Htmls.$fToMarkupSVGFrontend235
                   Htmls.$fToMarkupSVGFrontend231
                   Htmls.$fToMarkupSVGFrontend186) -}
10ad4231b2ca88638357574e681848a4
  $fToMarkupSVGFrontend186 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend209
                   Htmls.$fToMarkupSVGFrontend187) -}
5351ec7a8559f3e1beae2b74700a2b33
  $fToMarkupSVGFrontend187 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend205
                   Htmls.$fToMarkupSVGFrontend201
                   Htmls.$fToMarkupSVGFrontend199
                   Htmls.$fToMarkupSVGFrontend188) -}
cede1de6d8fa426a4d784d9c02728cb6
  $fToMarkupSVGFrontend188 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend195
                   Htmls.$fToMarkupSVGFrontend191
                   Htmls.$fToMarkupSVGFrontend189
                   Text.Blaze.Html5.meta) -}
90f1049f834b7e194deaf69c3689d66f
  $fToMarkupSVGFrontend189 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend190) -}
4cf934f82a38e67dc85580044cac7ce5
  $fToMarkupSVGFrontend19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w
                   0#
                   ipv }) -}
45aba82deb98ffa687cee9cc6244f7ba
  $fToMarkupSVGFrontend190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "viewport"#) -}
3ad7a7777bd17c8390ea550470817dd8
  $fToMarkupSVGFrontend191 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend194
                   Htmls.$fToMarkupSVGFrontend193
                   Htmls.$fToMarkupSVGFrontend_t33) -}
d5dddd982b8df7f91f365cc69fd55560
  $fToMarkupSVGFrontend192 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w32
                   0#
                   ipv }) -}
5669a86ffd42f79350b2b5043ac65202
  $fToMarkupSVGFrontend193 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b06cd01875899313b3d63e77f8d95e2d
  $fToMarkupSVGFrontend194 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w32) -}
d0fe4bede707c292ddfd7bfbedc0b34d
  $fToMarkupSVGFrontend195 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend198
                   Htmls.$fToMarkupSVGFrontend197
                   Htmls.$fToMarkupSVGFrontend_t34) -}
2a165e07dae2515856efa97492b96e62
  $fToMarkupSVGFrontend196 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w33
                   0#
                   ipv }) -}
1a6e656c7eb6d4dda15f9edccbde8767
  $fToMarkupSVGFrontend197 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
da62198d1d5c47a6d738a29c8b303e67
  $fToMarkupSVGFrontend198 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w33) -}
3bd53aa8e5c1b0185243ca00136559b4
  $fToMarkupSVGFrontend199 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend200) -}
790d1b18d82c5a33dacf5de835687de5
  $fToMarkupSVGFrontend2 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend251
                   Htmls.$fToMarkupSVGFrontend247
                   Htmls.$fToMarkupSVGFrontend243
                   Htmls.$fToMarkupSVGFrontend3) -}
0e0c4476f6355ba0ac109aa5033d3c25
  $fToMarkupSVGFrontend20 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ca6dfc399cab32345630e0458c84e8d0
  $fToMarkupSVGFrontend200 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "width=device-width, initial-scale=1"#) -}
8d1e278a3418721fc74dfe5341ed7093
  $fToMarkupSVGFrontend201 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend204
                   Htmls.$fToMarkupSVGFrontend203
                   Htmls.$fToMarkupSVGFrontend_t35) -}
9a657055ed984d4c56b92171075e69c1
  $fToMarkupSVGFrontend202 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w34
                   0#
                   ipv }) -}
cbde7a0c4fad57cf7ceb7feb80f99244
  $fToMarkupSVGFrontend203 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t35 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
208bdb13eed08e4047652c70abf70bca
  $fToMarkupSVGFrontend204 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w34) -}
d8a0319ab488c98ff646a6b22910012c
  $fToMarkupSVGFrontend205 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend208
                   Htmls.$fToMarkupSVGFrontend207
                   Htmls.$fToMarkupSVGFrontend_t36) -}
95b657bc431f4a42e620c29e550fbe06
  $fToMarkupSVGFrontend206 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w35
                   0#
                   ipv }) -}
afd19714aea6103787c8b68479fc4703
  $fToMarkupSVGFrontend207 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t36 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
fff5e48098761afcbbb340f085d88415
  $fToMarkupSVGFrontend208 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w35) -}
eb89bb5cd4627d79243c17bcbc8a2954
  $fToMarkupSVGFrontend209 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend227
                   Htmls.$fToMarkupSVGFrontend223
                   Htmls.$fToMarkupSVGFrontend221
                   Htmls.$fToMarkupSVGFrontend210) -}
7f70394c9c06dd97fe7582f5325433dd
  $fToMarkupSVGFrontend21 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w) -}
e01b8d6538df7a0ddadcb19e3afcbacd
  $fToMarkupSVGFrontend210 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend217
                   Htmls.$fToMarkupSVGFrontend213
                   Htmls.$fToMarkupSVGFrontend211
                   Text.Blaze.Html5.link) -}
66f0a25c4dc0ae27ab341da831f5a670
  $fToMarkupSVGFrontend211 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend212) -}
d8d9caf9a78ed7180f36e7e42fe9d805
  $fToMarkupSVGFrontend212 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "stylesheet"#) -}
8b799bc738acc74b5dc363a2d96ef05c
  $fToMarkupSVGFrontend213 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend216
                   Htmls.$fToMarkupSVGFrontend215
                   Htmls.$fToMarkupSVGFrontend_t37) -}
51ad20bf34fd27ff93d0470fa28536d5
  $fToMarkupSVGFrontend214 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w36
                   0#
                   ipv }) -}
af3aa050b75d80035cc89573be5c27a4
  $fToMarkupSVGFrontend215 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t37 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e57ba40d9864ae7d4b05a21341144192
  $fToMarkupSVGFrontend216 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w36) -}
901696cddfc3ec8bab7aaa8a9d15030c
  $fToMarkupSVGFrontend217 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend220
                   Htmls.$fToMarkupSVGFrontend219
                   Htmls.$fToMarkupSVGFrontend_t38) -}
69815d978d833fd8b418964254da0d60
  $fToMarkupSVGFrontend218 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w37
                   0#
                   ipv }) -}
839cc23b2a8cdf5a5ce0a5ee78a86132
  $fToMarkupSVGFrontend219 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t38 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
122cbfdb47b8ea0288ee3de372acea8f
  $fToMarkupSVGFrontend22 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend25
                   Htmls.$fToMarkupSVGFrontend24
                   Htmls.$fToMarkupSVGFrontend_t2) -}
48d9eafc434fc099b4da533800b32134
  $fToMarkupSVGFrontend220 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w37) -}
0aa2071b4e90dc47cccfdf257a5e559f
  $fToMarkupSVGFrontend221 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend222) -}
b52877342b6b99bbeeb7c1948a86f44c
  $fToMarkupSVGFrontend222 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"#) -}
040180a008357e3905e1e7df1f2370ef
  $fToMarkupSVGFrontend223 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend226
                   Htmls.$fToMarkupSVGFrontend225
                   Htmls.$fToMarkupSVGFrontend_t39) -}
e4c0396268212c831d72d63fc1c30d19
  $fToMarkupSVGFrontend224 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w38
                   0#
                   ipv }) -}
1501fe09dd706552b783b49d3faaee87
  $fToMarkupSVGFrontend225 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t39 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3476717e12e3c5384f3dc16ce73df636
  $fToMarkupSVGFrontend226 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w38) -}
dc28fab6ddd73ebc28a7cbed80132a3d
  $fToMarkupSVGFrontend227 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend230
                   Htmls.$fToMarkupSVGFrontend229
                   Htmls.$fToMarkupSVGFrontend_t40) -}
d718dab3062bd14c0898c3902d58866d
  $fToMarkupSVGFrontend228 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w39
                   0#
                   ipv }) -}
d34431d9f394b8397e083aa4b55ade9a
  $fToMarkupSVGFrontend229 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t40 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
26f03ed26389268c7dc6e35f3e8c4c30
  $fToMarkupSVGFrontend23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w1
                   0#
                   ipv }) -}
86be9d84a4999f193d2e0b803e6de25e
  $fToMarkupSVGFrontend230 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w39) -}
a826c013ad31d6ca18d65d282a106a8a
  $fToMarkupSVGFrontend231 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend234
                   Htmls.$fToMarkupSVGFrontend233
                   Htmls.$fToMarkupSVGFrontend_t41) -}
5fa67113d2caa29b12f3d8dd95599399
  $fToMarkupSVGFrontend232 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w40
                   0#
                   ipv }) -}
f815d683f47c9512a94c39d3d32e6f43
  $fToMarkupSVGFrontend233 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t41 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2191ee448b29f81ea1643eebe66d3f8b
  $fToMarkupSVGFrontend234 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w40) -}
c9e484b58dd45c4b36951aafe84f4561
  $fToMarkupSVGFrontend235 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend238
                   Htmls.$fToMarkupSVGFrontend237
                   Htmls.$fToMarkupSVGFrontend_t42) -}
3aea467ff9ebbea6848be73e18dfc67f
  $fToMarkupSVGFrontend236 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w41
                   0#
                   ipv }) -}
448344d7d0862183526b69d8a2d77c03
  $fToMarkupSVGFrontend237 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t42 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
30dc5fb014c883b3e894f4f19c4cfb1a
  $fToMarkupSVGFrontend238 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w41) -}
4c94e34c04ba9c0f8cbb0153e6ce9cf0
  $fToMarkupSVGFrontend239 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend242
                   Htmls.$fToMarkupSVGFrontend241
                   Htmls.$fToMarkupSVGFrontend_t43) -}
2caf2cf4e4ef85524d0ea63074bc010e
  $fToMarkupSVGFrontend24 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
aa53dfed5fa3cb8ae59b74bc7273fbfc
  $fToMarkupSVGFrontend240 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w42
                   0#
                   ipv }) -}
37a030f075a4756e95fa19fd090f48df
  $fToMarkupSVGFrontend241 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t43 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
08efd8765d08e414402e32efacb2cb2d
  $fToMarkupSVGFrontend242 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w42) -}
8b7227285eb284c1354c464017314aeb
  $fToMarkupSVGFrontend243 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend246
                   Htmls.$fToMarkupSVGFrontend245
                   Htmls.$fToMarkupSVGFrontend_t44) -}
1b45d4d26dfb94a8b9d231488b1564cf
  $fToMarkupSVGFrontend244 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w43
                   0#
                   ipv }) -}
d7823cee559cfd5f709f16db8c31b222
  $fToMarkupSVGFrontend245 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t44 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
30ed9eb13dd5dbd568ae26e7376b6f96
  $fToMarkupSVGFrontend246 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w43) -}
d53f2bac1710a0eda92157d13035ff6d
  $fToMarkupSVGFrontend247 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend250
                   Htmls.$fToMarkupSVGFrontend249
                   Htmls.$fToMarkupSVGFrontend_t45) -}
b7a6278b76fd9fe4dd777eba8a7dd360
  $fToMarkupSVGFrontend248 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w44
                   0#
                   ipv }) -}
f460c76816d09c232d10277beb61a684
  $fToMarkupSVGFrontend249 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t45 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6dfbc6fbc6d7774dbea884081936c447
  $fToMarkupSVGFrontend25 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w1) -}
61d623d1dbd81acb50e7c0b47ee25b10
  $fToMarkupSVGFrontend250 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w44) -}
04b099b3727a764ab94f1f3d77ce8d4b
  $fToMarkupSVGFrontend251 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend254
                   Htmls.$fToMarkupSVGFrontend253
                   Htmls.$fToMarkupSVGFrontend_t46) -}
bd56f3cce45396de0963bca136ba0424
  $fToMarkupSVGFrontend252 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w45
                   0#
                   ipv }) -}
6887b48fd9562a1b4875500e1319daa9
  $fToMarkupSVGFrontend253 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t46 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
558e5d377c3962ac6ee881cdd5192bcb
  $fToMarkupSVGFrontend254 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w45) -}
b199baf52437f5950aa7eb4a6b4854ed
  $fToMarkupSVGFrontend26 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend27) -}
51ddd2055b48d0ca8f612b74af587a63
  $fToMarkupSVGFrontend27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "number"#) -}
cc2c7d5a8379725738a00acb68151301
  $fToMarkupSVGFrontend28 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend31
                   Htmls.$fToMarkupSVGFrontend30
                   Htmls.$fToMarkupSVGFrontend_t3) -}
fe4b71c626a41bcfa0e647806c344bc0
  $fToMarkupSVGFrontend29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w2
                   0#
                   ipv }) -}
7202b9b18379e1647c4698a94e23c129
  $fToMarkupSVGFrontend3 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend185
                   Htmls.$fToMarkupSVGFrontend4) -}
c127a430639b50f48c61a506b90411c1
  $fToMarkupSVGFrontend30 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
792ed2d97cd7e9f0e00c1e03284ddce5
  $fToMarkupSVGFrontend31 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w2) -}
25c14ed5bd18970206bc38a716e7568f
  $fToMarkupSVGFrontend32 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend35
                   Htmls.$fToMarkupSVGFrontend34
                   Htmls.$fToMarkupSVGFrontend_t4) -}
30bd6772e9baa4b476a56cfbfe5394c1
  $fToMarkupSVGFrontend33 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w3
                   0#
                   ipv }) -}
51be0e39b3f7beeae68131a19894e15e
  $fToMarkupSVGFrontend34 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
5378ba9781c0dc4b39af757d838b640b
  $fToMarkupSVGFrontend35 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w3) -}
169066a3746a1ddbf4d2f3a27b0430b9
  $fToMarkupSVGFrontend36 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend37) -}
71504a99887ea831a5f553cabc51ac2d
  $fToMarkupSVGFrontend37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "42"#) -}
2e83440ecae46a59553f944485f78869
  $fToMarkupSVGFrontend38 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend41
                   Htmls.$fToMarkupSVGFrontend40
                   Htmls.$fToMarkupSVGFrontend_t5) -}
e532b8a4625fa7efa624b73cbc6b0029
  $fToMarkupSVGFrontend39 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w4
                   0#
                   ipv }) -}
573ccb14363cd78bd69e28034f793ee0
  $fToMarkupSVGFrontend4 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend181
                   Htmls.$fToMarkupSVGFrontend177
                   Htmls.$fToMarkupSVGFrontend173
                   Htmls.$fToMarkupSVGFrontend5) -}
be36de01315ad0255db17f7fcbb68ed6
  $fToMarkupSVGFrontend40 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
dfb5b7284557f39def079126bf563904
  $fToMarkupSVGFrontend41 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w4) -}
6a878cbb6c0b7e65811353cb5c014b2e
  $fToMarkupSVGFrontend42 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend45
                   Htmls.$fToMarkupSVGFrontend44
                   Htmls.$fToMarkupSVGFrontend_t6) -}
adfa3e116c949e5dcf7ff15518c8630a
  $fToMarkupSVGFrontend43 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w5
                   0#
                   ipv }) -}
0a442da937bc1ffe0331a99522a58b99
  $fToMarkupSVGFrontend44 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3e85c0069e251d4b4ebbe80ca05b680b
  $fToMarkupSVGFrontend45 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w5) -}
3093cd6c9d96401b183dda834e8f7b43
  $fToMarkupSVGFrontend46 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend47) -}
b139008d711e3d76ad1f0abf51f8a8aa
  $fToMarkupSVGFrontend47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(function(n) { var im = document.getElementById('theImage'); im.setAttribute('src', 'SVG/' + n); })(this.value)"#) -}
f905bc13c48ab015acf379bc8249f03b
  $fToMarkupSVGFrontend48 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend51
                   Htmls.$fToMarkupSVGFrontend50
                   Htmls.$fToMarkupSVGFrontend_t7) -}
d9bd62109c83ae181c9652cb2709a665
  $fToMarkupSVGFrontend49 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w6
                   0#
                   ipv }) -}
78ac62388afb44938326981741d36a65
  $fToMarkupSVGFrontend5 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend146
                   Htmls.$fToMarkupSVGFrontend6) -}
126e54f522d2b2c2065cebc15b48188f
  $fToMarkupSVGFrontend50 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f701064918fc0a000e090091e118fd85
  $fToMarkupSVGFrontend51 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w6) -}
9f9af577f8c5b2ab8f8d152d14d8b5e6
  $fToMarkupSVGFrontend52 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend55
                   Htmls.$fToMarkupSVGFrontend54
                   Htmls.$fToMarkupSVGFrontend_t8) -}
b5581a6de9e3f6d29ca84e1f72fd788a
  $fToMarkupSVGFrontend53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w7
                   0#
                   ipv }) -}
7b5fb197ad05f0e278306d6c183e5335
  $fToMarkupSVGFrontend54 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7dd12bf62ee6d3abcb9ecfd0b3f076e6
  $fToMarkupSVGFrontend55 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w7) -}
4857cfe726597450e45596537325378b
  $fToMarkupSVGFrontend56 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend59
                   Htmls.$fToMarkupSVGFrontend58
                   Htmls.$fToMarkupSVGFrontend_t9) -}
9f36307fb5fe73ed79fd6ece158cb801
  $fToMarkupSVGFrontend57 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w8
                   0#
                   ipv }) -}
ff03b4c72e9ad5d9471ecd895997c868
  $fToMarkupSVGFrontend58 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
85631dcffd6850262c23547ddf47f34e
  $fToMarkupSVGFrontend59 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w8) -}
9966c7a1eb51e3801e0c437f5f7cae6f
  $fToMarkupSVGFrontend6 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend102
                   Htmls.$fToMarkupSVGFrontend7) -}
0df11412fecb07cfa5d829766b2ba317
  $fToMarkupSVGFrontend60 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend63
                   Htmls.$fToMarkupSVGFrontend62
                   Htmls.$fToMarkupSVGFrontend_t10) -}
2a3c6489fe9f07e21bce134d1ad1771a
  $fToMarkupSVGFrontend61 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w9
                   0#
                   ipv }) -}
c67585a5a3395ecc9cadda3b7eba10bb
  $fToMarkupSVGFrontend62 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0b305e49f1299a52816bb3433610fb47
  $fToMarkupSVGFrontend63 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w9) -}
7193f89f714f4d3dc4f4e63edf7f8a9e
  $fToMarkupSVGFrontend64 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend67
                   Htmls.$fToMarkupSVGFrontend66
                   Htmls.$fToMarkupSVGFrontend_t11) -}
6b37dc64d104a76c420cf1ffb5fdea63
  $fToMarkupSVGFrontend65 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w10
                   0#
                   ipv }) -}
8d65d0dd6a94c96da6111cd12c55c946
  $fToMarkupSVGFrontend66 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
865b75517ba7df1e6a957d901929029a
  $fToMarkupSVGFrontend67 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w10) -}
7d67c48da9d342b9272ad394310c90b3
  $fToMarkupSVGFrontend68 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend69) -}
e37261601c1827d4b1993a34be01feb7
  $fToMarkupSVGFrontend69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "col-sm-12 col-md-8 col-lg-4"#) -}
31d65fe6cd5cfa29833d62cbee390cc1
  $fToMarkupSVGFrontend7 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend100
                   Htmls.$fToMarkupSVGFrontend8) -}
79c13d76f47bf3ba51a4ded8c2e508c1
  $fToMarkupSVGFrontend70 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend98
                   Htmls.$fToMarkupSVGFrontend71) -}
0f6a6f053fceba774fe3c811c3417d80
  $fToMarkupSVGFrontend71 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend94
                   Htmls.$fToMarkupSVGFrontend90
                   Htmls.$fToMarkupSVGFrontend88
                   Htmls.$fToMarkupSVGFrontend72) -}
268bf254debc8f109e41ec9e9700d0da
  $fToMarkupSVGFrontend72 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend84
                   Htmls.$fToMarkupSVGFrontend80
                   Htmls.$fToMarkupSVGFrontend76
                   Htmls.$fToMarkupSVGFrontend73) -}
63d348a10deb78564178fe7435ffe160
  $fToMarkupSVGFrontend73 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupSVGFrontend74) -}
dacf3dd52f950ffa1f8678e0c510297d
  $fToMarkupSVGFrontend74 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend75) -}
be303b9e0fa01870b3212e64112fb50a
  $fToMarkupSVGFrontend75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Number"#) -}
7c59866bf05f55757e68d30b99adbaab
  $fToMarkupSVGFrontend76 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend79
                   Htmls.$fToMarkupSVGFrontend78
                   Htmls.$fToMarkupSVGFrontend_t12) -}
659a204bfad579461988fce346121ba8
  $fToMarkupSVGFrontend77 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w11
                   0#
                   ipv }) -}
3efaf6f7481d6b150a3c82a72b450572
  $fToMarkupSVGFrontend78 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
22dc7fccbdeaed5c8fcf9ec1356ccdf2
  $fToMarkupSVGFrontend79 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w11) -}
69c0b9e699fa2668bb7efa0a68e067d2
  $fToMarkupSVGFrontend8 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupSVGFrontend9) -}
1d8942d40b38173ff6c1ff7480106b0f
  $fToMarkupSVGFrontend80 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend83
                   Htmls.$fToMarkupSVGFrontend82
                   Htmls.$fToMarkupSVGFrontend_t13) -}
17b98e15761bdc6e713b5b6ee06a6c0f
  $fToMarkupSVGFrontend81 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w12
                   0#
                   ipv }) -}
66edaa352f30b904d708e56c0b32fd86
  $fToMarkupSVGFrontend82 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b51b0490eb34d8e02dfbef2dcb6a0e2b
  $fToMarkupSVGFrontend83 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w12) -}
298f0d1607c15ba9fc0ad613ed292a0b
  $fToMarkupSVGFrontend84 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend87
                   Htmls.$fToMarkupSVGFrontend86
                   Htmls.$fToMarkupSVGFrontend_t14) -}
7482e29724ea37b33676e3ce66b1089a
  $fToMarkupSVGFrontend85 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w13
                   0#
                   ipv }) -}
6298e5e70daf88fe2903507542f59e51
  $fToMarkupSVGFrontend86 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f20fd4fc595bf1fe59ccb19569511873
  $fToMarkupSVGFrontend87 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w13) -}
507f756dcc2a733a1cc39ab83a288bc0
  $fToMarkupSVGFrontend88 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend89) -}
058f72cec0a40972b7d304b2434f1e67
  $fToMarkupSVGFrontend89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "example-number-input"#) -}
abb4c6a13995741a7e12f75fb3111bba
  $fToMarkupSVGFrontend9 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend70
                   Htmls.$fToMarkupSVGFrontend10) -}
a39b7c90c6dfcb36caa9e769dcb3fefe
  $fToMarkupSVGFrontend90 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend93
                   Htmls.$fToMarkupSVGFrontend92
                   Htmls.$fToMarkupSVGFrontend_t15) -}
2bb4ec340dab2288ab6917446b18ee92
  $fToMarkupSVGFrontend91 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w14
                   0#
                   ipv }) -}
496d5e35ffc327d6d4847733aabe51c9
  $fToMarkupSVGFrontend92 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b2411b26950db4ab1293d3bf8897356f
  $fToMarkupSVGFrontend93 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w14) -}
cd525f6771affd75a575a4b82a0d5dcf
  $fToMarkupSVGFrontend94 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend97
                   Htmls.$fToMarkupSVGFrontend96
                   Htmls.$fToMarkupSVGFrontend_t16) -}
62a6ff8df803624feca7b796ea78fcfe
  $fToMarkupSVGFrontend95 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupSVGFrontend_w15
                   0#
                   ipv }) -}
5507f0c208463d65df9e18e17a3689a6
  $fToMarkupSVGFrontend96 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ee5390eda14c575bb833b2e5af0dffac
  $fToMarkupSVGFrontend97 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupSVGFrontend_w15) -}
129d4f5a4cbb611d8a54bfa63629e8f5
  $fToMarkupSVGFrontend98 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupSVGFrontend99) -}
c032ab4282387602275474a12f5a0495
  $fToMarkupSVGFrontend99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "col-2 col-form-label"#) -}
efce44bbf2f73112bf281992f0bbf0fc
  $fToMarkupSVGFrontend_$ctoMarkup ::
    Htmls.SVGFrontend -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Htmls.SVGFrontend) -> Htmls.$fToMarkupSVGFrontend1) -}
586913fbc28bf22c30b54569771bdbd7
  $fToMarkupSVGFrontend_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend19 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0382e9cc954a71f65ed5698d449d15e4
  $fToMarkupSVGFrontend_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend61 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
09ab4ea56fdb724f6722da5ec016d52a
  $fToMarkupSVGFrontend_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend65 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
075da86b4ad9ae15645c4638dbb86508
  $fToMarkupSVGFrontend_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend77 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e49e9cf282128065593ffd2cce636e86
  $fToMarkupSVGFrontend_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend81 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
537e803b576f3f7fbce1fa8d72d1c9f2
  $fToMarkupSVGFrontend_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend85 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
faef383f9b277c25b6ae0aadd9364e55
  $fToMarkupSVGFrontend_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend91 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
03ce9724c00182ef984eb44f65bfbd5e
  $fToMarkupSVGFrontend_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend95 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4948f6d8ab22066da010dc46dcaf07ca
  $fToMarkupSVGFrontend_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend111 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b1b5c1a8042acc457ae26bfb8591964a
  $fToMarkupSVGFrontend_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend115 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
248583c6f27f802965810bc677313753
  $fToMarkupSVGFrontend_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend121 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
300b57fb6474a0d6510109a5fabbd80a
  $fToMarkupSVGFrontend_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend23 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7338c85f7f634b8377293c2e2590dba2
  $fToMarkupSVGFrontend_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend125 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d7f61e0de74addc78349566181ba95e6
  $fToMarkupSVGFrontend_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend131 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a7c6021a37a8afb0f1fdbb81c9b3ef4d
  $fToMarkupSVGFrontend_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend135 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4899f318c92bc37e2371ae808d61bdab
  $fToMarkupSVGFrontend_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend139 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
402c8801a7e10c10fccb12e1387c45bb
  $fToMarkupSVGFrontend_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend143 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fac51aa019bfae2ac4cbecc35e2f4a6a
  $fToMarkupSVGFrontend_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend152 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
343973a922bca8b8647fd332c63b96ef
  $fToMarkupSVGFrontend_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend156 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
abf570c0ea862bee654913e75b2dfc99
  $fToMarkupSVGFrontend_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend160 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d336963d678e8f0d16ff42d0e976cb41
  $fToMarkupSVGFrontend_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend166 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0f1b1e3a3de0017289d8bc54bc0b6fe2
  $fToMarkupSVGFrontend_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend170 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
2e497bb51e17f6c2bde413e907818e3b
  $fToMarkupSVGFrontend_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend29 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
bfb95f9f4b465c5f0145690859409762
  $fToMarkupSVGFrontend_t30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend174 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e8c45c1b0fe844014d09fac13ef2ebe3
  $fToMarkupSVGFrontend_t31 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend178 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f418f9588268eeb4739deca5e777f121
  $fToMarkupSVGFrontend_t32 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend182 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b18a7510fa5f7380d900df9538ddfa4d
  $fToMarkupSVGFrontend_t33 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend192 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
838fa0ac1317e32d3bbb1b6ca1d5e509
  $fToMarkupSVGFrontend_t34 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend196 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
af5183eb814fc13ce3eeb9728fab4203
  $fToMarkupSVGFrontend_t35 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend202 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0773a617e48d581fe4df5f5baecfdea0
  $fToMarkupSVGFrontend_t36 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend206 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ed1b9946a64077c987c157f245721114
  $fToMarkupSVGFrontend_t37 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend214 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fa57bb090ce9d58ff09c36eeece9bf1e
  $fToMarkupSVGFrontend_t38 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend218 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ec134f7f90585d32e300a3b032e3caea
  $fToMarkupSVGFrontend_t39 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend224 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1cc5962db73511d8e42a3759fb01e7b0
  $fToMarkupSVGFrontend_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend33 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a6ab01460c093539a9d7d2ce26b2be9a
  $fToMarkupSVGFrontend_t40 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend228 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a2f1ee10cdcafd992e01810f7f1979c8
  $fToMarkupSVGFrontend_t41 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend232 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e10a8107b89ceeac6fcbbd99e3777bd3
  $fToMarkupSVGFrontend_t42 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend236 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1d1d2727df195747109cc99529c69b8c
  $fToMarkupSVGFrontend_t43 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend240 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c829e44581b47b33d6cbba1d943a3b23
  $fToMarkupSVGFrontend_t44 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend244 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ef8f44ac82cc363394022fe60e95f547
  $fToMarkupSVGFrontend_t45 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend248 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c455b280d4af178abca8cee010eb1c14
  $fToMarkupSVGFrontend_t46 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend252 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
34d1d4d2dfc0399b18c10f42cf38840a
  $fToMarkupSVGFrontend_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend39 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
71b9b6d01c26d673b2d2d991fecae70a
  $fToMarkupSVGFrontend_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend43 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a5ced90bf8e3120f63ac589b4bb75e23
  $fToMarkupSVGFrontend_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend49 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0261fcdd76c915c341a96fcbc3b30570
  $fToMarkupSVGFrontend_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend53 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
49c24fe30b39793dc9078b42ba6da60e
  $fToMarkupSVGFrontend_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupSVGFrontend57 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f238f49f98dc8762cd8f08b4654951ca
  $fToMarkupSVGFrontend_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " class=\""#) -}
daecc565a0eee0a44c1d0c84d0a90103
  $fToMarkupSVGFrontend_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "class"#) -}
187b8315780c95b31c5ae44ed69a79ab
  $fToMarkupSVGFrontend_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "div"#) -}
a0ac958525d9e24e8757b95fbffdad75
  $fToMarkupSVGFrontend_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</label>"#) -}
257c65af83a1c092b3c52ae2e7b6a6a8
  $fToMarkupSVGFrontend_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<label"#) -}
07473f97da8a1011f7b00954c7c44d49
  $fToMarkupSVGFrontend_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "label"#) -}
1c16eb5196702d5b3971d1e635c6ad84
  $fToMarkupSVGFrontend_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " for=\""#) -}
2365871ea1f8ece4b0ffab77f0b880dd
  $fToMarkupSVGFrontend_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "for"#) -}
957bddaa2596c4b25ab03e2ddc17a989
  $fToMarkupSVGFrontend_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " src=\""#) -}
a7a72547200cf372c27185e792bc3786
  $fToMarkupSVGFrontend_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "src"#) -}
9b12ba339303608d24929da3ae61b0c1
  $fToMarkupSVGFrontend_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " id=\""#) -}
1be66412e257095dc87e717e95a5ef95
  $fToMarkupSVGFrontend_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "id"#) -}
f0ae54416957dfa2cce91e3497d99f6f
  $fToMarkupSVGFrontend_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " type=\""#) -}
31c2cd9a72ea979e879dc33ccecc04d9
  $fToMarkupSVGFrontend_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " height=\""#) -}
ed89935f036a447ce701a516a8a63803
  $fToMarkupSVGFrontend_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "height"#) -}
029ed870f069a3081c71907381d55839
  $fToMarkupSVGFrontend_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " width=\""#) -}
43761403af510c48a43cc55519b1c753
  $fToMarkupSVGFrontend_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "width"#) -}
9a1dc5b1f911721b0c4c8b1645bd4c00
  $fToMarkupSVGFrontend_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</p>"#) -}
16fb019c3666a5d7ba0c2d222443595c
  $fToMarkupSVGFrontend_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<p"#) -}
e368d445ad2ee3189b9cdb2d783c6d9e
  $fToMarkupSVGFrontend_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "p"#) -}
391ed277d5c96d993cfcf87f968001ae
  $fToMarkupSVGFrontend_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " style=\""#) -}
a77d4cbfdda31f0a9dd4c0b89ab9bfe2
  $fToMarkupSVGFrontend_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "style"#) -}
03913db7cd81dfb44d1508fd21008e9e
  $fToMarkupSVGFrontend_w29 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</body>"#) -}
f7ddcd10e24efa665b878e19579730fd
  $fToMarkupSVGFrontend_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "type"#) -}
6e0ceaa9d45f7d0ccdac54c977369868
  $fToMarkupSVGFrontend_w30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<body"#) -}
9698de33ca27d02a805d61b9960ac339
  $fToMarkupSVGFrontend_w31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
a8ba86b51575529d2e453b2924cf0dc1
  $fToMarkupSVGFrontend_w32 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " name=\""#) -}
2a2daa581698a679cafa8a0967688f29
  $fToMarkupSVGFrontend_w33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
c418897fcda6f965facd3d0a876084bf
  $fToMarkupSVGFrontend_w34 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " content=\""#) -}
3e8f41b0028cf17a2388896be1d934dd
  $fToMarkupSVGFrontend_w35 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "content"#) -}
c734987ea64bcf70d01893899418ae5a
  $fToMarkupSVGFrontend_w36 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " rel=\""#) -}
2f31a42f67047641f5230a0ea8a6f858
  $fToMarkupSVGFrontend_w37 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "rel"#) -}
6e753a9e4eb1a820720229a43df97c3b
  $fToMarkupSVGFrontend_w38 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " href=\""#) -}
ea21189e1f2785599dee8c4bca08d907
  $fToMarkupSVGFrontend_w39 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "href"#) -}
e68c3c8630770f43077f4cb822af5e16
  $fToMarkupSVGFrontend_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " value=\""#) -}
900b1d2496c38cc3aaf0a33924cc0b93
  $fToMarkupSVGFrontend_w40 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</head>"#) -}
726103287e33137153cd7486f8fcbcf8
  $fToMarkupSVGFrontend_w41 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<head"#) -}
1586caa921d64bd2457aa57ebd5bb312
  $fToMarkupSVGFrontend_w42 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "head"#) -}
eaa8c3148bf72c030a8483fcf14f9fd0
  $fToMarkupSVGFrontend_w43 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</html>"#) -}
196f07b24ee3c12c4ef4d8afe2f073a9
  $fToMarkupSVGFrontend_w44 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<html"#) -}
c974f801f6e8a8788113f0bff616de87
  $fToMarkupSVGFrontend_w45 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
d956ebd13663c2c75ad7d180e96a5680
  $fToMarkupSVGFrontend_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "value"#) -}
19b3bf24155209d11d91e76d3e17526b
  $fToMarkupSVGFrontend_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onchange=\""#) -}
0fbea4fcdc3ce0f22935168d0bf68ee2
  $fToMarkupSVGFrontend_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onchange"#) -}
403e554e249408555978f16ab664fa7d
  $fToMarkupSVGFrontend_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</div>"#) -}
6872cdc94ed8638c36d3954163bbdd10
  $fToMarkupSVGFrontend_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<div"#) -}
f4299d36b7d09c3e1ac80615c9cf613a
  $fToMarkupTool :: Text.Blaze.ToMarkup Models.Tool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.Tool
                  Htmls.$fToMarkupTool_$ctoMarkup
                  Htmls.$fToMarkupTool_$ctoMarkup -}
610213b19c121adfc45ec629c0ce47a0
  $fToMarkupTool1 :: Text.Blaze.Internal.Markup
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   Htmls.$fToMarkupTool2) -}
a105d8a4c2c76333bc6529b2513c105d
  $fToMarkupTool10 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool_f
                   Htmls.$fToMarkupTool_f1
                   Htmls.$fToMarkupTool_f2
                   Htmls.$fToMarkupTool11) -}
43bbff388cc743264292fed4210468d4
  $fToMarkupTool100 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend169
                   Htmls.$fToMarkupSVGFrontend165
                   Htmls.$fToMarkupSVGFrontend163
                   Htmls.$fToMarkupTool101) -}
7960eb9cdf5f48892c08af4f7b7c348c
  $fToMarkupTool101 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend159
                   Htmls.$fToMarkupSVGFrontend155
                   Htmls.$fToMarkupSVGFrontend151
                   Htmls.$fToMarkupTool102) -}
b6b1a11dc04c8a0e4f367733dc339b19
  $fToMarkupTool102 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool103) -}
5ea00c876ef32eecbb96f0d5e94cd340
  $fToMarkupTool103 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool104) -}
9df1c4e5ff3e5089ded9d94292f11e27
  $fToMarkupTool104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Draw something on an image or nothing with some friends. Yay!"#) -}
8bf8e4f933b7ed09b67fa6c6de570e76
  $fToMarkupTool105 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend239
                   Htmls.$fToMarkupSVGFrontend235
                   Htmls.$fToMarkupSVGFrontend231
                   Htmls.$fToMarkupTool106) -}
3b6f3d057a00bff96e0bca5f3452ca07
  $fToMarkupTool106 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool107
                   Htmls.$fToMarkupSVGFrontend186) -}
b5877b6b32dc145da2848e3b9c2f5f44
  $fToMarkupTool107 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend169
                   Htmls.$fToMarkupTool_f5
                   Htmls.$fToMarkupTool_f4
                   Htmls.$fToMarkupTool108) -}
033f4a27d3d463ba16a2ced25492786d
  $fToMarkupTool108 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool109) -}
ff1bff4fcfad34d3290699ca3852e1d2
  $fToMarkupTool109 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool110) -}
69ce35341451f7d9e652ab7a006d6855
  $fToMarkupTool11 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool12) -}
833a3f1da8bf38447551ec0e9b7f4218
  $fToMarkupTool110 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupTool111) -}
97a1131c7253e8601bc64ad5f2b63c37
  $fToMarkupTool111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "html, body {width: 100%;height: 100%;margin: 0px;border: 0;overflow: hidden; /*  Disable scrollbars */display: block;  /* No floating content on sides */}"#) -}
fa68d18e97ce775d49e5af0bbd66e3ed
  $fToMarkupTool112 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w10
                   0#
                   ipv }) -}
9fbd5f488804084bbabfbfba3030fcb4
  $fToMarkupTool113 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
31c6c27946e17891391cf8ef61a66a5f
  $fToMarkupTool114 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w10) -}
0ef7d94f8f5b77996eb65d5e54ce24e9
  $fToMarkupTool115 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w11
                   0#
                   ipv }) -}
07c1ec187f883834285f238b33f30a38
  $fToMarkupTool116 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d49a8fdb5194a80316b0a30de2a3d313
  $fToMarkupTool117 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w11) -}
7ab4a05087470dfdf73b3d2082a8a533
  $fToMarkupTool118 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool119) -}
e5432ae143b5e66701764c64324fb7a8
  $fToMarkupTool119 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool120) -}
c2fe9dd8d2d5dd532a68c43dea73c446
  $fToMarkupTool12 :: Text.Blaze.Internal.MarkupM ()
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool13) -}
22b9233aa0f7f15a1f796a70b23c0b50
  $fToMarkupTool120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "?d=' + Date.now(); showPic(); };"#) -}
b309226e53466ff53e44d55b730bcf86
  $fToMarkupTool121 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool122) -}
ca9bb776dd362b4d4378193f08873547
  $fToMarkupTool122 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool123) -}
5cefa2e860222737e5c4bb9d94c4fdaa
  $fToMarkupTool123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "../image/Checkerboard"#) -}
7f8401950989520b90fd8ea63acba599
  $fToMarkupTool124 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool125) -}
eb02d19213555c2886a7842cebe3cd5d
  $fToMarkupTool125 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool126) -}
1588c6f9f55d00163dfa641ecab4ab27
  $fToMarkupTool126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Frame"#) -}
9b190fa5b4b41cc2262fbcb35e5ceae3
  $fToMarkupTool127 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool128) -}
02484371ca916fbe61ac3b8b24b3679c
  $fToMarkupTool128 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool129) -}
261f97a71a0e67d00e6eb44ede3b7905
  $fToMarkupTool129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Spiral"#) -}
10553f5bf1a562c403bd9ba5da2894da
  $fToMarkupTool13 :: Text.Blaze.Internal.ChoiceString
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f4c321bb0a5370b8462fc9a5fdbe15d1
  $fToMarkupTool130 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool131) -}
18699ffe31fb6356e2208eeb68674fc5
  $fToMarkupTool131 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool132) -}
8a8130877c3576f5e32d01b319b01b35
  $fToMarkupTool132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/ZipImage"#) -}
4bb154b5c21fa05a774399c933767e70
  $fToMarkupTool133 :: Text.Blaze.Html.Html
  {- Strictness: x -}
b24ce5a5fc0408ea279fb9a0ebf24738
  $fToMarkupTool134 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool135) -}
e7616478150410314a9d2f5da72b439b
  $fToMarkupTool135 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool136) -}
50aa4af9a5a605dbfcef8941c54ec373
  $fToMarkupTool136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "picUpdate2 = function() { img.src ='"#) -}
cfa4181d91b1766956205b6570d885c0
  $fToMarkupTool137 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool16
                   Htmls.$fToMarkupTool138
                   Htmls.$fToMarkupTool_t1) -}
dea72cb8394d61539779d89fdf6228d5
  $fToMarkupTool138 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3b657f4b93f69b3536b6fe402a5754c1
  $fToMarkupTool139 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool140
                   Htmls.$fToMarkupTool_t2) -}
95d5ff1c09504f39d2a0e695fcf8e679
  $fToMarkupTool14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w
                   0#
                   ipv }) -}
702d9d871c8e4e0b055f852a41540e2a
  $fToMarkupTool140 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f758222229db6b3ebe2c8503fd8e50c4
  $fToMarkupTool141 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool142
                   Htmls.$fToMarkupTool_t3) -}
1b482b86bf4c3ccd78035ac205afd40b
  $fToMarkupTool142 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cd2d34029028c974465dd613cfef5719
  $fToMarkupTool143 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend114
                   Htmls.$fToMarkupSVGFrontend110
                   Htmls.$fToMarkupTool144
                   Htmls.$fToMarkupTool9) -}
3a09a906ce09b32d8be29edb67b09cdf
  $fToMarkupTool144 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool145) -}
7c158cc2d08e83ef3507ba000c606f51
  $fToMarkupTool145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../loading.js"#) -}
51caec639ee8247a3f01b600a3669860
  $fToMarkupTool146 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend100
                   Htmls.$fToMarkupTool147) -}
bf3b39bc54491c49bd021c93e23c0551
  $fToMarkupTool147 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool148) -}
1e859dd9385a2bc39e78e16696c0335f
  $fToMarkupTool148 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool165
                   Htmls.$fToMarkupTool149) -}
37bf6c87cf1714bc3b34e4bdb8c30751
  $fToMarkupTool149 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool158
                   Htmls.$fToMarkupTool150) -}
01f924dc226090ceab960753489e943a
  $fToMarkupTool15 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4d8e27ecbd59367d92035d4b6bdedd00
  $fToMarkupTool150 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend68
                   Htmls.$fToMarkupTool151) -}
6478ce703fc586f1b7327ff58fa7a616
  $fToMarkupTool151 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool152) -}
a6907c81f562170ec2bfa70f6fcaa258
  $fToMarkupTool152 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend42
                   Htmls.$fToMarkupSVGFrontend38
                   Htmls.$fToMarkupTool156
                   Htmls.$fToMarkupTool153) -}
53abd1af28fb5f336004fbe7445af188
  $fToMarkupTool153 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool154
                   Htmls.$fToMarkupTool59) -}
ff50544d47eb49ccc2d00c72e33898f5
  $fToMarkupTool154 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool155) -}
c7c7a400d4fb6482f98efd9e3852f1c1
  $fToMarkupTool155 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "picUpdate2()"#) -}
e4ff00a152534fd61b44d41fde2af2a7
  $fToMarkupTool156 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool157) -}
74720e03d28ba61a765dbf072fb9b2f8
  $fToMarkupTool157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Combine!"#) -}
dd8ff8401e551e6d45278ea9a1cd1f5e
  $fToMarkupTool158 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool163
                   Htmls.$fToMarkupTool159) -}
ac614b92f6c8cf023491e39c0b5bc6ae
  $fToMarkupTool159 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool160) -}
260f73c280c149991f3afacabd8aa521
  $fToMarkupTool16 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Htmls.$fToMarkupTool_w) -}
55a3d8accea89e43c853bafb5dea5430
  $fToMarkupTool160 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend52
                   Htmls.$fToMarkupSVGFrontend48
                   Htmls.$fToMarkupTool161
                   Htmls.$fToMarkupTool34) -}
470f0a251c3a43e0bd3d106d5ca10685
  $fToMarkupTool161 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool162) -}
c0e95419d9ea2df08151a15bacee83e9
  $fToMarkupTool162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic2(this.files[0],'False')"#) -}
31c1c348d4ae1b3fdf3ba01f6a067858
  $fToMarkupTool163 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool164) -}
33c567875a252a73741a52a39851e9c8
  $fToMarkupTool164 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "col-sm-6 col-md-6 col-lg-4"#) -}
4aca2430b7e6b952635a5b068d5687ed
  $fToMarkupTool165 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool163
                   Htmls.$fToMarkupTool166) -}
da027ed515c5be51a4725d9ce91d6028
  $fToMarkupTool166 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool167) -}
413b30be2110e6b3431e6b62e9ed7eb3
  $fToMarkupTool167 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend52
                   Htmls.$fToMarkupSVGFrontend48
                   Htmls.$fToMarkupTool168
                   Htmls.$fToMarkupTool34) -}
148effdbba36e37fc6d39513f5cec6fb
  $fToMarkupTool168 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool169) -}
cb4dde16b32936988d8d80dc47a9721a
  $fToMarkupTool169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic2(this.files[0],'True')"#) -}
c121f91435a56ff8b4d4944f88463837
  $fToMarkupTool17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w1
                   0#
                   ipv }) -}
4f80a6f49894ac031d288e5a10a239ab
  $fToMarkupTool170 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend169
                   Htmls.$fToMarkupSVGFrontend165
                   Htmls.$fToMarkupSVGFrontend163
                   Htmls.$fToMarkupTool171) -}
b0d6639f6b1c3062b686cd4cbe320b02
  $fToMarkupTool171 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend159
                   Htmls.$fToMarkupSVGFrontend155
                   Htmls.$fToMarkupSVGFrontend151
                   Htmls.$fToMarkupTool172) -}
c9caa56aa304ad1be8978abab46dc0d4
  $fToMarkupTool172 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool173) -}
300e757b65eb7e1f9ff99e633558f903
  $fToMarkupTool173 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool174) -}
7fbb0ba183f7b7578aff8b104e726a78
  $fToMarkupTool174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Combine two pictures to create a cool new image"#) -}
153a31a3723db1a0043d48b882c52350
  $fToMarkupTool175 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend176
                   Htmls.$fToMarkupTool176
                   Htmls.$fToMarkupSVGFrontend_t30) -}
b6615d0ca04357ad42ed03dafcdb7a20
  $fToMarkupTool176 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
85db8a652595021fd1cea31918b76acf
  $fToMarkupTool177 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend180
                   Htmls.$fToMarkupTool178
                   Htmls.$fToMarkupSVGFrontend_t31) -}
7fb18c5ad7bf09e8656a95df19a363c9
  $fToMarkupTool178 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0202bc35dc4d83e6fa794e9cae4e5ac5
  $fToMarkupTool179 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend184
                   Htmls.$fToMarkupTool180
                   Htmls.$fToMarkupSVGFrontend_t32) -}
a78956bc0fe0836446fed9c7826d010e
  $fToMarkupTool18 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7a07155ed51ae0f855187758175b1b53
  $fToMarkupTool180 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3ee1a829c601e49f9cf0524324dec5e7
  $fToMarkupTool181 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend246
                   Htmls.$fToMarkupTool182
                   Htmls.$fToMarkupSVGFrontend_t44) -}
55886ee23cbd207bac8fb462f5f21272
  $fToMarkupTool182 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t44 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
1825fdb0ee572db3bde796c922312500
  $fToMarkupTool183 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend250
                   Htmls.$fToMarkupTool184
                   Htmls.$fToMarkupSVGFrontend_t45) -}
409eb913b66fee29e7c5e990a1a317ff
  $fToMarkupTool184 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t45 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
475d15a3f61d4382c03faf09de88641b
  $fToMarkupTool185 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupSVGFrontend254
                   Htmls.$fToMarkupTool186
                   Htmls.$fToMarkupSVGFrontend_t46) -}
4345897d6744eff5b54475b865db9468
  $fToMarkupTool186 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupSVGFrontend_t46 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7f9e8c431f388eb8792cf5ab53a55f32
  $fToMarkupTool19 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w1) -}
cdcca110f72fcd10115fc2163e377bcc
  $fToMarkupTool2 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend251
                   Htmls.$fToMarkupSVGFrontend247
                   Htmls.$fToMarkupSVGFrontend243
                   Htmls.$fToMarkupTool3) -}
a3b5d50c16276d7577e01fb44e3c995c
  $fToMarkupTool20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w2
                   0#
                   ipv }) -}
956cb11d0b7a3a38d1304344ce2c89ed
  $fToMarkupTool21 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
54a3392a3d9c585d0c871bd95d3f03dc
  $fToMarkupTool22 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w2) -}
172cdd9f96e0d1fff3fc3a329c512f9d
  $fToMarkupTool23 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool24) -}
192c495f29fd3b697ce5921a15f34e85
  $fToMarkupTool24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "text/javascript"#) -}
d5c4edf9ea350413a9bc7c0dff623669
  $fToMarkupTool25 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool26) -}
c22a9ba30e146195c0e09d9d62d369e5
  $fToMarkupTool26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../canvas.js"#) -}
6af1a891b5987b1966a5879c6e5d2465
  $fToMarkupTool27 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend100
                   Htmls.$fToMarkupTool28) -}
b7468cccad44774c6747dad43f53433a
  $fToMarkupTool28 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool29) -}
19e182e9f974c8a73e48f643804a8564
  $fToMarkupTool29 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool76
                   Htmls.$fToMarkupTool30) -}
7a2a2a3fa0eb8829e5ea1861b891a68a
  $fToMarkupTool3 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool105
                   Htmls.$fToMarkupTool4) -}
0c37ce4b04d7eac10f746b21247c1d66
  $fToMarkupTool30 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool55
                   Htmls.$fToMarkupTool31) -}
8da5dfba424d2e36bacea0b0ba0124b5
  $fToMarkupTool31 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool53
                   Htmls.$fToMarkupTool32) -}
294f80f819e060fdbed262e5ff883b5b
  $fToMarkupTool32 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool33) -}
4e5809cfca708a36438155d64542e036
  $fToMarkupTool33 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend52
                   Htmls.$fToMarkupSVGFrontend48
                   Htmls.$fToMarkupTool51
                   Htmls.$fToMarkupTool34) -}
e6307f3ac9a5d7138b5a7ad83378213a
  $fToMarkupTool34 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool47
                   Htmls.$fToMarkupTool43
                   Htmls.$fToMarkupTool41
                   Htmls.$fToMarkupTool35) -}
d2344ecaeabae316162ba11796d9672d
  $fToMarkupTool35 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend32
                   Htmls.$fToMarkupSVGFrontend28
                   Htmls.$fToMarkupTool39
                   Htmls.$fToMarkupTool36) -}
1185620069aef758e498c9178b2f5875
  $fToMarkupTool36 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool37
                   Text.Blaze.Html5.input) -}
f9610cb8c2fc59a6e0090b1ad0ac13e2
  $fToMarkupTool37 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool38) -}
a0fd159c7590735831b3d1034af2e6e7
  $fToMarkupTool38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "btn btn-default"#) -}
87c0f8d9dbcfe69dfae4f02641de05f2
  $fToMarkupTool39 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool40) -}
154bae9159ccb13bf1887e961cd52c46
  $fToMarkupTool4 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend181
                   Htmls.$fToMarkupSVGFrontend177
                   Htmls.$fToMarkupSVGFrontend173
                   Htmls.$fToMarkupTool5) -}
ff6d47e903df7afbeef238e47f66edf3
  $fToMarkupTool40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "file"#) -}
df8b0e82252263e8a1b1e08864b7bae2
  $fToMarkupTool41 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool42) -}
d22d9147b01c8d1813d797edda5364dc
  $fToMarkupTool42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "image/jpeg"#) -}
7ff3d6315a02cb10570d1a33b27eeee8
  $fToMarkupTool43 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool46
                   Htmls.$fToMarkupTool45
                   Htmls.$fToMarkupTool_t4) -}
e048e9721fe55741f6cefde7c74bd9c2
  $fToMarkupTool44 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w3
                   0#
                   ipv }) -}
f803ffdd0286774d25e800c2986f68b4
  $fToMarkupTool45 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c0067cb4c788a5e7a8bf85c01302e71b
  $fToMarkupTool46 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w3) -}
374e8f278b9ff956ffccede0dafcc48b
  $fToMarkupTool47 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool50
                   Htmls.$fToMarkupTool49
                   Htmls.$fToMarkupTool_t5) -}
f11cf382c1bc3df3840bcbf3144dcf3a
  $fToMarkupTool48 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w4
                   0#
                   ipv }) -}
160d59b4cf3c9867ad4a8965f17317cc
  $fToMarkupTool49 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ca04ef56a6628b1d80f26d6f158efad2
  $fToMarkupTool5 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool100
                   Htmls.$fToMarkupTool6) -}
5a68f8e20f9eddfa25ea71ce7a889899
  $fToMarkupTool50 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w4) -}
115aba988a50e50ae973d6a7b05ab8d4
  $fToMarkupTool51 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool52) -}
4cccc4d2389077cf4f8e3b99e59567f2
  $fToMarkupTool52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handlePic(this.files[0])"#) -}
76b96373ce547a112da6c040beffcc06
  $fToMarkupTool53 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool54) -}
740714872cdb247ac86cf70068aaa06e
  $fToMarkupTool54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "col-sm-12 col-md-4 col-lg 4"#) -}
8a64784d6e3832cd1359d7a10bb8cb3d
  $fToMarkupTool55 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool74
                   Htmls.$fToMarkupTool56) -}
99b4bd85f3728f9bb56b7173f907a2d5
  $fToMarkupTool56 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool57) -}
eb8d16d079a7c66f6f15a0777de27b27
  $fToMarkupTool57 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend42
                   Htmls.$fToMarkupSVGFrontend38
                   Htmls.$fToMarkupTool72
                   Htmls.$fToMarkupTool58) -}
0531ee753ac001fd8d06a6c6ecf16209
  $fToMarkupTool58 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool62
                   Htmls.$fToMarkupTool59) -}
73953b71234e24212d8cc1443979848a
  $fToMarkupTool59 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend32
                   Htmls.$fToMarkupSVGFrontend28
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool36) -}
19e6c97fb80bfeeedf841450126865cd
  $fToMarkupTool6 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool84
                   Htmls.$fToMarkupTool7) -}
d413bdd25ec0cb6a32ae50089388850b
  $fToMarkupTool60 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool61) -}
1aa45b15219cdef7abd5f5d3e80295dd
  $fToMarkupTool61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "button"#) -}
63ec1cbcb9e0d0abbf07fff59438ab3f
  $fToMarkupTool62 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool63) -}
2ce2cafe0aed72db5e8e52557163ef26
  $fToMarkupTool63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "showPic()"#) -}
765b7c9d411cfbc9de0f3abf8c4b8ab5
  $fToMarkupTool64 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool67
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool_t6) -}
d0911d3421376e788ed962b752800a96
  $fToMarkupTool65 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w5
                   0#
                   ipv }) -}
7b18d6dfdb9801dfc35cf4b251955d8e
  $fToMarkupTool66 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6b95c8eae135c37ac0acca63d6cb4a51
  $fToMarkupTool67 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w5) -}
c36772fa5ca7f98890a48f0d4fa241ff
  $fToMarkupTool68 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool71
                   Htmls.$fToMarkupTool70
                   Htmls.$fToMarkupTool_t7) -}
a77c9661079ae96fa2cf0d4a2b58ff4e
  $fToMarkupTool69 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w6
                   0#
                   ipv }) -}
5f4408d3ba436d861c72285df75d7389
  $fToMarkupTool7 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool27
                   Htmls.$fToMarkupTool8) -}
048766afab86b15c91c827ecc883bf89
  $fToMarkupTool70 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
5955310a8d4d50a10cc342a9694321d2
  $fToMarkupTool71 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w6) -}
3e4f1e3a5e2d6487c1ea231b9807a346
  $fToMarkupTool72 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool73) -}
ef3e7206566301606f051d494a914812
  $fToMarkupTool73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Current Img"#) -}
e0db762ea87451939172d657545ec728
  $fToMarkupTool74 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool75) -}
3d52372342f225ab618a42a934bc50c6
  $fToMarkupTool75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "col-sm-6 col-md-4 col-lg-4"#) -}
06514baa8906674d1c308226e66156cc
  $fToMarkupTool76 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupTool74
                   Htmls.$fToMarkupTool77) -}
7020853909b08857212af3bbbb711e12
  $fToMarkupTool77 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool78) -}
9d58af89179c1154265fc68dfb4913c2
  $fToMarkupTool78 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend42
                   Htmls.$fToMarkupSVGFrontend38
                   Htmls.$fToMarkupTool82
                   Htmls.$fToMarkupTool79) -}
503d63ff762a3189a6867b05c1632caa
  $fToMarkupTool79 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool80
                   Htmls.$fToMarkupTool59) -}
7cb81bcbe8caf7ac8f1715af85288188
  $fToMarkupTool8 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend114
                   Htmls.$fToMarkupSVGFrontend110
                   Htmls.$fToMarkupTool25
                   Htmls.$fToMarkupTool9) -}
85cccdc912eb5b71cd6f9f1108d89721
  $fToMarkupTool80 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool81) -}
af0767e9782645b792913ca7d5129a1f
  $fToMarkupTool81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "picUpdate()"#) -}
856378ec2333aa6492bc181e22a9208a
  $fToMarkupTool82 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool83) -}
d5d89fa3ca9eb3f270225db14838181f
  $fToMarkupTool83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Update This Img"#) -}
f70477ee2c175dc1b3a96eb0d4a25948
  $fToMarkupTool84 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend22
                   Htmls.$fToMarkupSVGFrontend18
                   Htmls.$fToMarkupSVGFrontend100
                   Htmls.$fToMarkupTool85) -}
8a60c94a2c25ffc48be2cc8888c8582d
  $fToMarkupTool85 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupSVGFrontend64
                   Htmls.$fToMarkupSVGFrontend60
                   Htmls.$fToMarkupSVGFrontend56
                   Htmls.$fToMarkupTool86) -}
3a1b589de9d2ad25c227e969d31f26bd
  $fToMarkupTool86 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend124
                   Htmls.$fToMarkupSVGFrontend120
                   Htmls.$fToMarkupSVGFrontend118
                   Htmls.$fToMarkupTool87) -}
0c7dcbd42f9b51f47e8c20e965ae22a5
  $fToMarkupTool87 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool96
                   Htmls.$fToMarkupTool92
                   Htmls.$fToMarkupTool88
                   Htmls.$fToMarkupTool12) -}
30abeae9aca3fdde30fb5dc6cd115032
  $fToMarkupTool88 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool91
                   Htmls.$fToMarkupTool90
                   Htmls.$fToMarkupTool_t8) -}
aca84d5d5000ba66d64616b2c7520cbe
  $fToMarkupTool89 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w7
                   0#
                   ipv }) -}
fa8d89126f1a805b7370c3f04ecaaf69
  $fToMarkupTool9 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupSVGFrontend32
                   Htmls.$fToMarkupSVGFrontend28
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool10) -}
0a6b388bf9f552d76f0b21a2fa5a63f4
  $fToMarkupTool90 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e28e405ef6c986cdcc7a0afaec423a67
  $fToMarkupTool91 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w7) -}
3c7d40b3e046c7a74e97fffd2e319388
  $fToMarkupTool92 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool95
                   Htmls.$fToMarkupTool94
                   Htmls.$fToMarkupTool_t9) -}
bd4a29d16c925709d030f8e5a295edad
  $fToMarkupTool93 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w8
                   0#
                   ipv }) -}
4dc870c65f0bc258248c4a5eaac61220
  $fToMarkupTool94 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8ec768b0f6a42c25011f0ac60e7f10c0
  $fToMarkupTool95 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w8) -}
dedaf5bbf445828b37623bc53d117a33
  $fToMarkupTool96 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool99
                   Htmls.$fToMarkupTool98
                   Htmls.$fToMarkupTool_t10) -}
c8e1d093d4ffc9a669dc9eb7ab6eaa6b
  $fToMarkupTool97 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w9
                   0#
                   ipv }) -}
5ddfae527b55093b8dd8d506c5f8122c
  $fToMarkupTool98 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7c781916c245969b1f01f5e3ea997c47
  $fToMarkupTool99 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w9) -}
4107284857fcf94e7150ba79036bf254
  $fToMarkupTool_$ctoMarkup ::
    Models.Tool -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Models.Tool) ->
                 case ds of wild {
                   DEFAULT
                   -> Text.Blaze.Internal.Append
                        @ ()
                        @ ()
                        @ ()
                        Text.Blaze.Html5.docType
                        (Text.Blaze.Internal.Parent
                           @ ()
                           @ ()
                           Htmls.$fToMarkupTool185
                           Htmls.$fToMarkupTool183
                           Htmls.$fToMarkupTool181
                           (Text.Blaze.Internal.Append
                              @ ()
                              @ ()
                              @ ()
                              Htmls.$fToMarkupSVGFrontend185
                              (Text.Blaze.Internal.Parent
                                 @ ()
                                 @ ()
                                 Htmls.$fToMarkupTool179
                                 Htmls.$fToMarkupTool177
                                 Htmls.$fToMarkupTool175
                                 (Text.Blaze.Internal.Append
                                    @ ()
                                    @ ()
                                    @ ()
                                    Htmls.$fToMarkupTool170
                                    (Text.Blaze.Internal.Append
                                       @ ()
                                       @ ()
                                       @ ()
                                       Htmls.$fToMarkupTool84
                                       (Text.Blaze.Internal.Append
                                          @ ()
                                          @ ()
                                          @ ()
                                          Htmls.$fToMarkupTool146
                                          (Text.Blaze.Internal.Append
                                             @ ()
                                             @ ()
                                             @ ()
                                             Htmls.$fToMarkupTool143
                                             (Text.Blaze.Internal.Parent
                                                @ ()
                                                @ ()
                                                Htmls.$fToMarkupTool141
                                                Htmls.$fToMarkupTool139
                                                Htmls.$fToMarkupTool137
                                                (Text.Blaze.Internal.external
                                                   @ ()
                                                   (Text.Blaze.Internal.Append
                                                      @ ()
                                                      @ ()
                                                      @ ()
                                                      Htmls.$fToMarkupTool134
                                                      (Text.Blaze.Internal.Append
                                                         @ ()
                                                         @ ()
                                                         @ ()
                                                         (case wild of wild1 {
                                                            DEFAULT -> Htmls.$fToMarkupTool133
                                                            Models.ZipImage
                                                            -> Htmls.$fToMarkupTool130
                                                            Models.Spiral -> Htmls.$fToMarkupTool127
                                                            Models.Frame -> Htmls.$fToMarkupTool124
                                                            Models.Checkerboard
                                                            -> Htmls.$fToMarkupTool121 })
                                                         Htmls.$fToMarkupTool118)))))))))))
                   Models.Draw -> Htmls.$fToMarkupTool1 }) -}
810c7358a0176d04380e17175dd72c40
  $fToMarkupTool_f :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool21
                   Htmls.$fToMarkupTool_t3) -}
1ebf0a8e5b6b956790f6e2a7a5dfbc37
  $fToMarkupTool_f1 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool18
                   Htmls.$fToMarkupTool_t2) -}
5ffde90598899e41551e5cdaca5e61cc
  $fToMarkupTool_f2 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool16
                   Htmls.$fToMarkupTool15
                   Htmls.$fToMarkupTool_t1) -}
f5c7dd56834d5dbcb3c7b598789e8312
  $fToMarkupTool_f4 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool114
                   Htmls.$fToMarkupTool113
                   Htmls.$fToMarkupTool_t11) -}
ab4a686203782254853bc82487df129a
  $fToMarkupTool_f5 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool117
                   Htmls.$fToMarkupTool116
                   Htmls.$fToMarkupTool_t12) -}
2265a05c4411c07a93ff800d47f493d6
  $fToMarkupTool_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool14 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
53b07a5bda3efb89cb6e9a650c87878b
  $fToMarkupTool_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool97 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
53c4f4490a175b96c33ced62d1dff325
  $fToMarkupTool_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool112 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
932a89c520728ba46b3745451c87db41
  $fToMarkupTool_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool115 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8c94dc281480d58a5636aece5cc1fb9c
  $fToMarkupTool_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool17 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
61bc1be6ad52d23927caa66323fe9617
  $fToMarkupTool_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool20 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b6baaadc17a792b20f22840ebd53fa0b
  $fToMarkupTool_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool44 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f3eb66f301ad73b2a3b1115c6695e0e0
  $fToMarkupTool_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool48 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
71181951b247bb4a8f1f53688dc420dd
  $fToMarkupTool_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool65 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ade5f89341d450ef5fa84ce49d330b43
  $fToMarkupTool_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool69 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
26dc107a8c72a1fe09f02cb4d6471783
  $fToMarkupTool_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool89 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7f1af68378f48f1017aaa790fb29ce62
  $fToMarkupTool_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool93 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
21f9aef4806a48ce32bdfcf5505803e9
  $fToMarkupTool_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</script>"#) -}
78e3b58f04980cbdf3283f8363b32ac5
  $fToMarkupTool_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<script"#) -}
51c83fa9c557018a836a89a084193b85
  $fToMarkupTool_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</style>"#) -}
2f045038688133027162421228da3be2
  $fToMarkupTool_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<style"#) -}
2b42487d1ff1323830bbedb6ab16c5c9
  $fToMarkupTool_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "script"#) -}
b97448fad7d8eaaba6e95700b220c514
  $fToMarkupTool_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " accept=\""#) -}
a41e81a532186686510577b08fe6f380
  $fToMarkupTool_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "accept"#) -}
2c7b07e9dc469ae3e4a24e8f56e78398
  $fToMarkupTool_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onclick=\""#) -}
d3c85c97cf40f4a29cb0247e5328487c
  $fToMarkupTool_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onclick"#) -}
20f16e784664d2c131b53d9633c38f09
  $fToMarkupTool_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</canvas>"#) -}
659e8bf73d04db45981facf4378336de
  $fToMarkupTool_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<canvas"#) -}
0c9d45519b0fbebb939bb19f7b5bb800
  $fToMarkupTool_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "canvas"#) -}
b560d6c50b62ad60fac135c6e6127903
  $tc'SVGFrontend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   999751289505326480##
                   15597188623895879401##
                   Htmls.$trModule
                   Htmls.$tc'SVGFrontend1) -}
bba898225ce0d37e071624b2813be7d2
  $tc'SVGFrontend1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SVGFrontend"#) -}
ae2c78ceaceb816b111b7bfa336cbc52
  $tcHTMLBlaze :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9628222344370543580##
                   11878326890833965114##
                   Htmls.$trModule
                   Htmls.$tcHTMLBlaze1) -}
aef42fe5888635e38b6e97f09c71763e
  $tcHTMLBlaze1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HTMLBlaze"#) -}
8085284ff7102221e578505f2c17815b
  $tcSVGFrontend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3998441285238964465##
                   3536815585197993286##
                   Htmls.$trModule
                   Htmls.$tcSVGFrontend1) -}
f0269e8ad5f1201a2f42310db199f078
  $tcSVGFrontend1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SVGFrontend"#) -}
ba6a1502fbaa82cbd601bc24169e59d9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Htmls.$trModule2 Htmls.$trModule1) -}
0385035c88528c73deba5021f1bd2973
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Htmls"#) -}
f143abfa009aaefbeceddebca1155e13
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-fnBZLECtUoD0q3S6USYHa"#) -}
60161d756921a96bbf96a16b111863b7
  $w$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Text.Blaze.ToMarkup a) (w1 :: a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                      @ ()
                      Htmls.$fMimeRenderTYPEHTMLBlazea1
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                      (Text.Blaze.toMarkup @ a w w1))) -}
6653e4735380b4e095ed3f83e412e2f6
  data HTMLBlaze
efce44bbf2f73112bf281992f0bbf0fc
  data SVGFrontend = SVGFrontend
instance Servant.API.ContentTypes.Accept [TYPE, Htmls.HTMLBlaze]
  = Htmls.$fAcceptTYPEHTMLBlaze
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, Text.Blaze.Internal.MarkupM]
  = Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, .]
  = Htmls.$fMimeRenderTYPEHTMLBlazea
instance Text.Blaze.ToMarkup [Htmls.SVGFrontend]
  = Htmls.$fToMarkupSVGFrontend
instance Text.Blaze.ToMarkup [Models.Tool] = Htmls.$fToMarkupTool
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

