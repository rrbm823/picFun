
==================== FINAL INTERFACE ====================
2017-05-16 19:29:53.27797 UTC

interface picFun-0.1.0.0-41oGHt6VUNM2sRBPQhbfR4:Htmls [orphan module] 8002
  interface hash: a457c27fbbbc830c897c5ba894e7fe23
  ABI hash: 628a6e608f030e5f143ef969d904b116
  export-list hash: e9fbf2db5f3b48751cd0f7963f8c10a6
  orphan hash: f9b1736af2e5ad9fe1198f7c84196859
  flag hash: d81c5bd899ee9bae2e83b7d3242d4f56
  sig of: Nothing
  used TH splices: False
  where
exports:
  Htmls.HTMLBlaze
module dependencies: Models
package dependencies: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed
                      aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-41oGHt6VUNM2sRBPQhbfR4:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html 288dbf097dbd0ff17b50c3c1330477db
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html.Renderer.Utf8 5b26c380f5278a1c6a43c894929cec9d
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5 a78d4ae47bedb2841a6332de06a90707
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5.Attributes 7657fa2d710bc2ae02fd88196e7a43b7
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze e36927cead1a7aeccd029225c1dba5b4
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze.Internal 52ba665013f4dfa6d731e8584348806e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media 07625d65eebeff997f1e9bc032ba3b6e
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media.MediaType d33bfddaa1306ad267f9a6689258b69b
import  -/  Models 45414748ce5dbed63e7834bae7ad0241
  exports: bb6a71d68146e844a8e5d95f330b2975
  Tool aff0d301bcce0d4f42159023dece0897
  ZipImage 0a43062219ccd6002b0a1d5336be8040
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes f46c3af563d8e4f630ae29c1d96b30a9
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
a8027e2b0a9fb98866a2e43080d4fcc6
  $fAcceptTYPEHTMLBlaze ::
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  DFunId
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Htmls.HTMLBlaze>_N)) -}
c24f790ef668a867325025c3cb4d44eb
  $fAcceptTYPEHTMLBlaze1 ::
    Network.HTTP.Media.MediaType.Internal.MediaType
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "text"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 let {
                   addr#1 :: GHC.Prim.Addr# = "html"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#1
                        ipv of wild1 { (#,#) ds2 ds6 ->
                 case Network.HTTP.Media.MediaType.$w//
                        addr#
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds4)
                        addr#1
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds6) of ww10 { (#,,#) ww11 ww12 ww13 ->
                 case Network.HTTP.Media.MediaType.$w/:
                        ww11
                        ww12
                        ww13
                        Htmls.$fAcceptTYPEHTMLBlaze3
                        Htmls.$fAcceptTYPEHTMLBlaze2 of ww7 { (#,,#) ww8 ww9 ww1 ->
                 Network.HTTP.Media.MediaType.Internal.MediaType
                   ww8
                   ww9
                   ww1 } } } } }) -}
7a2ea6f51b6136437012a60248703168
  $fAcceptTYPEHTMLBlaze2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "utf-8"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
fc1d9afe65fff19af832a71841302e0b
  $fAcceptTYPEHTMLBlaze3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "charset"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fAcceptTYPEHTMLBlaze_$ccontentType ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze1) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazeMarkupM ::
    Servant.API.ContentTypes.MimeRender
      Htmls.HTMLBlaze Text.Blaze.Html.Html
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Text.Blaze.Html.Html
                  Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                    `cast`
                  (Sym (Servant.API.ContentTypes.N:Accept[0]
                            <*>_N <Htmls.HTMLBlaze>_N))
                  Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Text.Blaze.Html.Html -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (eta :: Text.Blaze.Internal.Markup) ->
                 Data.ByteString.Builder.toLazyByteString
                   (letrec {
                      go3 :: forall b.
                             Data.ByteString.Builder.Internal.Builder
                             -> Text.Blaze.Internal.MarkupM b
                             -> Data.ByteString.Builder.Internal.Builder
                        {- Arity: 2, Inline: NOINLINE -}
                      = \ @ b
                          (attrs :: Data.ByteString.Builder.Internal.Builder)
                          (ds1 :: Text.Blaze.Internal.MarkupM b) ->
                        case ds1 of wild {
                          Text.Blaze.Internal.Parent b10 ds2 open close content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString open)))
                                        attrs)
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '>'#)))
                                  (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString close)))
                          Text.Blaze.Internal.CustomParent b10 tag content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Types.Char
                                                    Data.ByteString.Builder.Prim.charUtf8
                                                    (GHC.Types.C# '<'#))
                                                 (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                              attrs)
                                           (Data.ByteString.Builder.Prim.primBounded
                                              @ GHC.Types.Char
                                              Data.ByteString.Builder.Prim.charUtf8
                                              (GHC.Types.C# '>'#)))
                                        (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                                     (let {
                                        bs5 :: Data.ByteString.Internal.ByteString
                                        = Data.ByteString.Internal.packChars
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b2 ->
                                                GHC.CString.unpackFoldrCString# @ b2 "</"#))
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (forall r.
                                           Data.ByteString.Builder.Internal.BuildStep r
                                           -> Data.ByteString.Builder.Internal.BuildStep r)
                                        @ Data.ByteString.Builder.Internal.Builder
                                        (\ (ds2 :: forall r.
                                                   Data.ByteString.Builder.Internal.BuildStep r
                                                   -> Data.ByteString.Builder.Internal.BuildStep
                                                        r) ->
                                         ds2)
                                          `cast`
                                        (<forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                        (\ @ r
                                           (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                           (br :: Data.ByteString.Builder.Internal.BufferRange)
                                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                         case k of k1 { DEFAULT ->
                                         case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                         case GHC.Classes.leInt
                                                (GHC.Types.I# dt3)
                                                Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                           GHC.Types.False
                                           -> (GHC.Base.$
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                 @ (GHC.Types.IO
                                                      (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (GHC.Base.returnIO
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (Data.ByteString.Builder.Internal.InsertChunk
                                                    @ r
                                                    dt4
                                                    wild1
                                                    k1))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                eta1
                                           GHC.Types.True
                                           -> let {
                                                ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                                = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                              } in
                                              let {
                                                isize :: GHC.Types.Int = GHC.Types.I# dt3
                                              } in
                                              let {
                                                op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                              } in
                                              let {
                                                ip :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr
                                                    @ GHC.Word.Word8
                                                    @ b2
                                                    (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (GHC.Types.I# dt2)
                                              } in
                                              let {
                                                op' :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b2 op isize
                                              } in
                                              case GHC.Ptr.$fOrdPtr_$c<=
                                                     @ GHC.Word.Word8
                                                     (op' @ GHC.Word.Word8)
                                                     (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                                GHC.Types.False
                                                -> case ip
                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                   case GHC.Ptr.plusPtr
                                                          @ GHC.Prim.Any
                                                          @ GHC.Word.Word8
                                                          (ip @ GHC.Prim.Any)
                                                          isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                   (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                      @ r
                                                      (Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt9)
                                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                         (eta2 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                       (GHC.Base.thenIO
                                                          @ ()
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r)
                                                          (GHC.ForeignPtr.touchForeignPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (k1 br1))
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                               r>_R)
                                                         eta2)
                                                        `cast`
                                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                       ->_R Sym (GHC.Types.N:IO[0]
                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                        r>_R))
                                                      wild2)
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } }
                                                GHC.Types.True
                                                -> (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (Foreign.Marshal.Utils.copyBytes
                                                         @ GHC.Word.Word8
                                                         op
                                                         (ip @ GHC.Word.Word8)
                                                         isize)
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1
                                                            (case op'
                                                                    @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                             Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt5 }))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } } } } })
                                          `cast`
                                        (forall (r :: <*>_N).
                                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                               (Data.ByteString.Builder.Prim.primBounded
                                  @ GHC.Types.Char
                                  Data.ByteString.Builder.Prim.charUtf8
                                  (GHC.Types.C# '>'#))
                          Text.Blaze.Internal.Leaf ds2 begin end
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds3 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds3)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r ->
                                      Data.ByteString.Builder.Internal.byteStringCopyStep
                                        @ r
                                        (Text.Blaze.Internal.getUtf8ByteString begin)))
                                  attrs)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString end)))
                          Text.Blaze.Internal.CustomLeaf tag close
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '<'#))
                                     (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                  attrs)
                               (case close of wild1 {
                                  GHC.Types.False
                                  -> Data.ByteString.Builder.Prim.primBounded
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.charUtf8
                                       (GHC.Types.C# '>'#)
                                  GHC.Types.True
                                  -> let {
                                       bs5 :: Data.ByteString.Internal.ByteString
                                       = Data.ByteString.Internal.packChars
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1 ->
                                               GHC.CString.unpackFoldrCString# @ b1 " />"#))
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r)
                                       @ Data.ByteString.Builder.Internal.Builder
                                       (\ (ds2 :: forall r.
                                                  Data.ByteString.Builder.Internal.BuildStep r
                                                  -> Data.ByteString.Builder.Internal.BuildStep
                                                       r) ->
                                        ds2)
                                         `cast`
                                       (<forall r.
                                         Data.ByteString.Builder.Internal.BuildStep r
                                         -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                       (\ @ r
                                          (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                          (br :: Data.ByteString.Builder.Internal.BufferRange)
                                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case bs5 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                        case k of k1 { DEFAULT ->
                                        case br of wild3 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                        case GHC.Classes.leInt
                                               (GHC.Types.I# dt3)
                                               Data.ByteString.Builder.Internal.maximalCopySize of wild4 {
                                          GHC.Types.False
                                          -> (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                @ (GHC.Types.IO
                                                     (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (GHC.Base.returnIO
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (Data.ByteString.Builder.Internal.InsertChunk
                                                   @ r
                                                   dt4
                                                   wild2
                                                   k1))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1
                                          GHC.Types.True
                                          -> let {
                                               ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                               = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                             } in
                                             let {
                                               isize :: GHC.Types.Int = GHC.Types.I# dt3
                                             } in
                                             let {
                                               op :: GHC.Ptr.Ptr GHC.Word.Word8
                                               = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                             } in
                                             let {
                                               ip :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr
                                                   @ GHC.Word.Word8
                                                   @ b1
                                                   (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (GHC.Types.I# dt2)
                                             } in
                                             let {
                                               op' :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                             } in
                                             case GHC.Ptr.$fOrdPtr_$c<=
                                                    @ GHC.Word.Word8
                                                    (op' @ GHC.Word.Word8)
                                                    (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild5 {
                                               GHC.Types.False
                                               -> case ip
                                                         @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                  case GHC.Ptr.plusPtr
                                                         @ GHC.Prim.Any
                                                         @ GHC.Word.Word8
                                                         (ip @ GHC.Prim.Any)
                                                         isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                  (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                     @ r
                                                     (Data.ByteString.Builder.Internal.BufferRange
                                                        dt7
                                                        dt9)
                                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                        (eta2 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1 br1))
                                                        `cast`
                                                      (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)
                                                        eta2)
                                                       `cast`
                                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                                       r>_R))
                                                     wild3)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } }
                                               GHC.Types.True
                                               -> (GHC.Base.thenIO
                                                     @ ()
                                                     @ (Data.ByteString.Builder.Internal.BuildSignal
                                                          r)
                                                     (Foreign.Marshal.Utils.copyBytes
                                                        @ GHC.Word.Word8
                                                        op
                                                        (ip @ GHC.Word.Word8)
                                                        isize)
                                                     (GHC.Base.thenIO
                                                        @ ()
                                                        @ (Data.ByteString.Builder.Internal.BuildSignal
                                                             r)
                                                        (GHC.ForeignPtr.touchForeignPtr
                                                           @ GHC.Word.Word8
                                                           ifp)
                                                        (k1
                                                           (case op'
                                                                   @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                            Data.ByteString.Builder.Internal.BufferRange
                                                              dt7
                                                              dt5 }))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } } } } })
                                         `cast`
                                       (forall (r :: <*>_N).
                                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)) })
                          Text.Blaze.Internal.Content content
                          -> Text.Blaze.Renderer.Utf8.fromChoiceString content
                          Text.Blaze.Internal.Comment comment
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (let {
                                     bs5 :: Data.ByteString.Internal.ByteString
                                     = Data.ByteString.Internal.packChars
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "<!-- "#))
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds2 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds2)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r
                                        (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                        (br :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case k of k1 { DEFAULT ->
                                      case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                      case GHC.Classes.leInt
                                             (GHC.Types.I# dt3)
                                             Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                        GHC.Types.False
                                        -> (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                              @ (GHC.Types.IO
                                                   (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (GHC.Base.returnIO
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (Data.ByteString.Builder.Internal.InsertChunk
                                                 @ r
                                                 dt4
                                                 wild1
                                                 k1))
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                             eta1
                                        GHC.Types.True
                                        -> let {
                                             ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                           } in
                                           let {
                                             isize :: GHC.Types.Int = GHC.Types.I# dt3
                                           } in
                                           let {
                                             op :: GHC.Ptr.Ptr GHC.Word.Word8
                                             = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                           } in
                                           let {
                                             ip :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr
                                                 @ GHC.Word.Word8
                                                 @ b1
                                                 (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                    @ GHC.Word.Word8
                                                    ifp)
                                                 (GHC.Types.I# dt2)
                                           } in
                                           let {
                                             op' :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                           } in
                                           case GHC.Ptr.$fOrdPtr_$c<=
                                                  @ GHC.Word.Word8
                                                  (op' @ GHC.Word.Word8)
                                                  (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                             GHC.Types.False
                                             -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                case GHC.Ptr.plusPtr
                                                       @ GHC.Prim.Any
                                                       @ GHC.Word.Word8
                                                       (ip @ GHC.Prim.Any)
                                                       isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                   @ r
                                                   (Data.ByteString.Builder.Internal.BufferRange
                                                      dt7
                                                      dt9)
                                                   (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                      (eta2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                    (GHC.Base.thenIO
                                                       @ ()
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       (GHC.ForeignPtr.touchForeignPtr
                                                          @ GHC.Word.Word8
                                                          ifp)
                                                       (k1 br1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta2)
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R))
                                                   wild2)
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } }
                                             GHC.Types.True
                                             -> (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (Foreign.Marshal.Utils.copyBytes
                                                      @ GHC.Word.Word8
                                                      op
                                                      (ip @ GHC.Word.Word8)
                                                      isize)
                                                   (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (GHC.ForeignPtr.touchForeignPtr
                                                         @ GHC.Word.Word8
                                                         ifp)
                                                      (k1
                                                         (case op'
                                                                 @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                          Data.ByteString.Builder.Internal.BufferRange
                                                            dt7
                                                            dt5 }))))
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } } } } })
                                       `cast`
                                     (forall (r :: <*>_N).
                                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString comment))
                               (let {
                                  bs5 :: Data.ByteString.Internal.ByteString
                                  = Data.ByteString.Internal.packChars
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 " -->"#))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds2 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds2)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r
                                     (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                     (br :: Data.ByteString.Builder.Internal.BufferRange)
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                   case k of k1 { DEFAULT ->
                                   case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                   case GHC.Classes.leInt
                                          (GHC.Types.I# dt3)
                                          Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                     GHC.Types.False
                                     -> (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                           @ (GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (GHC.Base.returnIO
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (Data.ByteString.Builder.Internal.InsertChunk
                                              @ r
                                              dt4
                                              wild1
                                              k1))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                          eta1
                                     GHC.Types.True
                                     -> let {
                                          ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                          = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                        } in
                                        let {
                                          isize :: GHC.Types.Int = GHC.Types.I# dt3
                                        } in
                                        let {
                                          op :: GHC.Ptr.Ptr GHC.Word.Word8
                                          = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                        } in
                                        let {
                                          ip :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 ->
                                            GHC.Ptr.plusPtr
                                              @ GHC.Word.Word8
                                              @ b1
                                              (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                 @ GHC.Word.Word8
                                                 ifp)
                                              (GHC.Types.I# dt2)
                                        } in
                                        let {
                                          op' :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 -> GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                        } in
                                        case GHC.Ptr.$fOrdPtr_$c<=
                                               @ GHC.Word.Word8
                                               (op' @ GHC.Word.Word8)
                                               (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                          GHC.Types.False
                                          -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                             case GHC.Ptr.plusPtr
                                                    @ GHC.Prim.Any
                                                    @ GHC.Word.Word8
                                                    (ip @ GHC.Prim.Any)
                                                    isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                             (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                @ r
                                                (Data.ByteString.Builder.Internal.BufferRange
                                                   dt7
                                                   dt9)
                                                (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                   (eta2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                 (GHC.Base.thenIO
                                                    @ ()
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r)
                                                    (GHC.ForeignPtr.touchForeignPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (k1 br1))
                                                   `cast`
                                                 (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)
                                                   eta2)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R))
                                                wild2)
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } }
                                          GHC.Types.True
                                          -> (GHC.Base.thenIO
                                                @ ()
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                (Foreign.Marshal.Utils.copyBytes
                                                   @ GHC.Word.Word8
                                                   op
                                                   (ip @ GHC.Word.Word8)
                                                   isize)
                                                (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (GHC.ForeignPtr.touchForeignPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (k1
                                                      (case op'
                                                              @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                       Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt5 }))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } } } } })
                                    `cast`
                                  (forall (r :: <*>_N).
                                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R)))
                          Text.Blaze.Internal.Append b10 c0 h1 h2
                          -> Data.ByteString.Builder.Internal.append
                               (go3 @ b10 attrs h1)
                               (go3 @ c0 attrs h2)
                          Text.Blaze.Internal.AddAttribute ds2 key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString key)))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.AddCustomAttribute key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Types.Char
                                                 Data.ByteString.Builder.Prim.charUtf8
                                                 (GHC.Types.C# ' '#))
                                              (Text.Blaze.Renderer.Utf8.fromChoiceString key))
                                           (let {
                                              bs5 :: Data.ByteString.Internal.ByteString
                                              = Data.ByteString.Internal.packChars
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b1 ->
                                                      GHC.CString.unpackFoldrCString# @ b1 "=\""#))
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (forall r.
                                                 Data.ByteString.Builder.Internal.BuildStep r
                                                 -> Data.ByteString.Builder.Internal.BuildStep r)
                                              @ Data.ByteString.Builder.Internal.Builder
                                              (\ (ds2 :: forall r.
                                                         Data.ByteString.Builder.Internal.BuildStep
                                                           r
                                                         -> Data.ByteString.Builder.Internal.BuildStep
                                                              r) ->
                                               ds2)
                                                `cast`
                                              (<forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                              (\ @ r
                                                 (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                                 (br :: Data.ByteString.Builder.Internal.BufferRange)
                                                 (eta1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                               case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                               case k of k1 { DEFAULT ->
                                               case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                               case GHC.Classes.leInt
                                                      (GHC.Types.I# dt3)
                                                      Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                                 GHC.Types.False
                                                 -> (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       @ (GHC.Types.IO
                                                            (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (GHC.Base.returnIO
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (Data.ByteString.Builder.Internal.InsertChunk
                                                          @ r
                                                          dt4
                                                          wild1
                                                          k1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta1
                                                 GHC.Types.True
                                                 -> let {
                                                      ifp :: GHC.ForeignPtr.ForeignPtr
                                                               GHC.Word.Word8
                                                      = GHC.ForeignPtr.ForeignPtr
                                                          @ GHC.Word.Word8
                                                          dt
                                                          dt1
                                                    } in
                                                    let {
                                                      isize :: GHC.Types.Int = GHC.Types.I# dt3
                                                    } in
                                                    let {
                                                      op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                      = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                                    } in
                                                    let {
                                                      ip :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (GHC.Types.I# dt2)
                                                    } in
                                                    let {
                                                      op' :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          op
                                                          isize
                                                    } in
                                                    case GHC.Ptr.$fOrdPtr_$c<=
                                                           @ GHC.Word.Word8
                                                           (op' @ GHC.Word.Word8)
                                                           (GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              dt5) of wild4 {
                                                      GHC.Types.False
                                                      -> case ip
                                                                @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                         case GHC.Ptr.plusPtr
                                                                @ GHC.Prim.Any
                                                                @ GHC.Word.Word8
                                                                (ip @ GHC.Prim.Any)
                                                                isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                         (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                            @ r
                                                            (Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt9)
                                                            (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                               (eta2 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                             (GHC.Base.thenIO
                                                                @ ()
                                                                @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r)
                                                                (GHC.ForeignPtr.touchForeignPtr
                                                                   @ GHC.Word.Word8
                                                                   ifp)
                                                                (k1 br1))
                                                               `cast`
                                                             (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)
                                                               eta2)
                                                              `cast`
                                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                            wild2)
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } }
                                                      GHC.Types.True
                                                      -> (GHC.Base.thenIO
                                                            @ ()
                                                            @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                            (Foreign.Marshal.Utils.copyBytes
                                                               @ GHC.Word.Word8
                                                               op
                                                               (ip @ GHC.Word.Word8)
                                                               isize)
                                                            (GHC.Base.thenIO
                                                               @ ()
                                                               @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                    r)
                                                               (GHC.ForeignPtr.touchForeignPtr
                                                                  @ GHC.Word.Word8
                                                                  ifp)
                                                               (k1
                                                                  (case op'
                                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                                   Data.ByteString.Builder.Internal.BufferRange
                                                                     dt7
                                                                     dt5 }))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } } } } })
                                                `cast`
                                              (forall (r :: <*>_N).
                                               <Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R))))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.Empty
                          -> Data.ByteString.Builder.Internal.empty }
                    } in
                    go3 @ () Data.ByteString.Builder.Internal.empty eta)) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazea ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze a
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dToMarkup :: Text.Blaze.ToMarkup a).
                  @ *
                  @ Htmls.HTMLBlaze
                  @ a
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender @ a $dToMarkup)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender @ a $dToMarkup) -}
c8d4b63fd3bd0c152675b732f1fb9253
  $fMimeRenderTYPEHTMLBlazea1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazea2 ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dToMarkup :: Text.Blaze.ToMarkup a)
                   (eta :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType eta) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazea_$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Text.Blaze.ToMarkup a)
                   (w1 :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (w2 :: a) ->
                 Htmls.$w$cmimeRender @ a w w2) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  $fMimeRenderTYPEHTMLBlazea_$cp1MimeRender ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Htmls.$fMimeRenderTYPEHTMLBlazea2
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Blaze.ToMarkup a>_R
                 ->_R Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N)) -}
d8d4cfb98f3d41acd0f4c863eb81fd20
  $fMimeRenderTYPEHTMLBlazea_go3 ::
    Data.ByteString.Builder.Internal.Builder
    -> Text.Blaze.Internal.MarkupM b
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: NOINLINE -}
ef1b7080316360cb7eedd4d11cb3b3de
  $fToMarkupTool :: Text.Blaze.ToMarkup Models.Tool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.Tool
                  Htmls.$fToMarkupTool_$ctoMarkup
                  Htmls.$fToMarkupTool_$ctoMarkup -}
208cd7e083d625c912e9f41ccfe6b176
  $fToMarkupTool1 :: Text.Blaze.Internal.Markup
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   Htmls.$fToMarkupTool2) -}
97083f5652040946fb4ee924ec731179
  $fToMarkupTool10 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool41
                   Htmls.$fToMarkupTool37
                   Htmls.$fToMarkupTool33
                   Htmls.$fToMarkupTool11) -}
45ecd61ee3f41a77c1db23989db6db94
  $fToMarkupTool100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w17
                   0#
                   ipv }) -}
1ab706af2908396b3d291d62d5f9a87f
  $fToMarkupTool101 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ec900ea2726e130037aa4712684afcac
  $fToMarkupTool102 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w17) -}
cfa300b33d2178f85cecb4fc2725e3ac
  $fToMarkupTool103 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool106
                   Htmls.$fToMarkupTool105
                   Htmls.$fToMarkupTool_t19) -}
813154ab478503fddd727a19f7e562f7
  $fToMarkupTool104 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w18
                   0#
                   ipv }) -}
8ef3db228120b0431d2f36acb83e24fa
  $fToMarkupTool105 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4d47afa1a27f1604c4b11e522a4648e4
  $fToMarkupTool106 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w18) -}
574145eb4cb1efe6dd585d9ace54da22
  $fToMarkupTool107 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool119
                   Htmls.$fToMarkupTool115
                   Htmls.$fToMarkupTool111
                   Htmls.$fToMarkupTool108) -}
2e9df141969ba00d3ed9fdd30af94147
  $fToMarkupTool108 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool109) -}
0fd2167f5fa31b1406e98f5027da8518
  $fToMarkupTool109 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool110) -}
c34c062a2bbfd68133a47d33fc6cb4fc
  $fToMarkupTool11 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool29
                   Htmls.$fToMarkupTool25
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool12) -}
5eeed70ac9bb13acbe6d3fc834b220b3
  $fToMarkupTool110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Combine two pictures to create a cool new image"#) -}
e596ecdd06ec09e175a6dbb1117ccb4d
  $fToMarkupTool111 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool114
                   Htmls.$fToMarkupTool113
                   Htmls.$fToMarkupTool_t20) -}
6712250c6bb954803742885aff2f8771
  $fToMarkupTool112 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w19
                   0#
                   ipv }) -}
d1d4fc52a84a9f111fde12ee65051f87
  $fToMarkupTool113 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7f3927f0fa8674a1986a3ee61355e4ac
  $fToMarkupTool114 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w19) -}
0f1e7418d3496c9d07103ffe1b4694d0
  $fToMarkupTool115 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool118
                   Htmls.$fToMarkupTool117
                   Htmls.$fToMarkupTool_t21) -}
c9ea9d28c7bf915dd266358f60f7595d
  $fToMarkupTool116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w20
                   0#
                   ipv }) -}
7324b894c0354ea06e3d058a0c5329f7
  $fToMarkupTool117 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b28ec7605fc6c12ab6613fefc2db3cc7
  $fToMarkupTool118 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w20) -}
30acca810dd4527f7d9a4f4ab8be938f
  $fToMarkupTool119 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool121
                   Htmls.$fToMarkupTool_t22) -}
be4d874483afabbb172cfc2ed79f37b7
  $fToMarkupTool12 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool15
                   Htmls.$fToMarkupTool13
                   Text.Blaze.Html5.img) -}
5a70ee26cd3e1897e46dd00350170f7f
  $fToMarkupTool120 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w21
                   0#
                   ipv }) -}
ab871d758398c489e0d274848044119f
  $fToMarkupTool121 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
39c7b9a378dabddfdf2658ea47f9a3b0
  $fToMarkupTool122 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w21) -}
9fbd4df8b206f7181edaacc414c3f589
  $fToMarkupTool123 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool125
                   Htmls.$fToMarkupTool_t23) -}
56bd95b437095cd81a5c12e5b285ce26
  $fToMarkupTool124 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w22
                   0#
                   ipv }) -}
2b9d542974ce7f58b3d996c442962bf3
  $fToMarkupTool125 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
fc0487c8a554683f5e7a3dd60fac5666
  $fToMarkupTool126 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w22) -}
acffd070a26612da16f7090d95d85625
  $fToMarkupTool127 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool129
                   Htmls.$fToMarkupTool_t24) -}
3a95447d4d68cb1219ca4d6157527319
  $fToMarkupTool128 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w23
                   0#
                   ipv }) -}
2e7a4b059e1bbe574c0e5c22149f4539
  $fToMarkupTool129 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
893f093f8e2303cd2beaf1c6536d9520
  $fToMarkupTool13 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool14) -}
ce4a790c8b425f7fd06ea029fccd6723
  $fToMarkupTool130 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w23) -}
88d5d8d4f3424671c2fa2dfc0e9dc0bb
  $fToMarkupTool131 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool134
                   Htmls.$fToMarkupTool133
                   Htmls.$fToMarkupTool_t25) -}
1fefdb8f58d208f6109a2b4d5194b612
  $fToMarkupTool132 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w24
                   0#
                   ipv }) -}
3e1c6202657c413739e1e400773ed4b5
  $fToMarkupTool133 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7b0cca8305273562d59c68e7ea88dae2
  $fToMarkupTool134 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w24) -}
fd255d2f414c4c1b3765eda120130869
  $fToMarkupTool135 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool158
                   Htmls.$fToMarkupTool154
                   Htmls.$fToMarkupTool150
                   Htmls.$fToMarkupTool136) -}
8a894b66e081d92b169954c28e91cd26
  $fToMarkupTool136 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool_f
                   Htmls.$fToMarkupTool_f1
                   Htmls.$fToMarkupTool_f2
                   Htmls.$fToMarkupTool137) -}
d52faad013f0b69156c9b34f008a1b4f
  $fToMarkupTool137 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool138) -}
1b42a9ba092be3d874ec2ab32ee9fda7
  $fToMarkupTool138 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool139) -}
93b76c5d74a255ae3c3f955c917d4abc
  $fToMarkupTool139 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupTool140) -}
80ac6a9f0ccd38a35fcc7a860bc5507d
  $fToMarkupTool14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/ZipImage"#) -}
595ec65ed6a2ba8b1f863d822ee7b66a
  $fToMarkupTool140 :: [GHC.Types.Char]
0afcb013efee2c4480998397e1c8478c
  $fToMarkupTool141 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w25
                   0#
                   ipv }) -}
75be41d2d19f84282cdfbd44d0f2e4ab
  $fToMarkupTool142 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7cd18bbe71e043ef98065e64674c1a97
  $fToMarkupTool143 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w25) -}
0a1ee3ab0eec13429ca2f153042df65d
  $fToMarkupTool144 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w26
                   0#
                   ipv }) -}
10e8ca785e707eb80ab340dafb50f37f
  $fToMarkupTool145 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
648373724c596b52d624c5571e0e4629
  $fToMarkupTool146 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w26) -}
b8755af15cd3ec0729721a3b56155e96
  $fToMarkupTool147 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w27
                   0#
                   ipv }) -}
5e069fb994f2196431c24c164831e0aa
  $fToMarkupTool148 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
67dbf2930df9a0ec1c789f6f8cdb7708
  $fToMarkupTool149 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w27) -}
18d1b350d18fa10224258099e779dd62
  $fToMarkupTool15 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool18
                   Htmls.$fToMarkupTool17
                   Htmls.$fToMarkupTool_t1) -}
1c7c7fead1f454f9acf4fb7d84654908
  $fToMarkupTool150 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool153
                   Htmls.$fToMarkupTool152
                   Htmls.$fToMarkupTool_t29) -}
84191418a635444bc8c125c314c0e9ab
  $fToMarkupTool151 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w28
                   0#
                   ipv }) -}
a991467eef4100800803b77483e44e1b
  $fToMarkupTool152 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f6d44a03efe0fbcd1bd1f396122b91b6
  $fToMarkupTool153 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w28) -}
a7c0c3a741265bedf93911a46c157f89
  $fToMarkupTool154 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool157
                   Htmls.$fToMarkupTool156
                   Htmls.$fToMarkupTool_t30) -}
cb5719947dabc536eed86f8b8ded31b0
  $fToMarkupTool155 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w29
                   0#
                   ipv }) -}
fd75524ccba03bb543d7ffd0f5f5de51
  $fToMarkupTool156 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f96580ce2e7d328a6f7cc252057fcd38
  $fToMarkupTool157 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w29) -}
b32dcb6e4b2109f749f2e2ab155da4d0
  $fToMarkupTool158 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool161
                   Htmls.$fToMarkupTool160
                   Htmls.$fToMarkupTool_t31) -}
796e2b8014e9ccadfa9e7cfe5e8f114c
  $fToMarkupTool159 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w30
                   0#
                   ipv }) -}
d108a77b6cebec8f68bd6b8b427960d8
  $fToMarkupTool16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w
                   0#
                   ipv }) -}
8b203153b504fe0e228766105a350c68
  $fToMarkupTool160 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c436447b9591cc38a2c5a1aeec145ec3
  $fToMarkupTool161 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w30) -}
aa2b041b6e2f7bcebebd7995ff153d7c
  $fToMarkupTool162 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool165
                   Htmls.$fToMarkupTool164
                   Htmls.$fToMarkupTool_t32) -}
5c48f75a48b4ada490cb6de68229fc36
  $fToMarkupTool163 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w31
                   0#
                   ipv }) -}
a8fcd02492ff6c3d2814882332c826ed
  $fToMarkupTool164 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2364f5b328e62af22416a4821160a39c
  $fToMarkupTool165 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w31) -}
e5868a72f24fa908e6134437f706257c
  $fToMarkupTool166 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool169
                   Htmls.$fToMarkupTool168
                   Htmls.$fToMarkupTool_t33) -}
07569494f770a755c8eeea1446963e77
  $fToMarkupTool167 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w32
                   0#
                   ipv }) -}
6b31fc2f86433bc3dcc7e7e7946f694b
  $fToMarkupTool168 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b91921fa8fa02accd9b064204e8e7050
  $fToMarkupTool169 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w32) -}
a05f105df2c79d742fc68496f8e20050
  $fToMarkupTool17 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e2d9af6b72a61ff6c309576bf49dbe75
  $fToMarkupTool170 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool173
                   Htmls.$fToMarkupTool172
                   Htmls.$fToMarkupTool_t34) -}
a090df772b3911f984babec49da8a519
  $fToMarkupTool171 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w33
                   0#
                   ipv }) -}
47a508944af70bc266e3e975ac9173d7
  $fToMarkupTool172 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c79fe173306bc683ce0745c77d530712
  $fToMarkupTool173 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w33) -}
8ee2e9dc26219cc3700058759e1cb29d
  $fToMarkupTool174 :: Text.Blaze.Internal.Markup
  {- Strictness: x -}
1817709a8330365007f6b2879b66b59c
  $fToMarkupTool18 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Htmls.$fToMarkupTool_w) -}
ffa361fe75b4e55025f13808cdabca64
  $fToMarkupTool19 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool21
                   Htmls.$fToMarkupTool_t2) -}
8d015b02df752f636a707ea6452da9ae
  $fToMarkupTool2 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool170
                   Htmls.$fToMarkupTool166
                   Htmls.$fToMarkupTool162
                   Htmls.$fToMarkupTool3) -}
ee3d1e4909f2df5db71a5167e27ac892
  $fToMarkupTool20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w1
                   0#
                   ipv }) -}
3df83a05090b7f79c541f92ef09d0ca2
  $fToMarkupTool21 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
600b4dfadf9d10758c1675c3eadc07c3
  $fToMarkupTool22 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w1) -}
a911031fd9925ab2fa2c4b617b4410f4
  $fToMarkupTool23 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool24) -}
3efccea54620b7d46f82705fdeef60ef
  $fToMarkupTool24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "width: 50%; height: 50%"#) -}
ff387f61db17346343f1299a139989a5
  $fToMarkupTool25 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool28
                   Htmls.$fToMarkupTool27
                   Htmls.$fToMarkupTool_t3) -}
39fe1ea6d06b12fc4b141876879ed33b
  $fToMarkupTool26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w2
                   0#
                   ipv }) -}
d8d7402da7ab5f9620944812631e97b2
  $fToMarkupTool27 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
9680f62ae1f8287282c6f84c5d428fd1
  $fToMarkupTool28 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w2) -}
9774675fb642dbcfa9572eaaeb72ce73
  $fToMarkupTool29 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool32
                   Htmls.$fToMarkupTool31
                   Htmls.$fToMarkupTool_t4) -}
e0ed681b68e033b1c338315addee4b44
  $fToMarkupTool3 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool135
                   Htmls.$fToMarkupTool4) -}
93e079e88a6be80ae0b4359ef92ae6e7
  $fToMarkupTool30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w3
                   0#
                   ipv }) -}
8d644c4a2c4ed23a9b218e93c8ba5a63
  $fToMarkupTool31 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
236cc5426969e8ab3b46faa7d1b89e23
  $fToMarkupTool32 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w3) -}
c08a4d94459a656231af124915976c6e
  $fToMarkupTool33 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool36
                   Htmls.$fToMarkupTool35
                   Htmls.$fToMarkupTool_t5) -}
bb6e9e7cafdcf726d0312e1eb25b9973
  $fToMarkupTool34 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w4
                   0#
                   ipv }) -}
2f90edf2324e511a235ecb74406aec22
  $fToMarkupTool35 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
a7d7dd6af7a886977cbcb32b90b76273
  $fToMarkupTool36 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w4) -}
2e4cb36798ac3e8fa048d059cb602965
  $fToMarkupTool37 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool40
                   Htmls.$fToMarkupTool39
                   Htmls.$fToMarkupTool_t6) -}
dfbcdea3532d41093b47f962d4b60c18
  $fToMarkupTool38 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w5
                   0#
                   ipv }) -}
c1161381b2188b71fe0c899d3b58a417
  $fToMarkupTool39 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
1ea3cbb955e406e5f0e71fdf2f262aef
  $fToMarkupTool4 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool131
                   Htmls.$fToMarkupTool127
                   Htmls.$fToMarkupTool123
                   Htmls.$fToMarkupTool5) -}
ba0f91cb0e370cfc2c9bd6d8becf8466
  $fToMarkupTool40 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w5) -}
8cabe7d4f60da52f7f5a5dbdab60a8ca
  $fToMarkupTool41 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool44
                   Htmls.$fToMarkupTool43
                   Htmls.$fToMarkupTool_t7) -}
1330910575994d74c7ee975fe461e6ed
  $fToMarkupTool42 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w6
                   0#
                   ipv }) -}
940282aa7fe831037d3578e3cdedddb8
  $fToMarkupTool43 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2b6cc84eaf26d0d4613ef20a4e8ed2df
  $fToMarkupTool44 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w6) -}
bf8a4d7403f763563dab4b0119e7a7a3
  $fToMarkupTool45 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool41
                   Htmls.$fToMarkupTool37
                   Htmls.$fToMarkupTool33
                   Htmls.$fToMarkupTool46) -}
0bdfbde397165707316351f64afa1859
  $fToMarkupTool46 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool80
                   Htmls.$fToMarkupTool47) -}
bbdbe0303db99100f6a3a6f315d74ff7
  $fToMarkupTool47 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool76
                   Htmls.$fToMarkupTool72
                   Htmls.$fToMarkupTool70
                   Htmls.$fToMarkupTool48) -}
7cf6dc566e28dfa134897ba5c7775501
  $fToMarkupTool48 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool62
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool49) -}
dfd4b026176281f1f89fdff9d072224e
  $fToMarkupTool49 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool56
                   Htmls.$fToMarkupTool52
                   Htmls.$fToMarkupTool50
                   Text.Blaze.Html5.input) -}
40d7e936d5b7456ebf1d9ff5da88664c
  $fToMarkupTool5 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool107
                   Htmls.$fToMarkupTool6) -}
c5862c1174526fa77b5d2376d2c7b868
  $fToMarkupTool50 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool51) -}
e35c1a593b43c81b9bb54484e76edf19
  $fToMarkupTool51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "file"#) -}
e9013e1cce96b401bca842380a7dabbe
  $fToMarkupTool52 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool55
                   Htmls.$fToMarkupTool54
                   Htmls.$fToMarkupTool_t8) -}
f170b67a28508b315860739ad42c8fdd
  $fToMarkupTool53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w7
                   0#
                   ipv }) -}
6ed6a2c430f3df64cd42f7b04ff23439
  $fToMarkupTool54 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4bb4202aae9eda0fd6edf787f19b0813
  $fToMarkupTool55 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w7) -}
1e0a87ce787fd24f77087964408d773c
  $fToMarkupTool56 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool58
                   Htmls.$fToMarkupTool_t9) -}
a4fe7c7d78e3da7272c6f85f849f3e12
  $fToMarkupTool57 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w8
                   0#
                   ipv }) -}
70a96903464fb194bcf24fdaeff2704e
  $fToMarkupTool58 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
16545f0016f4a1c047e34c0981604d43
  $fToMarkupTool59 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w8) -}
6ba5c5137a7c4552019c957abe7c1bf6
  $fToMarkupTool6 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.br
                   Htmls.$fToMarkupTool7) -}
d3fbe60e17245f77a160a1e27ba92fdf
  $fToMarkupTool60 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool61) -}
ac69f3a6f2fe7a775680aa9da6f23ade
  $fToMarkupTool61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "image/jpeg"#) -}
ef3719116ecc67007d6dcf0e7cd13677
  $fToMarkupTool62 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool65
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool_t10) -}
dd08556fec266864e78202bcbd4d6255
  $fToMarkupTool63 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w9
                   0#
                   ipv }) -}
dd492f5376aef21e4c6246a070fbd07c
  $fToMarkupTool64 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f5aa16016cf75c96fdf367f6ab0f9ffc
  $fToMarkupTool65 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w9) -}
c1329a6c4dd1c4a0d15d94fbd1a48f71
  $fToMarkupTool66 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool69
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool_t11) -}
b1e6b93f3764e3fea6a731d726334e9a
  $fToMarkupTool67 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w10
                   0#
                   ipv }) -}
630a1a67b96751c07b310f3dce64df5c
  $fToMarkupTool68 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
29214da50e2a5dd4379cd751a6d51ba9
  $fToMarkupTool69 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w10) -}
ba88a159c0e7ce4e3c3aa2c2093558d8
  $fToMarkupTool7 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool103
                   Htmls.$fToMarkupTool99
                   Htmls.$fToMarkupTool95
                   Htmls.$fToMarkupTool8) -}
e3b9e07da8286f8bb1e0ae2fa0f406eb
  $fToMarkupTool70 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool71) -}
610816b706689b0a701dd9a9b082e5f5
  $fToMarkupTool71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleRight(this.files[0])"#) -}
20ced8b02b34cebb50fd2c7c2615ae4a
  $fToMarkupTool72 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool75
                   Htmls.$fToMarkupTool74
                   Htmls.$fToMarkupTool_t12) -}
f983478140e5cd2e62173c772222b799
  $fToMarkupTool73 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w11
                   0#
                   ipv }) -}
145b59ca3b4f334015f75baef1ed7669
  $fToMarkupTool74 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
df6bbbcc64ec2da819f3a2e0b4e797d8
  $fToMarkupTool75 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w11) -}
430486305d044182a7369eb721c3004f
  $fToMarkupTool76 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool79
                   Htmls.$fToMarkupTool78
                   Htmls.$fToMarkupTool_t13) -}
0658f4cffc9487cf0b841fdc77f8a665
  $fToMarkupTool77 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w12
                   0#
                   ipv }) -}
85746f13e11842da323f75d032544e90
  $fToMarkupTool78 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f89d142a406c711e2dee8e9e7f5171d7
  $fToMarkupTool79 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w12) -}
19c38577ed84255f23aba58da26a5a04
  $fToMarkupTool8 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool91
                   Htmls.$fToMarkupTool87
                   Htmls.$fToMarkupTool83
                   Htmls.$fToMarkupTool9) -}
6ec490323d63544cd5f53d70158f58b0
  $fToMarkupTool80 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool76
                   Htmls.$fToMarkupTool72
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool48) -}
1ec86052c799e7483290cd7f527f6611
  $fToMarkupTool81 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool82) -}
88b090b1d8907b7ea9a4328a1ff3d3ae
  $fToMarkupTool82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleLeft(this.files[0])"#) -}
8923b2aea71ed017182571e191d3666f
  $fToMarkupTool83 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool86
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool_t14) -}
16f1bfc2538fb529ef1ddea2e9a9b918
  $fToMarkupTool84 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w13
                   0#
                   ipv }) -}
f7da5b18251d5551f79ffebd77a53288
  $fToMarkupTool85 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7138e1e8512045cdc9d73a074404f3a6
  $fToMarkupTool86 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w13) -}
0da2e1c51ac8df12945d3b21ea763947
  $fToMarkupTool87 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool90
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool_t15) -}
904e2c5d0f8623c6dad16114829f6137
  $fToMarkupTool88 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w14
                   0#
                   ipv }) -}
db5bf3183d25e804356503b97eefe1dd
  $fToMarkupTool89 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
9a18d707222d6a769b1ccc84ff49434c
  $fToMarkupTool9 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool45
                   Htmls.$fToMarkupTool10) -}
c2538f001fd4f102e26ad4751c26d09c
  $fToMarkupTool90 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w14) -}
797f3b054beafeaa91b01afd7aabcf9e
  $fToMarkupTool91 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool94
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool_t16) -}
9779909ca427bcd009f3b23872980f59
  $fToMarkupTool92 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w15
                   0#
                   ipv }) -}
a8cb7cbadbef05f5a50fa814c81b64b7
  $fToMarkupTool93 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0ebbe5aaa7ea553d73109407af4913db
  $fToMarkupTool94 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w15) -}
ed5bdd30901024b0e24b119fed2c7dd2
  $fToMarkupTool95 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool98
                   Htmls.$fToMarkupTool97
                   Htmls.$fToMarkupTool_t17) -}
9069dede3aa803b11b8f7c8169f72d4d
  $fToMarkupTool96 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w16
                   0#
                   ipv }) -}
9412ef05bdaaa98f6ee8b18a6f770dd7
  $fToMarkupTool97 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bd339be0e98185c9d0103ba2a10de377
  $fToMarkupTool98 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w16) -}
517e262bad78f5f21a11ee6cfeb4422c
  $fToMarkupTool99 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool102
                   Htmls.$fToMarkupTool101
                   Htmls.$fToMarkupTool_t18) -}
ef179714bbd434b9d5dcbefeed2a145b
  $fToMarkupTool_$ctoMarkup ::
    Models.Tool -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Models.Tool) ->
                 case ds of wild {
                   DEFAULT -> Htmls.$fToMarkupTool174
                   Models.ZipImage -> Htmls.$fToMarkupTool1 }) -}
180faef0d5fad721870a1ade4121a13a
  $fToMarkupTool_f :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool149
                   Htmls.$fToMarkupTool148
                   Htmls.$fToMarkupTool_t28) -}
3154e4bd191a6f720458e67417d55f45
  $fToMarkupTool_f1 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool146
                   Htmls.$fToMarkupTool145
                   Htmls.$fToMarkupTool_t27) -}
700f030d776552f98b78bc42081bc336
  $fToMarkupTool_f2 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool143
                   Htmls.$fToMarkupTool142
                   Htmls.$fToMarkupTool_t26) -}
ff17fd628efe1cdb9847dbb224607325
  $fToMarkupTool_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool16 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e86fb49a451d6850aa1efe63a331abdd
  $fToMarkupTool_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool63 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
36ac4004c16f70aee8b6f499dd6e9b7c
  $fToMarkupTool_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool67 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c459606af8cb6bcaa6aa3b6817f5652a
  $fToMarkupTool_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool73 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8a2f2d7c2596195e67e743249fb99b22
  $fToMarkupTool_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool77 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9afcfe67935d8d2aea783868fc287a00
  $fToMarkupTool_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool84 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d91b3446150639ec312ba67e8a2c1b5a
  $fToMarkupTool_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool88 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f4c9a536a4f2fdbf785d7f6902730b0e
  $fToMarkupTool_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool92 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
82ad2d4755e5dfbc169d01143eeb430c
  $fToMarkupTool_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool96 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
bf1029a209b6208d2944f5a262954269
  $fToMarkupTool_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool100 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c431be36827fe9d6ca4ac3be94267954
  $fToMarkupTool_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool104 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ec8ddd71df3209de77f7d361e6f91da5
  $fToMarkupTool_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool20 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
dab05fff8b291683ba57dc5057809497
  $fToMarkupTool_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool112 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a39bf43baad6c080d74c37dd42ecd48f
  $fToMarkupTool_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool116 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
118102759f5793708363562fa9f84b03
  $fToMarkupTool_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool120 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1930e36748f271f3f93c5b3bd6626bce
  $fToMarkupTool_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool124 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
210fc96cceeb76631699afafc174cb4f
  $fToMarkupTool_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool128 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e11d233b0667c8dc5d9ad613265cd991
  $fToMarkupTool_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool132 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8796b42cb95416a467213f3bfe290e26
  $fToMarkupTool_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool141 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
520ae88fd94bccd9f1f00873c6e2d3f1
  $fToMarkupTool_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool144 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
00d3d4020a950423ce3dd54bfc279cdb
  $fToMarkupTool_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool147 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cbfd85861626ea0097bfdbbf5b91ee7c
  $fToMarkupTool_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool151 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
41e0bbc00fc4226189999792710373c8
  $fToMarkupTool_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool26 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1de9949fd934ee286c7d890283dbf6fe
  $fToMarkupTool_t30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool155 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0afff344c8c9c71b92fed1a8a6eb745d
  $fToMarkupTool_t31 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool159 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d0176cf467e0686af0bc13c8b747ff32
  $fToMarkupTool_t32 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool163 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6658e130122d7845d9bcf965034f9dd8
  $fToMarkupTool_t33 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool167 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9c17a2e7bfa6b7f408653516506fe15a
  $fToMarkupTool_t34 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool171 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f337379f8f30089ff1c50df4d652d129
  $fToMarkupTool_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool30 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cac55387cb467951d77dec41ad6b9b84
  $fToMarkupTool_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool34 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c1fa9d0f37451a98eecba867b2488843
  $fToMarkupTool_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool38 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
0b712661e18ba8ea4fd7752d532277ab
  $fToMarkupTool_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool42 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
74a1d55d05f7883f5097407cebb6f044
  $fToMarkupTool_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool53 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e0d5c9b14a7cab2885158c168459e0e1
  $fToMarkupTool_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool57 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
651eac6434fc2e51333cbbeecbbaade9
  $fToMarkupTool_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " src=\""#) -}
16eb50e664400e848d20d2bb972b587c
  $fToMarkupTool_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "src"#) -}
f842eb7df3b39300661c5db44489ad71
  $fToMarkupTool_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "accept"#) -}
123c29f34e2650cb80f99800e039f8a3
  $fToMarkupTool_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onchange=\""#) -}
8ecb964ff7c87c373ad0c70ee7951be2
  $fToMarkupTool_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onchange"#) -}
618181dc8488c271138255804b511257
  $fToMarkupTool_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</tr>"#) -}
d9d1fc2417e83eb963165793f9bdf735
  $fToMarkupTool_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<tr"#) -}
dcd8eb011feabcaa69f9b7a88f4af7fa
  $fToMarkupTool_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "tr"#) -}
1145e59c25ab4016fca4f1d651bca87f
  $fToMarkupTool_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</table>"#) -}
bd7f11387303e29257a0886557e7c9ba
  $fToMarkupTool_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<table"#) -}
d62fae386c101b2ec476d89e540a37bb
  $fToMarkupTool_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "table"#) -}
85f7e99118091e045ad23f458ae25edf
  $fToMarkupTool_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</p>"#) -}
7eb91c7c0c9c5eb9e7b21e031e47fa99
  $fToMarkupTool_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " style=\""#) -}
c408e813506180e1dcbd33a72cf15b16
  $fToMarkupTool_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<p"#) -}
cd7e0718e1e26aff8b90e35acf729c3e
  $fToMarkupTool_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "p"#) -}
59c62c9119a372cfb2509fb4ace45ca0
  $fToMarkupTool_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</body>"#) -}
0b9011b5b2e858f65639e14f7f6ce41d
  $fToMarkupTool_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<body"#) -}
ceb0a492e3df85ec5f867509fc300839
  $fToMarkupTool_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
7e5f2a5532861a19ecb23a3fa41021a1
  $fToMarkupTool_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</script>"#) -}
22428127b86d9eb30363eed5b6f98a8f
  $fToMarkupTool_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<script"#) -}
92e88841b104cc858bf6487356e72700
  $fToMarkupTool_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "script"#) -}
62e149681718a6caf6e3a98c452abd89
  $fToMarkupTool_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</head>"#) -}
1f733eeda35df384f37b5d5bafefb4e2
  $fToMarkupTool_w29 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<head"#) -}
4314ac4dbcd9d469e6988c7a3652ea28
  $fToMarkupTool_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "style"#) -}
22392dfb7b1da4414a3dba85abc76591
  $fToMarkupTool_w30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "head"#) -}
e8eba6187bb6fa26948bcd436fc9976d
  $fToMarkupTool_w31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</html>"#) -}
049746c49c08b2f7816148101df9a1f6
  $fToMarkupTool_w32 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<html"#) -}
c417d5d96cb99fdd1fc049e6980de536
  $fToMarkupTool_w33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
699e0f4d37f50ea7d249e967541074c5
  $fToMarkupTool_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</td>"#) -}
9c1b795ac6d8a44688b0b4c2cf6072dc
  $fToMarkupTool_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<td"#) -}
3964402b687122e11706337d80ac3882
  $fToMarkupTool_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "td"#) -}
5921210f928ed65fa6340647042c5a3b
  $fToMarkupTool_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " type=\""#) -}
be5715523d7b9b481ce2d50ea452b2bf
  $fToMarkupTool_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "type"#) -}
7f0c03ee7e1510bc576da1307f929b7d
  $fToMarkupTool_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " accept=\""#) -}
f5ca4d6ba596e3ff51340f77480f4021
  $tcHTMLBlaze :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11368415617551476461##
                   12306602080521827022##
                   Htmls.$trModule
                   Htmls.$tcHTMLBlaze1) -}
4a0db1ac7ccadfb77b902bc134a4d2ea
  $tcHTMLBlaze1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HTMLBlaze"#) -}
bf569283762296a99ed753b81e1c269d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Htmls.$trModule2 Htmls.$trModule1) -}
48bff21eebbcab85316bfaa96208c87a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Htmls"#) -}
5fa07115a0bba4e644b8ad1546a9fcfc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-41oGHt6VUNM2sRBPQhbfR4"#) -}
73af3ef1f3f8d8ee3783b4641c14f87a
  $w$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Text.Blaze.ToMarkup a) (w1 :: a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                      @ ()
                      Htmls.$fMimeRenderTYPEHTMLBlazea1
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                      (Text.Blaze.toMarkup @ a w w1))) -}
a8027e2b0a9fb98866a2e43080d4fcc6
  data HTMLBlaze
instance Servant.API.ContentTypes.Accept [TYPE, Htmls.HTMLBlaze]
  = Htmls.$fAcceptTYPEHTMLBlaze
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, Text.Blaze.Internal.MarkupM]
  = Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, .]
  = Htmls.$fMimeRenderTYPEHTMLBlazea
instance Text.Blaze.ToMarkup [Models.Tool] = Htmls.$fToMarkupTool
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

