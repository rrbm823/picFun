
==================== FINAL INTERFACE ====================
2017-06-09 23:50:47.897777 UTC

interface picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Htmls [orphan module] 8002
  interface hash: 781044be47779e1ee96fe5eb3a84cf31
  ABI hash: aa0035ee828be950ec0a64c28b4fe3d2
  export-list hash: 67d6274d56ce8eb3c41abc47b0b45b11
  orphan hash: fa8fa300c3021a4cc2e3dae220ed8efa
  flag hash: d81c5bd899ee9bae2e83b7d3242d4f56
  sig of: Nothing
  used TH splices: False
  where
exports:
  Htmls.HTMLBlaze
module dependencies: Models
package dependencies: aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html 288dbf097dbd0ff17b50c3c1330477db
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html.Renderer.Utf8 5b26c380f5278a1c6a43c894929cec9d
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5 a78d4ae47bedb2841a6332de06a90707
import  -/  blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy:Text.Blaze.Html5.Attributes 7657fa2d710bc2ae02fd88196e7a43b7
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze e36927cead1a7aeccd029225c1dba5b4
import  -/  blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT:Text.Blaze.Internal 52ba665013f4dfa6d731e8584348806e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 208431757121593b5ca64b062df0cfbd
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media 07625d65eebeff997f1e9bc032ba3b6e
import  -/  http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr:Network.HTTP.Media.MediaType d33bfddaa1306ad267f9a6689258b69b
import  -/  Models d801f338584b61c18b182f9aac54bd61
  exports: b83cc7622d83dd136fe94f56bd460b59
  Checkerboard 87b1b1e2f0ec1d59fb85486ca940f78c
  Frame 9d348997b1c334f965a8bb9d002958d9
  Spiral a5176eaaba44fef2e3ae7eee7d1247f5
  Tool e2c5ed9d7ef0f45260c6cb7d3697c389
  ZipImage 29c766bbc8773fc9de26eea02ed8123d
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes f46c3af563d8e4f630ae29c1d96b30a9
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fAcceptTYPEHTMLBlaze ::
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  DFunId
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Htmls.HTMLBlaze>_N)) -}
6a6b46c25642391121a4a67558474bcf
  $fAcceptTYPEHTMLBlaze1 ::
    Network.HTTP.Media.MediaType.Internal.MediaType
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "text"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 let {
                   addr#1 :: GHC.Prim.Addr# = "html"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#1
                        ipv of wild1 { (#,#) ds2 ds6 ->
                 case Network.HTTP.Media.MediaType.$w//
                        addr#
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds4)
                        addr#1
                        (GHC.ForeignPtr.PlainForeignPtr ipv1)
                        0#
                        (GHC.Prim.word2Int# ds6) of ww10 { (#,,#) ww11 ww12 ww13 ->
                 case Network.HTTP.Media.MediaType.$w/:
                        ww11
                        ww12
                        ww13
                        Htmls.$fAcceptTYPEHTMLBlaze3
                        Htmls.$fAcceptTYPEHTMLBlaze2 of ww7 { (#,,#) ww8 ww9 ww1 ->
                 Network.HTTP.Media.MediaType.Internal.MediaType
                   ww8
                   ww9
                   ww1 } } } } }) -}
9cb504f035c8a4d37b98c6aab3ec3ef4
  $fAcceptTYPEHTMLBlaze2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "utf-8"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
66f07396d29a06176e24834a8a2bd555
  $fAcceptTYPEHTMLBlaze3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "charset"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fAcceptTYPEHTMLBlaze_$ccontentType ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze1) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazeMarkupM ::
    Servant.API.ContentTypes.MimeRender
      Htmls.HTMLBlaze Text.Blaze.Html.Html
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Text.Blaze.Html.Html
                  Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                    `cast`
                  (Sym (Servant.API.ContentTypes.N:Accept[0]
                            <*>_N <Htmls.HTMLBlaze>_N))
                  Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazeMarkupM_$cmimeRender ::
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Text.Blaze.Html.Html -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (eta :: Text.Blaze.Internal.Markup) ->
                 Data.ByteString.Builder.toLazyByteString
                   (letrec {
                      go3 :: forall b.
                             Data.ByteString.Builder.Internal.Builder
                             -> Text.Blaze.Internal.MarkupM b
                             -> Data.ByteString.Builder.Internal.Builder
                        {- Arity: 2, Inline: NOINLINE -}
                      = \ @ b
                          (attrs :: Data.ByteString.Builder.Internal.Builder)
                          (ds1 :: Text.Blaze.Internal.MarkupM b) ->
                        case ds1 of wild {
                          Text.Blaze.Internal.Parent b10 ds2 open close content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString open)))
                                        attrs)
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '>'#)))
                                  (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString close)))
                          Text.Blaze.Internal.CustomParent b10 tag content
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Internal.append
                                                 (Data.ByteString.Builder.Prim.primBounded
                                                    @ GHC.Types.Char
                                                    Data.ByteString.Builder.Prim.charUtf8
                                                    (GHC.Types.C# '<'#))
                                                 (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                              attrs)
                                           (Data.ByteString.Builder.Prim.primBounded
                                              @ GHC.Types.Char
                                              Data.ByteString.Builder.Prim.charUtf8
                                              (GHC.Types.C# '>'#)))
                                        (go3 @ b10 Data.ByteString.Builder.Internal.empty content))
                                     (let {
                                        bs5 :: Data.ByteString.Internal.ByteString
                                        = Data.ByteString.Internal.packChars
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b2 ->
                                                GHC.CString.unpackFoldrCString# @ b2 "</"#))
                                      } in
                                      GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (forall r.
                                           Data.ByteString.Builder.Internal.BuildStep r
                                           -> Data.ByteString.Builder.Internal.BuildStep r)
                                        @ Data.ByteString.Builder.Internal.Builder
                                        (\ (ds2 :: forall r.
                                                   Data.ByteString.Builder.Internal.BuildStep r
                                                   -> Data.ByteString.Builder.Internal.BuildStep
                                                        r) ->
                                         ds2)
                                          `cast`
                                        (<forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                        (\ @ r
                                           (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                           (br :: Data.ByteString.Builder.Internal.BufferRange)
                                           (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                         case k of k1 { DEFAULT ->
                                         case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                         case GHC.Classes.leInt
                                                (GHC.Types.I# dt3)
                                                Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                           GHC.Types.False
                                           -> (GHC.Base.$
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                 @ (GHC.Types.IO
                                                      (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (GHC.Base.returnIO
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r))
                                                 (Data.ByteString.Builder.Internal.InsertChunk
                                                    @ r
                                                    dt4
                                                    wild1
                                                    k1))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                eta1
                                           GHC.Types.True
                                           -> let {
                                                ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                                = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                              } in
                                              let {
                                                isize :: GHC.Types.Int = GHC.Types.I# dt3
                                              } in
                                              let {
                                                op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                              } in
                                              let {
                                                ip :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr
                                                    @ GHC.Word.Word8
                                                    @ b2
                                                    (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (GHC.Types.I# dt2)
                                              } in
                                              let {
                                                op' :: forall b2. GHC.Ptr.Ptr b2
                                                = \ @ b2 ->
                                                  GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b2 op isize
                                              } in
                                              case GHC.Ptr.$fOrdPtr_$c<=
                                                     @ GHC.Word.Word8
                                                     (op' @ GHC.Word.Word8)
                                                     (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                                GHC.Types.False
                                                -> case ip
                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                   case GHC.Ptr.plusPtr
                                                          @ GHC.Prim.Any
                                                          @ GHC.Word.Word8
                                                          (ip @ GHC.Prim.Any)
                                                          isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                   (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                      @ r
                                                      (Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt9)
                                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                         (eta2 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                       (GHC.Base.thenIO
                                                          @ ()
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r)
                                                          (GHC.ForeignPtr.touchForeignPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (k1 br1))
                                                         `cast`
                                                       (GHC.Types.N:IO[0]
                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                               r>_R)
                                                         eta2)
                                                        `cast`
                                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                       ->_R Sym (GHC.Types.N:IO[0]
                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                        r>_R))
                                                      wild2)
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } }
                                                GHC.Types.True
                                                -> (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (Foreign.Marshal.Utils.copyBytes
                                                         @ GHC.Word.Word8
                                                         op
                                                         (ip @ GHC.Word.Word8)
                                                         isize)
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1
                                                            (case op'
                                                                    @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                             Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt5 }))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)
                                                     eta1 } } } } })
                                          `cast`
                                        (forall (r :: <*>_N).
                                         <Data.ByteString.Builder.Internal.BuildStep r>_R
                                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                               (Data.ByteString.Builder.Prim.primBounded
                                  @ GHC.Types.Char
                                  Data.ByteString.Builder.Prim.charUtf8
                                  (GHC.Types.C# '>'#))
                          Text.Blaze.Internal.Leaf ds2 begin end
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds3 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds3)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r ->
                                      Data.ByteString.Builder.Internal.byteStringCopyStep
                                        @ r
                                        (Text.Blaze.Internal.getUtf8ByteString begin)))
                                  attrs)
                               (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds3 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds3)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r ->
                                   Data.ByteString.Builder.Internal.byteStringCopyStep
                                     @ r
                                     (Text.Blaze.Internal.getUtf8ByteString end)))
                          Text.Blaze.Internal.CustomLeaf tag close
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '<'#))
                                     (Text.Blaze.Renderer.Utf8.fromChoiceString tag))
                                  attrs)
                               (case close of wild1 {
                                  GHC.Types.False
                                  -> Data.ByteString.Builder.Prim.primBounded
                                       @ GHC.Types.Char
                                       Data.ByteString.Builder.Prim.charUtf8
                                       (GHC.Types.C# '>'#)
                                  GHC.Types.True
                                  -> let {
                                       bs5 :: Data.ByteString.Internal.ByteString
                                       = Data.ByteString.Internal.packChars
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1 ->
                                               GHC.CString.unpackFoldrCString# @ b1 " />"#))
                                     } in
                                     GHC.Base.$
                                       @ 'GHC.Types.PtrRepLifted
                                       @ (forall r.
                                          Data.ByteString.Builder.Internal.BuildStep r
                                          -> Data.ByteString.Builder.Internal.BuildStep r)
                                       @ Data.ByteString.Builder.Internal.Builder
                                       (\ (ds2 :: forall r.
                                                  Data.ByteString.Builder.Internal.BuildStep r
                                                  -> Data.ByteString.Builder.Internal.BuildStep
                                                       r) ->
                                        ds2)
                                         `cast`
                                       (<forall r.
                                         Data.ByteString.Builder.Internal.BuildStep r
                                         -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                       (\ @ r
                                          (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                          (br :: Data.ByteString.Builder.Internal.BufferRange)
                                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case bs5 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                        case k of k1 { DEFAULT ->
                                        case br of wild3 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                        case GHC.Classes.leInt
                                               (GHC.Types.I# dt3)
                                               Data.ByteString.Builder.Internal.maximalCopySize of wild4 {
                                          GHC.Types.False
                                          -> (GHC.Base.$
                                                @ 'GHC.Types.PtrRepLifted
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                @ (GHC.Types.IO
                                                     (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (GHC.Base.returnIO
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r))
                                                (Data.ByteString.Builder.Internal.InsertChunk
                                                   @ r
                                                   dt4
                                                   wild2
                                                   k1))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1
                                          GHC.Types.True
                                          -> let {
                                               ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                               = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                             } in
                                             let {
                                               isize :: GHC.Types.Int = GHC.Types.I# dt3
                                             } in
                                             let {
                                               op :: GHC.Ptr.Ptr GHC.Word.Word8
                                               = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                             } in
                                             let {
                                               ip :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr
                                                   @ GHC.Word.Word8
                                                   @ b1
                                                   (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (GHC.Types.I# dt2)
                                             } in
                                             let {
                                               op' :: forall b1. GHC.Ptr.Ptr b1
                                               = \ @ b1 ->
                                                 GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                             } in
                                             case GHC.Ptr.$fOrdPtr_$c<=
                                                    @ GHC.Word.Word8
                                                    (op' @ GHC.Word.Word8)
                                                    (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild5 {
                                               GHC.Types.False
                                               -> case ip
                                                         @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                  case GHC.Ptr.plusPtr
                                                         @ GHC.Prim.Any
                                                         @ GHC.Word.Word8
                                                         (ip @ GHC.Prim.Any)
                                                         isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                  (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                     @ r
                                                     (Data.ByteString.Builder.Internal.BufferRange
                                                        dt7
                                                        dt9)
                                                     (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                        (eta2 :: GHC.Prim.State#
                                                                   GHC.Prim.RealWorld)[OneShot] ->
                                                      (GHC.Base.thenIO
                                                         @ ()
                                                         @ (Data.ByteString.Builder.Internal.BuildSignal
                                                              r)
                                                         (GHC.ForeignPtr.touchForeignPtr
                                                            @ GHC.Word.Word8
                                                            ifp)
                                                         (k1 br1))
                                                        `cast`
                                                      (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)
                                                        eta2)
                                                       `cast`
                                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                                       r>_R))
                                                     wild3)
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } }
                                               GHC.Types.True
                                               -> (GHC.Base.thenIO
                                                     @ ()
                                                     @ (Data.ByteString.Builder.Internal.BuildSignal
                                                          r)
                                                     (Foreign.Marshal.Utils.copyBytes
                                                        @ GHC.Word.Word8
                                                        op
                                                        (ip @ GHC.Word.Word8)
                                                        isize)
                                                     (GHC.Base.thenIO
                                                        @ ()
                                                        @ (Data.ByteString.Builder.Internal.BuildSignal
                                                             r)
                                                        (GHC.ForeignPtr.touchForeignPtr
                                                           @ GHC.Word.Word8
                                                           ifp)
                                                        (k1
                                                           (case op'
                                                                   @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                            Data.ByteString.Builder.Internal.BufferRange
                                                              dt7
                                                              dt5 }))))
                                                    `cast`
                                                  (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R)
                                                    eta1 } } } } })
                                         `cast`
                                       (forall (r :: <*>_N).
                                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)) })
                          Text.Blaze.Internal.Content content
                          -> Text.Blaze.Renderer.Utf8.fromChoiceString content
                          Text.Blaze.Internal.Comment comment
                          -> Data.ByteString.Builder.Internal.append
                               (Data.ByteString.Builder.Internal.append
                                  (let {
                                     bs5 :: Data.ByteString.Internal.ByteString
                                     = Data.ByteString.Internal.packChars
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "<!-- "#))
                                   } in
                                   GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (forall r.
                                        Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r)
                                     @ Data.ByteString.Builder.Internal.Builder
                                     (\ (ds2 :: forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                      ds2)
                                       `cast`
                                     (<forall r.
                                       Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                     (\ @ r
                                        (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                        (br :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                      case k of k1 { DEFAULT ->
                                      case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                      case GHC.Classes.leInt
                                             (GHC.Types.I# dt3)
                                             Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                        GHC.Types.False
                                        -> (GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                              @ (GHC.Types.IO
                                                   (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (GHC.Base.returnIO
                                                 @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                              (Data.ByteString.Builder.Internal.InsertChunk
                                                 @ r
                                                 dt4
                                                 wild1
                                                 k1))
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                             eta1
                                        GHC.Types.True
                                        -> let {
                                             ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                           } in
                                           let {
                                             isize :: GHC.Types.Int = GHC.Types.I# dt3
                                           } in
                                           let {
                                             op :: GHC.Ptr.Ptr GHC.Word.Word8
                                             = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                           } in
                                           let {
                                             ip :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr
                                                 @ GHC.Word.Word8
                                                 @ b1
                                                 (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                    @ GHC.Word.Word8
                                                    ifp)
                                                 (GHC.Types.I# dt2)
                                           } in
                                           let {
                                             op' :: forall b1. GHC.Ptr.Ptr b1
                                             = \ @ b1 ->
                                               GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                           } in
                                           case GHC.Ptr.$fOrdPtr_$c<=
                                                  @ GHC.Word.Word8
                                                  (op' @ GHC.Word.Word8)
                                                  (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                             GHC.Types.False
                                             -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                case GHC.Ptr.plusPtr
                                                       @ GHC.Prim.Any
                                                       @ GHC.Word.Word8
                                                       (ip @ GHC.Prim.Any)
                                                       isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                   @ r
                                                   (Data.ByteString.Builder.Internal.BufferRange
                                                      dt7
                                                      dt9)
                                                   (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                      (eta2 :: GHC.Prim.State#
                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                    (GHC.Base.thenIO
                                                       @ ()
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       (GHC.ForeignPtr.touchForeignPtr
                                                          @ GHC.Word.Word8
                                                          ifp)
                                                       (k1 br1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta2)
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R))
                                                   wild2)
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } }
                                             GHC.Types.True
                                             -> (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (Foreign.Marshal.Utils.copyBytes
                                                      @ GHC.Word.Word8
                                                      op
                                                      (ip @ GHC.Word.Word8)
                                                      isize)
                                                   (GHC.Base.thenIO
                                                      @ ()
                                                      @ (Data.ByteString.Builder.Internal.BuildSignal
                                                           r)
                                                      (GHC.ForeignPtr.touchForeignPtr
                                                         @ GHC.Word.Word8
                                                         ifp)
                                                      (k1
                                                         (case op'
                                                                 @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                          Data.ByteString.Builder.Internal.BufferRange
                                                            dt7
                                                            dt5 }))))
                                                  `cast`
                                                (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R)
                                                  eta1 } } } } })
                                       `cast`
                                     (forall (r :: <*>_N).
                                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)))
                                  (Text.Blaze.Renderer.Utf8.fromChoiceString comment))
                               (let {
                                  bs5 :: Data.ByteString.Internal.ByteString
                                  = Data.ByteString.Internal.packChars
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 " -->"#))
                                } in
                                GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (forall r.
                                     Data.ByteString.Builder.Internal.BuildStep r
                                     -> Data.ByteString.Builder.Internal.BuildStep r)
                                  @ Data.ByteString.Builder.Internal.Builder
                                  (\ (ds2 :: forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r) ->
                                   ds2)
                                    `cast`
                                  (<forall r.
                                    Data.ByteString.Builder.Internal.BuildStep r
                                    -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                  (\ @ r
                                     (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                     (br :: Data.ByteString.Builder.Internal.BufferRange)
                                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                   case k of k1 { DEFAULT ->
                                   case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                   case GHC.Classes.leInt
                                          (GHC.Types.I# dt3)
                                          Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                     GHC.Types.False
                                     -> (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                           @ (GHC.Types.IO
                                                (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (GHC.Base.returnIO
                                              @ (Data.ByteString.Builder.Internal.BuildSignal r))
                                           (Data.ByteString.Builder.Internal.InsertChunk
                                              @ r
                                              dt4
                                              wild1
                                              k1))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                          eta1
                                     GHC.Types.True
                                     -> let {
                                          ifp :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                          = GHC.ForeignPtr.ForeignPtr @ GHC.Word.Word8 dt dt1
                                        } in
                                        let {
                                          isize :: GHC.Types.Int = GHC.Types.I# dt3
                                        } in
                                        let {
                                          op :: GHC.Ptr.Ptr GHC.Word.Word8
                                          = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                        } in
                                        let {
                                          ip :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 ->
                                            GHC.Ptr.plusPtr
                                              @ GHC.Word.Word8
                                              @ b1
                                              (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                 @ GHC.Word.Word8
                                                 ifp)
                                              (GHC.Types.I# dt2)
                                        } in
                                        let {
                                          op' :: forall b1. GHC.Ptr.Ptr b1
                                          = \ @ b1 -> GHC.Ptr.plusPtr @ GHC.Word.Word8 @ b1 op isize
                                        } in
                                        case GHC.Ptr.$fOrdPtr_$c<=
                                               @ GHC.Word.Word8
                                               (op' @ GHC.Word.Word8)
                                               (GHC.Ptr.Ptr @ GHC.Word.Word8 dt5) of wild4 {
                                          GHC.Types.False
                                          -> case ip @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                             case GHC.Ptr.plusPtr
                                                    @ GHC.Prim.Any
                                                    @ GHC.Word.Word8
                                                    (ip @ GHC.Prim.Any)
                                                    isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                             (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                @ r
                                                (Data.ByteString.Builder.Internal.BufferRange
                                                   dt7
                                                   dt9)
                                                (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                   (eta2 :: GHC.Prim.State#
                                                              GHC.Prim.RealWorld)[OneShot] ->
                                                 (GHC.Base.thenIO
                                                    @ ()
                                                    @ (Data.ByteString.Builder.Internal.BuildSignal
                                                         r)
                                                    (GHC.ForeignPtr.touchForeignPtr
                                                       @ GHC.Word.Word8
                                                       ifp)
                                                    (k1 br1))
                                                   `cast`
                                                 (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R)
                                                   eta2)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R))
                                                wild2)
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } }
                                          GHC.Types.True
                                          -> (GHC.Base.thenIO
                                                @ ()
                                                @ (Data.ByteString.Builder.Internal.BuildSignal r)
                                                (Foreign.Marshal.Utils.copyBytes
                                                   @ GHC.Word.Word8
                                                   op
                                                   (ip @ GHC.Word.Word8)
                                                   isize)
                                                (GHC.Base.thenIO
                                                   @ ()
                                                   @ (Data.ByteString.Builder.Internal.BuildSignal
                                                        r)
                                                   (GHC.ForeignPtr.touchForeignPtr
                                                      @ GHC.Word.Word8
                                                      ifp)
                                                   (k1
                                                      (case op'
                                                              @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                       Data.ByteString.Builder.Internal.BufferRange
                                                         dt7
                                                         dt5 }))))
                                               `cast`
                                             (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)
                                               eta1 } } } } })
                                    `cast`
                                  (forall (r :: <*>_N).
                                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R)))
                          Text.Blaze.Internal.Append b10 c0 h1 h2
                          -> Data.ByteString.Builder.Internal.append
                               (go3 @ b10 attrs h1)
                               (go3 @ c0 attrs h2)
                          Text.Blaze.Internal.AddAttribute ds2 key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (forall r.
                                              Data.ByteString.Builder.Internal.BuildStep r
                                              -> Data.ByteString.Builder.Internal.BuildStep r)
                                           @ Data.ByteString.Builder.Internal.Builder
                                           (\ (ds3 :: forall r.
                                                      Data.ByteString.Builder.Internal.BuildStep r
                                                      -> Data.ByteString.Builder.Internal.BuildStep
                                                           r) ->
                                            ds3)
                                             `cast`
                                           (<forall r.
                                             Data.ByteString.Builder.Internal.BuildStep r
                                             -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                           (\ @ r ->
                                            Data.ByteString.Builder.Internal.byteStringCopyStep
                                              @ r
                                              (Text.Blaze.Internal.getUtf8ByteString key)))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.AddCustomAttribute key value h
                          -> go3
                               @ b
                               (Data.ByteString.Builder.Internal.append
                                  (Data.ByteString.Builder.Internal.append
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.ByteString.Builder.Internal.append
                                           (Data.ByteString.Builder.Internal.append
                                              (Data.ByteString.Builder.Prim.primBounded
                                                 @ GHC.Types.Char
                                                 Data.ByteString.Builder.Prim.charUtf8
                                                 (GHC.Types.C# ' '#))
                                              (Text.Blaze.Renderer.Utf8.fromChoiceString key))
                                           (let {
                                              bs5 :: Data.ByteString.Internal.ByteString
                                              = Data.ByteString.Internal.packChars
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b1 ->
                                                      GHC.CString.unpackFoldrCString# @ b1 "=\""#))
                                            } in
                                            GHC.Base.$
                                              @ 'GHC.Types.PtrRepLifted
                                              @ (forall r.
                                                 Data.ByteString.Builder.Internal.BuildStep r
                                                 -> Data.ByteString.Builder.Internal.BuildStep r)
                                              @ Data.ByteString.Builder.Internal.Builder
                                              (\ (ds2 :: forall r.
                                                         Data.ByteString.Builder.Internal.BuildStep
                                                           r
                                                         -> Data.ByteString.Builder.Internal.BuildStep
                                                              r) ->
                                               ds2)
                                                `cast`
                                              (<forall r.
                                                Data.ByteString.Builder.Internal.BuildStep r
                                                -> Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                                              (\ @ r
                                                 (k :: Data.ByteString.Builder.Internal.BuildStep r)
                                                 (br :: Data.ByteString.Builder.Internal.BufferRange)
                                                 (eta1 :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                               case bs5 of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                                               case k of k1 { DEFAULT ->
                                               case br of wild2 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                               case GHC.Classes.leInt
                                                      (GHC.Types.I# dt3)
                                                      Data.ByteString.Builder.Internal.maximalCopySize of wild3 {
                                                 GHC.Types.False
                                                 -> (GHC.Base.$
                                                       @ 'GHC.Types.PtrRepLifted
                                                       @ (Data.ByteString.Builder.Internal.BuildSignal
                                                            r)
                                                       @ (GHC.Types.IO
                                                            (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (GHC.Base.returnIO
                                                          @ (Data.ByteString.Builder.Internal.BuildSignal
                                                               r))
                                                       (Data.ByteString.Builder.Internal.InsertChunk
                                                          @ r
                                                          dt4
                                                          wild1
                                                          k1))
                                                      `cast`
                                                    (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)
                                                      eta1
                                                 GHC.Types.True
                                                 -> let {
                                                      ifp :: GHC.ForeignPtr.ForeignPtr
                                                               GHC.Word.Word8
                                                      = GHC.ForeignPtr.ForeignPtr
                                                          @ GHC.Word.Word8
                                                          dt
                                                          dt1
                                                    } in
                                                    let {
                                                      isize :: GHC.Types.Int = GHC.Types.I# dt3
                                                    } in
                                                    let {
                                                      op :: GHC.Ptr.Ptr GHC.Word.Word8
                                                      = GHC.Ptr.Ptr @ GHC.Word.Word8 dt4
                                                    } in
                                                    let {
                                                      ip :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          (GHC.ForeignPtr.unsafeForeignPtrToPtr
                                                             @ GHC.Word.Word8
                                                             ifp)
                                                          (GHC.Types.I# dt2)
                                                    } in
                                                    let {
                                                      op' :: forall b1. GHC.Ptr.Ptr b1
                                                      = \ @ b1 ->
                                                        GHC.Ptr.plusPtr
                                                          @ GHC.Word.Word8
                                                          @ b1
                                                          op
                                                          isize
                                                    } in
                                                    case GHC.Ptr.$fOrdPtr_$c<=
                                                           @ GHC.Word.Word8
                                                           (op' @ GHC.Word.Word8)
                                                           (GHC.Ptr.Ptr
                                                              @ GHC.Word.Word8
                                                              dt5) of wild4 {
                                                      GHC.Types.False
                                                      -> case ip
                                                                @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                         case GHC.Ptr.plusPtr
                                                                @ GHC.Prim.Any
                                                                @ GHC.Word.Word8
                                                                (ip @ GHC.Prim.Any)
                                                                isize of dt8 { GHC.Ptr.Ptr dt9 ->
                                                         (Data.ByteString.Builder.Internal.wrappedBytesCopyStep
                                                            @ r
                                                            (Data.ByteString.Builder.Internal.BufferRange
                                                               dt7
                                                               dt9)
                                                            (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                                               (eta2 :: GHC.Prim.State#
                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                             (GHC.Base.thenIO
                                                                @ ()
                                                                @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                     r)
                                                                (GHC.ForeignPtr.touchForeignPtr
                                                                   @ GHC.Word.Word8
                                                                   ifp)
                                                                (k1 br1))
                                                               `cast`
                                                             (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)
                                                               eta2)
                                                              `cast`
                                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                                              r>_R))
                                                            wild2)
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } }
                                                      GHC.Types.True
                                                      -> (GHC.Base.thenIO
                                                            @ ()
                                                            @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                 r)
                                                            (Foreign.Marshal.Utils.copyBytes
                                                               @ GHC.Word.Word8
                                                               op
                                                               (ip @ GHC.Word.Word8)
                                                               isize)
                                                            (GHC.Base.thenIO
                                                               @ ()
                                                               @ (Data.ByteString.Builder.Internal.BuildSignal
                                                                    r)
                                                               (GHC.ForeignPtr.touchForeignPtr
                                                                  @ GHC.Word.Word8
                                                                  ifp)
                                                               (k1
                                                                  (case op'
                                                                          @ GHC.Word.Word8 of dt6 { GHC.Ptr.Ptr dt7 ->
                                                                   Data.ByteString.Builder.Internal.BufferRange
                                                                     dt7
                                                                     dt5 }))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R)
                                                           eta1 } } } } })
                                                `cast`
                                              (forall (r :: <*>_N).
                                               <Data.ByteString.Builder.Internal.BuildStep r>_R
                                               ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R))))
                                        (Text.Blaze.Renderer.Utf8.fromChoiceString value))
                                     (Data.ByteString.Builder.Prim.primBounded
                                        @ GHC.Types.Char
                                        Data.ByteString.Builder.Prim.charUtf8
                                        (GHC.Types.C# '"'#)))
                                  attrs)
                               h
                          Text.Blaze.Internal.Empty
                          -> Data.ByteString.Builder.Internal.empty }
                    } in
                    go3 @ () Data.ByteString.Builder.Internal.empty eta)) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze a
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dToMarkup :: Text.Blaze.ToMarkup a).
                  @ *
                  @ Htmls.HTMLBlaze
                  @ a
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender @ a $dToMarkup)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender @ a $dToMarkup) -}
e411e8d36ab18f2ba031c6ab7174b831
  $fMimeRenderTYPEHTMLBlazea1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea2 ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   ($dToMarkup :: Text.Blaze.ToMarkup a)
                   (eta :: Data.Proxy.Proxy Htmls.HTMLBlaze) ->
                 Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType eta) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea_$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    Data.Proxy.Proxy Htmls.HTMLBlaze
    -> a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Text.Blaze.ToMarkup a)
                   (w1 :: Data.Proxy.Proxy Htmls.HTMLBlaze)
                   (w2 :: a) ->
                 Htmls.$w$cmimeRender @ a w w2) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  $fMimeRenderTYPEHTMLBlazea_$cp1MimeRender ::
    Text.Blaze.ToMarkup a =>
    Servant.API.ContentTypes.Accept Htmls.HTMLBlaze
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Htmls.$fMimeRenderTYPEHTMLBlazea2
                  `cast`
                (forall (a :: <*>_N).
                 <Text.Blaze.ToMarkup a>_R
                 ->_R Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N)) -}
f15bcad8d454861faa53d8609e7f7f2f
  $fMimeRenderTYPEHTMLBlazea_go3 ::
    Data.ByteString.Builder.Internal.Builder
    -> Text.Blaze.Internal.MarkupM b
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: NOINLINE -}
5bf65c8b7b4591ef80823a48e0694484
  $fToMarkupTool :: Text.Blaze.ToMarkup Models.Tool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Models.Tool
                  Htmls.$fToMarkupTool_$ctoMarkup
                  Htmls.$fToMarkupTool_$ctoMarkup -}
bc458da54399816ccd6990b878398e18
  $fToMarkupTool1 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool134
                   Htmls.$fToMarkupTool130
                   Htmls.$fToMarkupTool126
                   Htmls.$fToMarkupTool2) -}
7806ccd8dba24e2a68161559026839a9
  $fToMarkupTool10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "theImage"#) -}
28c9f0ef4f114a5a3a38f435f5357e19
  $fToMarkupTool100 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
7d5de37ab435fa417be89b34f067f57b
  $fToMarkupTool101 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w16) -}
23672ba48da5b8ca860606784235eddb
  $fToMarkupTool102 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool105
                   Htmls.$fToMarkupTool104
                   Htmls.$fToMarkupTool_t18) -}
4135eb6d6f95f2eca2224409813f2864
  $fToMarkupTool103 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w17
                   0#
                   ipv }) -}
ba0e26e50c248661ba078b0b0964e4fb
  $fToMarkupTool104 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b514f3f01b86d9312d0f6312bd845772
  $fToMarkupTool105 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w17) -}
44b2d8006245204c8c58afef632d812f
  $fToMarkupTool106 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool109
                   Htmls.$fToMarkupTool108
                   Htmls.$fToMarkupTool_t19) -}
f29008cc2ca34935b5efb83c2a005a3c
  $fToMarkupTool107 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w18
                   0#
                   ipv }) -}
b5c3f125c0073d010735925cf7a119de
  $fToMarkupTool108 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
92d4d1667197c8af9844d19d1bdf41e8
  $fToMarkupTool109 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w18) -}
59f558cdc9796000959e9d5ea06bd717
  $fToMarkupTool11 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool14
                   Htmls.$fToMarkupTool13
                   Htmls.$fToMarkupTool_t1) -}
7c8b56ebc6846f1fa66db650357b46d3
  $fToMarkupTool110 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool122
                   Htmls.$fToMarkupTool118
                   Htmls.$fToMarkupTool114
                   Htmls.$fToMarkupTool111) -}
18dd8d6cfe183bf60b5060e49d14f3bc
  $fToMarkupTool111 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool112) -}
4eab19bb3671ad0ce8c03f3cdc4b9a43
  $fToMarkupTool112 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool113) -}
2f35d2ba50c9135025b12a94ac591318
  $fToMarkupTool113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Combine two pictures to create a cool new image"#) -}
20ceac70fcb3836640925a3eadc731ff
  $fToMarkupTool114 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool117
                   Htmls.$fToMarkupTool116
                   Htmls.$fToMarkupTool_t20) -}
e2eee4aba0f091bb7416cd8cd55cba20
  $fToMarkupTool115 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w19
                   0#
                   ipv }) -}
28b01518e3edc7fae98328d2ad493e8f
  $fToMarkupTool116 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0617a05cd749afda4d30f0adbddc3aad
  $fToMarkupTool117 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w19) -}
bccd3476d9045769a85a2e942ae98875
  $fToMarkupTool118 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool121
                   Htmls.$fToMarkupTool120
                   Htmls.$fToMarkupTool_t21) -}
031bcbcba3b6f12c321bbf03f8dcfb6a
  $fToMarkupTool119 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w20
                   0#
                   ipv }) -}
9a5cd29af1dc9e5d89469f6c3444961b
  $fToMarkupTool12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w
                   0#
                   ipv }) -}
969de08085d3bbc8953382e6cef9ce95
  $fToMarkupTool120 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6dad989e6455371fadc52768fcceaf36
  $fToMarkupTool121 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w20) -}
a8eddd4d358f05dc3fab1d9eb8fe5a61
  $fToMarkupTool122 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool125
                   Htmls.$fToMarkupTool124
                   Htmls.$fToMarkupTool_t22) -}
8eee3da0564d9a38b798b6f115aa43d6
  $fToMarkupTool123 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w21
                   0#
                   ipv }) -}
373f4b90f421cee548e8244dedd231e9
  $fToMarkupTool124 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e321bb3dc8d5cde137277cb1903f2374
  $fToMarkupTool125 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w21) -}
af6aeb07138adc2451463b8ce0714328
  $fToMarkupTool126 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool129
                   Htmls.$fToMarkupTool128
                   Htmls.$fToMarkupTool_t23) -}
3d6a7ed13a91c87d922b09f7f249a72c
  $fToMarkupTool127 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w22
                   0#
                   ipv }) -}
dcc29f770a6d40447dbda7777c89702e
  $fToMarkupTool128 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
116691fc6fc15fe9888c8b649274fb1e
  $fToMarkupTool129 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w22) -}
41730d4421629e363c73fc87a7d7331c
  $fToMarkupTool13 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
627cbb0459abb4d1c5d0014e7ba52187
  $fToMarkupTool130 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool133
                   Htmls.$fToMarkupTool132
                   Htmls.$fToMarkupTool_t24) -}
7c39941e91eb53e86dd2f639e7f4b83c
  $fToMarkupTool131 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w23
                   0#
                   ipv }) -}
6e5b317fbcadef10ae86de8e520887de
  $fToMarkupTool132 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c1b3cbe5c5d84acdd8e78fd6c5007e95
  $fToMarkupTool133 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w23) -}
cc3d72743c7fdda618a4fb4bb590e7cb
  $fToMarkupTool134 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool137
                   Htmls.$fToMarkupTool136
                   Htmls.$fToMarkupTool_t25) -}
4aa52ed23daf683e9fd38e89f509edc5
  $fToMarkupTool135 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w24
                   0#
                   ipv }) -}
2d37e5a385cc18679340ecb1e5893005
  $fToMarkupTool136 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b003385f8d844a83a185db96aa803858
  $fToMarkupTool137 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w24) -}
52d5d7ed9557170ed35d286b71c57406
  $fToMarkupTool138 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool139) -}
b669291cef09261f67701c9ab8bfd766
  $fToMarkupTool139 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool140) -}
84b1c6e18d8fda3ba864102fe95a07bc
  $fToMarkupTool14 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Htmls.$fToMarkupTool_w) -}
87dde0e4ebcd73aaf15850c94d4cab70
  $fToMarkupTool140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'}"#) -}
8fa67d7024d414c29fc3b3cf2be8236a
  $fToMarkupTool141 :: Text.Blaze.Html.Html
  {- Strictness: x -}
3047bb3f3c05382d8a39d86a2205f615
  $fToMarkupTool142 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool143) -}
314c8740c90f717bc3863282fd0d203c
  $fToMarkupTool143 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool144) -}
f34be5a82301a08c640286b1bd1f7072
  $fToMarkupTool144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "../image/Checkerboard"#) -}
ec0add9707368dd19da132ee9d5ffc24
  $fToMarkupTool145 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool146) -}
f1ec821578670ed4be698f5f5bf5acea
  $fToMarkupTool146 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool147) -}
13150965cbf3a6b25ae8205f5b1621d7
  $fToMarkupTool147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Frame"#) -}
75dd99b5d88f8a7c1199bb19b7f727ea
  $fToMarkupTool148 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool149) -}
355824cc48707d1b1615ffe9efe253cc
  $fToMarkupTool149 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool150) -}
57f15a5f9e7973d2c9af5fd242ecb899
  $fToMarkupTool15 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool18
                   Htmls.$fToMarkupTool17
                   Htmls.$fToMarkupTool_t2) -}
7933093b20648e1e0ba8a6c826d29d8d
  $fToMarkupTool150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/Spiral"#) -}
c3d216d119990465d8e7cb7c3beb14f5
  $fToMarkupTool151 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool152) -}
1b339b25dedb5c30327c91d515bb7ced
  $fToMarkupTool152 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool153) -}
5d5d8620dc8d59a2debe1325164f0c49
  $fToMarkupTool153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../image/ZipImage"#) -}
32e1ed056d78d20f2de6f9dfd071f159
  $fToMarkupTool154 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool155) -}
6f09caf012ac04e5725a70f7f119e250
  $fToMarkupTool155 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool156) -}
42d439c327f07e54cfe86b87838b1b3f
  $fToMarkupTool156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "var picUpdate = function() { document.getElementById('theImage').src='"#) -}
8e7b4d6a5a4c520c895ec36b8ef59172
  $fToMarkupTool157 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool160
                   Htmls.$fToMarkupTool159
                   Htmls.$fToMarkupTool_t26) -}
c5de8daadf352280163a908bf2374750
  $fToMarkupTool158 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w25
                   0#
                   ipv }) -}
a35f2388ebdd0cb877749f46aa33f4d2
  $fToMarkupTool159 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
31f7352bdeeabe482d178e614034536b
  $fToMarkupTool16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w1
                   0#
                   ipv }) -}
3eaefdfab5f34c454a1bafcb62571f88
  $fToMarkupTool160 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w25) -}
a9f5f237e0c1bb8713376f8b2954b7ea
  $fToMarkupTool161 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool164
                   Htmls.$fToMarkupTool163
                   Htmls.$fToMarkupTool_t27) -}
51adddae6520189a2aa76c621e5782b5
  $fToMarkupTool162 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w26
                   0#
                   ipv }) -}
6120260fc9485dd509fe9c0c74e64d16
  $fToMarkupTool163 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
843a5d8ac96df0a80f8a33b32a0c3c6f
  $fToMarkupTool164 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w26) -}
246f75b95b7576eb3065e34b47dab5a0
  $fToMarkupTool165 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool168
                   Htmls.$fToMarkupTool167
                   Htmls.$fToMarkupTool_t28) -}
6a41612d9aaa4daced9baebeabc62df8
  $fToMarkupTool166 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w27
                   0#
                   ipv }) -}
075c16ddf80871282a1dc32d825c128a
  $fToMarkupTool167 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3e30042ca1ddea4a90698987a9d79851
  $fToMarkupTool168 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w27) -}
90abd3aa0e1b5e7a944062674a455a41
  $fToMarkupTool169 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool_f
                   Htmls.$fToMarkupTool_f1
                   Htmls.$fToMarkupTool_f2
                   Htmls.$fToMarkupTool170) -}
580f96f038edb2c43577f345933c95ee
  $fToMarkupTool17 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
46546afd2f17301c95e658a404f101d0
  $fToMarkupTool170 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.external
                   @ ()
                   Htmls.$fToMarkupTool171) -}
f420d52489f923fe30968c16134471cc
  $fToMarkupTool171 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Htmls.$fToMarkupTool172) -}
4ed0c274fca83465e2d497779a620591
  $fToMarkupTool172 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String
                   Htmls.$fToMarkupTool173) -}
179a3e3f697488ada731a395e475a7ff
  $fToMarkupTool173 :: [GHC.Types.Char]
02b93b9dfc676bd4bffde2b7b69cbd46
  $fToMarkupTool174 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6262f1e54441db300026ea395bed5351
  $fToMarkupTool175 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
66d3f34c92ce6b411e865c0d1f361046
  $fToMarkupTool176 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
96fab1733ffb65e04372771e87e99b5f
  $fToMarkupTool177 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool180
                   Htmls.$fToMarkupTool179
                   Htmls.$fToMarkupTool_t29) -}
821f9913ab40b2e9bff6af741e2f9991
  $fToMarkupTool178 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w28
                   0#
                   ipv }) -}
46dc7e4653da719b7bab809c48a0d3ad
  $fToMarkupTool179 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8b7c1aaa4593552ef6d332e2b9cab092
  $fToMarkupTool18 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w1) -}
03d5aafa738fd903a08cb0840c401a68
  $fToMarkupTool180 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w28) -}
1590e9b5600fb732adc148bc837005b4
  $fToMarkupTool181 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool184
                   Htmls.$fToMarkupTool183
                   Htmls.$fToMarkupTool_t30) -}
7aff3ad7b6b2248d724889e7494df272
  $fToMarkupTool182 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w29
                   0#
                   ipv }) -}
f9edf95bcebe1f151b5898ba15a4213f
  $fToMarkupTool183 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t30 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f3bf63e7a82b2108b6b2e42032aaa934
  $fToMarkupTool184 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w29) -}
94c458e3d5a6c454843b28c0eef7328b
  $fToMarkupTool185 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool188
                   Htmls.$fToMarkupTool187
                   Htmls.$fToMarkupTool_t31) -}
460ce04e721110de9a24d9ac5677dc4b
  $fToMarkupTool186 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w30
                   0#
                   ipv }) -}
02d6205cc5b877992fa32feefb35aa3b
  $fToMarkupTool187 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
1fbdbcfe5dbb8bdb9282ee1dd695e2e2
  $fToMarkupTool188 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w30) -}
0eafe35225dcb7a5d41bd5c422d1a0ea
  $fToMarkupTool189 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool192
                   Htmls.$fToMarkupTool191
                   Htmls.$fToMarkupTool_t32) -}
fa0a9816d32625518652ec9558379e6c
  $fToMarkupTool19 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool22
                   Htmls.$fToMarkupTool21
                   Htmls.$fToMarkupTool_t3) -}
38403194223fc7f9c4372a9327d78c28
  $fToMarkupTool190 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w31
                   0#
                   ipv }) -}
54b846ab753e2d1398b957b4fb6f8244
  $fToMarkupTool191 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t32 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
59a3c29c91836d2c40e815002f8ff514
  $fToMarkupTool192 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w31) -}
f42dfd13053381e5b4fca7f61414369d
  $fToMarkupTool193 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool196
                   Htmls.$fToMarkupTool195
                   Htmls.$fToMarkupTool_t33) -}
5ca231e38f2cea9c9d5bdec0168eb926
  $fToMarkupTool194 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w32
                   0#
                   ipv }) -}
7edba4a3c0f7b00f44d2f2dcf09b5ebb
  $fToMarkupTool195 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t33 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
292b5d840f4686ceb5d44a902a12866e
  $fToMarkupTool196 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w32) -}
509976802ede489e8a8e85c3509a5f35
  $fToMarkupTool197 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool200
                   Htmls.$fToMarkupTool199
                   Htmls.$fToMarkupTool_t34) -}
039254b2aa6933b9f5d4e570f07a9c38
  $fToMarkupTool198 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w33
                   0#
                   ipv }) -}
c673e5caebc926e706abe1c8f3fcbbe1
  $fToMarkupTool199 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t34 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
1898494912cd196f23f11ca30c468d9b
  $fToMarkupTool2 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool110
                   Htmls.$fToMarkupTool3) -}
6e91c6b046ec437f1b05ed1aabcd8992
  $fToMarkupTool20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w2
                   0#
                   ipv }) -}
84790042242cd957c78a42109f868fd1
  $fToMarkupTool200 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w33) -}
b4cf2e66f58bfdda54acfd263d7156cd
  $fToMarkupTool21 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
278083b5707c437b4d7379b72e5dc40b
  $fToMarkupTool22 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w2) -}
3b6dcea0ba06282448b89b7d10b59744
  $fToMarkupTool23 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool26
                   Htmls.$fToMarkupTool25
                   Htmls.$fToMarkupTool_t4) -}
8b1611473ce7db1e39585d067845d9bd
  $fToMarkupTool24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w3
                   0#
                   ipv }) -}
078ee651fb41dd7d2d7d369db69f26e6
  $fToMarkupTool25 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
262eab5f9d72dcc1bbc1cdfb32d99158
  $fToMarkupTool26 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w3) -}
f33e37bab93aee818c8fee9b94c626b1
  $fToMarkupTool27 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool30
                   Htmls.$fToMarkupTool29
                   Htmls.$fToMarkupTool_t5) -}
7c21e600d57f80d66b2ed5e7ab6ebacc
  $fToMarkupTool28 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w4
                   0#
                   ipv }) -}
da92cee7e1821624336986e15b705ef2
  $fToMarkupTool29 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d91d1820ec249c4d3234fb1ae495e005
  $fToMarkupTool3 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.br
                   Htmls.$fToMarkupTool4) -}
426f1fbcc47fb7608ee0f83e98ffa09f
  $fToMarkupTool30 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w4) -}
302eec17bc595228661a30060c49ce03
  $fToMarkupTool31 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool27
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool32) -}
19bd3b2671e8f2468c0cd5f0a1c6287c
  $fToMarkupTool32 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool68
                   Htmls.$fToMarkupTool33) -}
bdb1b15706fc022af09edfe8b1fa013c
  $fToMarkupTool33 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool56
                   Htmls.$fToMarkupTool34) -}
c6986a05191d8d890095de725d02d043
  $fToMarkupTool34 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool52
                   Htmls.$fToMarkupTool48
                   Htmls.$fToMarkupTool46
                   Htmls.$fToMarkupTool35) -}
7e0f64c52f2559bdbef98a6fe37a73b0
  $fToMarkupTool35 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool42
                   Htmls.$fToMarkupTool38
                   Htmls.$fToMarkupTool36
                   Text.Blaze.Html5.input) -}
dd3e493b74138faf7cdc59b1b20b40ea
  $fToMarkupTool36 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool37) -}
dd9ae7192c7c2ee6d14b0b1d3dca64a5
  $fToMarkupTool37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "button"#) -}
7954b787832b3477cf2679b986a9887d
  $fToMarkupTool38 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool41
                   Htmls.$fToMarkupTool40
                   Htmls.$fToMarkupTool_t6) -}
ffbe118bd8ea17733a5363ba05e2416e
  $fToMarkupTool39 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w5
                   0#
                   ipv }) -}
1269c02791cb1970891fbf596992943d
  $fToMarkupTool4 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool106
                   Htmls.$fToMarkupTool102
                   Htmls.$fToMarkupTool98
                   Htmls.$fToMarkupTool5) -}
6d28beffeb5cd9c90c28ac832aec6996
  $fToMarkupTool40 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4004e0432593041ee30bf9a79f5848ed
  $fToMarkupTool41 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w5) -}
bf11997d30efb57b840dc1f8a94aa6da
  $fToMarkupTool42 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool45
                   Htmls.$fToMarkupTool44
                   Htmls.$fToMarkupTool_t7) -}
0c0eb192c737b6b6714ecd69ddb6a497
  $fToMarkupTool43 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w6
                   0#
                   ipv }) -}
be4460c2f7ff8e849b88bbe6f6fec076
  $fToMarkupTool44 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
83f6e6ce7f18f4685e6da8531db535d9
  $fToMarkupTool45 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w6) -}
83a68632572f3ab49d56ee3e2592e00a
  $fToMarkupTool46 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool47) -}
744c50c051f43631ed9b30355ed3bd91
  $fToMarkupTool47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "picUpdate()"#) -}
e2089ef9aecb054cdb28886dd4773e95
  $fToMarkupTool48 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool51
                   Htmls.$fToMarkupTool50
                   Htmls.$fToMarkupTool_t8) -}
53dadbdde952aade0da3f2539a1780de
  $fToMarkupTool49 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w7
                   0#
                   ipv }) -}
c660990f762ec37dd67ecdaff0c4d316
  $fToMarkupTool5 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool56
                   Htmls.$fToMarkupTool6) -}
8f3caf4605c4437e4b78812ce6c1f796
  $fToMarkupTool50 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
61da85f40e9a7d4d7b2695b2244a864e
  $fToMarkupTool51 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w7) -}
24d4c9f45376250b514c7087139ab472
  $fToMarkupTool52 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool55
                   Htmls.$fToMarkupTool54
                   Htmls.$fToMarkupTool_t9) -}
de761b32a185f2faeb408c5a3624b5e6
  $fToMarkupTool53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w8
                   0#
                   ipv }) -}
b19fa04315bf5959156d912c17a4d978
  $fToMarkupTool54 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
71b2bbf0635ead990b2f6a9d35689577
  $fToMarkupTool55 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w8) -}
e24baae500a76ee1b079a138ee93bb3e
  $fToMarkupTool56 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool59
                   Htmls.$fToMarkupTool58
                   Htmls.$fToMarkupTool_t10) -}
fbf1197f4fc078cf160919a0d243e7aa
  $fToMarkupTool57 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w9
                   0#
                   ipv }) -}
bf3c02dced9facc9b8ea25a94612561c
  $fToMarkupTool58 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
814fad4486e0324399dc4aa1420e5c18
  $fToMarkupTool59 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w9) -}
7ff743b63704299b75ea096454510152
  $fToMarkupTool6 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool31
                   Htmls.$fToMarkupTool7) -}
bf7e9b561eac385efc958ec8a1d9ee15
  $fToMarkupTool60 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool63
                   Htmls.$fToMarkupTool62
                   Htmls.$fToMarkupTool_t11) -}
78ebabb4b2f8af3b6efddfe883251b43
  $fToMarkupTool61 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w10
                   0#
                   ipv }) -}
b83f43e29d8c1b94b1adbdc35273ce47
  $fToMarkupTool62 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8459efe36b0ff4e1dd86e5a5bb06b006
  $fToMarkupTool63 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w10) -}
b4a6a1dba99e0f63da6c0db26ce75cfe
  $fToMarkupTool64 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool67
                   Htmls.$fToMarkupTool66
                   Htmls.$fToMarkupTool_t12) -}
93681b852aeebfdb193887c0450a8607
  $fToMarkupTool65 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w11
                   0#
                   ipv }) -}
45ed2e849be50e2c1dfd3f0400a55aa0
  $fToMarkupTool66 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f28d56081b4db6f93c9de08bae97ab20
  $fToMarkupTool67 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w11) -}
4b5a1b4fb869c1b1f6740b602dd448ce
  $fToMarkupTool68 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool64
                   Htmls.$fToMarkupTool60
                   Htmls.$fToMarkupTool56
                   Htmls.$fToMarkupTool69) -}
52d591399a9c1ed4e376d8d1adc16c3f
  $fToMarkupTool69 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool95
                   Htmls.$fToMarkupTool70) -}
94a53782b0903d0dd8b93039a9f4f2c2
  $fToMarkupTool7 :: Text.Blaze.Internal.MarkupM ()
  {- Unfolding: (Text.Blaze.Internal.Parent
                   @ ()
                   @ ()
                   Htmls.$fToMarkupTool27
                   Htmls.$fToMarkupTool23
                   Htmls.$fToMarkupTool19
                   Htmls.$fToMarkupTool8) -}
301b4b9329a9cd17364c47d120770491
  $fToMarkupTool70 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool91
                   Htmls.$fToMarkupTool87
                   Htmls.$fToMarkupTool85
                   Htmls.$fToMarkupTool71) -}
ab093cf1152061586a60bad8adbfa32f
  $fToMarkupTool71 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool81
                   Htmls.$fToMarkupTool77
                   Htmls.$fToMarkupTool75
                   Htmls.$fToMarkupTool72) -}
cede622e88607f7bc6fa0c920b9983b8
  $fToMarkupTool72 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool42
                   Htmls.$fToMarkupTool38
                   Htmls.$fToMarkupTool73
                   Text.Blaze.Html5.input) -}
622e2e917bca2b1fe6e15fe8b64b5f0c
  $fToMarkupTool73 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool74) -}
46ea46d60cbc813cf85ffa635ae4f3a5
  $fToMarkupTool74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "file"#) -}
e54aefab243f585c675e78559455b9cd
  $fToMarkupTool75 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool76) -}
f9e60957a30bd0e5de9d89e3521ff895
  $fToMarkupTool76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "image/jpeg"#) -}
df631f8eadc015185d2b2d768bf20503
  $fToMarkupTool77 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool80
                   Htmls.$fToMarkupTool79
                   Htmls.$fToMarkupTool_t13) -}
c8f03c8e615db8227a6d84cb84450c80
  $fToMarkupTool78 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w12
                   0#
                   ipv }) -}
a204609cbb8bc021f2bd53fb70297c90
  $fToMarkupTool79 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
019d57a78387860d587377b78611b3c9
  $fToMarkupTool8 :: Text.Blaze.Internal.MarkupM ()
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool15
                   Htmls.$fToMarkupTool11
                   Htmls.$fToMarkupTool9
                   Text.Blaze.Html5.img) -}
04bbae7d824ad28aa07911f267716806
  $fToMarkupTool80 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w12) -}
4fe35c3f827d8691e6b784527ec6e027
  $fToMarkupTool81 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool84
                   Htmls.$fToMarkupTool83
                   Htmls.$fToMarkupTool_t14) -}
a0beb3f35577436b4896add0e830686c
  $fToMarkupTool82 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w13
                   0#
                   ipv }) -}
043f9b26bea5961d8ef59f28087a40a9
  $fToMarkupTool83 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
e7f75a8697255cfa7f22c73b28f7b5d8
  $fToMarkupTool84 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w13) -}
6417af62033acb8cc47d0c7c20940a16
  $fToMarkupTool85 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool86) -}
7308ca610d736624c9b70d88c11962c5
  $fToMarkupTool86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleRight(this.files[0])"#) -}
c8eb4ba47dd4c1f61e59c006c5281ba5
  $fToMarkupTool87 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool90
                   Htmls.$fToMarkupTool89
                   Htmls.$fToMarkupTool_t15) -}
d65e69210515c4579b6769149e03d93b
  $fToMarkupTool88 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w14
                   0#
                   ipv }) -}
b797968453951ede52a53e8e7ee80d86
  $fToMarkupTool89 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f757ace55237539e3a83500056f4e427
  $fToMarkupTool9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool10) -}
25dde63a00fa1089ce7062114f65c823
  $fToMarkupTool90 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w14) -}
21593380b7f46dc55c98c527dd9a672f
  $fToMarkupTool91 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool94
                   Htmls.$fToMarkupTool93
                   Htmls.$fToMarkupTool_t16) -}
a516c0626ecae7da57c230c86fe44572
  $fToMarkupTool92 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w15
                   0#
                   ipv }) -}
b2fe5f03d50e31afc05c8040625767dd
  $fToMarkupTool93 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Htmls.$fToMarkupTool_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
2d6853796e42325d73ba043825414d04
  $fToMarkupTool94 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Htmls.$fToMarkupTool_w15) -}
d22c856aaef8e440af9e89e25166586f
  $fToMarkupTool95 :: Text.Blaze.Html.Html
  {- Strictness: m8,
     Unfolding: (Text.Blaze.Internal.AddAttribute
                   @ ()
                   Htmls.$fToMarkupTool91
                   Htmls.$fToMarkupTool87
                   Htmls.$fToMarkupTool96
                   Htmls.$fToMarkupTool71) -}
afeb10d6f654201d631051ab4c669c46
  $fToMarkupTool96 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Htmls.$fToMarkupTool97) -}
18d51d9356aba66d498706cdfbcaa0eb
  $fToMarkupTool97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "handleLeft(this.files[0])"#) -}
9fdf8969784758d126373549e19e6582
  $fToMarkupTool98 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool101
                   Htmls.$fToMarkupTool100
                   Htmls.$fToMarkupTool_t17) -}
6f108dbe3dae04324b075066968cdfe7
  $fToMarkupTool99 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Htmls.$fToMarkupTool_w16
                   0#
                   ipv }) -}
74d927ef83d786aa48a0b38c62ac5f79
  $fToMarkupTool_$ctoMarkup ::
    Models.Tool -> Text.Blaze.Internal.Markup
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (t :: Models.Tool) ->
                 Text.Blaze.Internal.Append
                   @ ()
                   @ ()
                   @ ()
                   Text.Blaze.Html5.docType
                   (Text.Blaze.Internal.Parent
                      @ ()
                      @ ()
                      Htmls.$fToMarkupTool197
                      Htmls.$fToMarkupTool193
                      Htmls.$fToMarkupTool189
                      (Text.Blaze.Internal.Append
                         @ ()
                         @ ()
                         @ ()
                         (Text.Blaze.Internal.Parent
                            @ ()
                            @ ()
                            Htmls.$fToMarkupTool185
                            Htmls.$fToMarkupTool181
                            Htmls.$fToMarkupTool177
                            (Text.Blaze.Internal.Append
                               @ ()
                               @ ()
                               @ ()
                               Htmls.$fToMarkupTool169
                               (Text.Blaze.Internal.Parent
                                  @ ()
                                  @ ()
                                  Htmls.$fToMarkupTool165
                                  Htmls.$fToMarkupTool161
                                  Htmls.$fToMarkupTool157
                                  (Text.Blaze.Internal.external
                                     @ ()
                                     (Text.Blaze.Internal.Append
                                        @ ()
                                        @ ()
                                        @ ()
                                        (Text.Blaze.Internal.Append
                                           @ ()
                                           @ ()
                                           @ ()
                                           Htmls.$fToMarkupTool154
                                           (case t of wild {
                                              Models.ZipImage -> Htmls.$fToMarkupTool151
                                              Models.Spiral -> Htmls.$fToMarkupTool148
                                              Models.Frame -> Htmls.$fToMarkupTool145
                                              Models.Checkerboard -> Htmls.$fToMarkupTool142
                                              Models.Rave -> Htmls.$fToMarkupTool141 }))
                                        Htmls.$fToMarkupTool138)))))
                         Htmls.$fToMarkupTool1))) -}
d4901c4d899cc9eef63698c2cc65622e
  $fToMarkupTool_f :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool168
                   Htmls.$fToMarkupTool176
                   Htmls.$fToMarkupTool_t28) -}
2b856c9701c1bc7f20fdc1d342b74b2c
  $fToMarkupTool_f1 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool164
                   Htmls.$fToMarkupTool175
                   Htmls.$fToMarkupTool_t27) -}
9ea97a14b694c7467d88e8e3e954ca61
  $fToMarkupTool_f2 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Htmls.$fToMarkupTool160
                   Htmls.$fToMarkupTool174
                   Htmls.$fToMarkupTool_t26) -}
7cab9e6f4563c160b82da87e51742a6b
  $fToMarkupTool_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool12 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b46a9e50ab0077b82d2d3873e87fd678
  $fToMarkupTool_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool57 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9a80fece681b340d3d370c741ac46cbe
  $fToMarkupTool_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool61 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e81ac1867ec3e4dc20b6be86a47ba348
  $fToMarkupTool_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool65 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9002b8ecac812cab82354d77c663687a
  $fToMarkupTool_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool78 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
855b37b67d74b0011e2c1b5a0b07f5f6
  $fToMarkupTool_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool82 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3296cfe73a9233a37f9f321126754317
  $fToMarkupTool_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool88 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
bc2975db538a311585c8c4f8b55f0efa
  $fToMarkupTool_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool92 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e4d9514f325bd7f57968b0b776d85511
  $fToMarkupTool_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool99 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
5ca1d11994c55b3431f6e6e1cf4e17ad
  $fToMarkupTool_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool103 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
83d0ca28a2c7e0e6bcdf6553363f4ebe
  $fToMarkupTool_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool107 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e6e746e9cb7ed413d8aeff8355321207
  $fToMarkupTool_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool16 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
5f42090bb0e2bacafda2956d3ad69345
  $fToMarkupTool_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool115 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
86643b49796f070700554c2cac704f69
  $fToMarkupTool_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool119 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
dc62be372d86079b168f7692662a83e2
  $fToMarkupTool_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool123 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ee2bdd187413bdb4c6e4cbc8de3ab51e
  $fToMarkupTool_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool127 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9c1d8e84a70a81d888fbc91f78e7c3a8
  $fToMarkupTool_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool131 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
12df107fce12dc6f8298f892ca144058
  $fToMarkupTool_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool135 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
313ac17981cfe72f3584ea9558126dbf
  $fToMarkupTool_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool158 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a00686178c37023833de7af9ff4fb96b
  $fToMarkupTool_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool162 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
af036d459c04015ca78debfd4b9d16ac
  $fToMarkupTool_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool166 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9f4ecbeaf8c46cc459f52de50310edf1
  $fToMarkupTool_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool178 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8ea0ebad619a7d879e0b6e59ac0d4152
  $fToMarkupTool_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool20 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9f209a45a5fd3500fbbb14f3777ba36f
  $fToMarkupTool_t30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool182 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4807b4409bc50ffe7eff4eed7d17dc97
  $fToMarkupTool_t31 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool186 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a6ba277a51d64e8ce47f2d5afd36523f
  $fToMarkupTool_t32 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool190 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1460215ab3a2f5e9e4ac4f48e5c905f8
  $fToMarkupTool_t33 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool194 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
89a8c60300938cd0361e9a98d82a5fbb
  $fToMarkupTool_t34 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool198 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c63a01e06a1214814f9268c0c71c542a
  $fToMarkupTool_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool24 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
cc21c576d370c07282c4451dc7037893
  $fToMarkupTool_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool28 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
522e56b8bd6f752eae244356766b8216
  $fToMarkupTool_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool39 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
25b6b74c0814a84799ce0ec218c856c0
  $fToMarkupTool_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool43 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
07268e68f3bebc69f7c97087b2dc841e
  $fToMarkupTool_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool49 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6d37dd1630ee2a3b617ff49ffb5c3107
  $fToMarkupTool_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Htmls.$fToMarkupTool53 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
af60860e327eb85aa7ddee0405b9e7bc
  $fToMarkupTool_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " id=\""#) -}
8aa22a3f1bbe621d968e158ddd9ad5c1
  $fToMarkupTool_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "id"#) -}
1fc73cb0dacf2f7550aca5d62400232f
  $fToMarkupTool_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<tr"#) -}
d511312adb97acda05a2e24ba0c3f370
  $fToMarkupTool_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "tr"#) -}
a3f7c5fd7807e1967c060d88738c18f2
  $fToMarkupTool_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " accept=\""#) -}
4be23fcf6b3af12d5cf5f0c99fea5165
  $fToMarkupTool_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "accept"#) -}
d3ee2ff29eb3858b841c5d5f3a322b13
  $fToMarkupTool_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onchange=\""#) -}
cc6149ce27fbc22abaaf449267067b22
  $fToMarkupTool_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onchange"#) -}
a1d9d7e6b598a26028a09a4864980580
  $fToMarkupTool_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</table>"#) -}
5d6b34f90fcec30467f01275e2c5ff4b
  $fToMarkupTool_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<table"#) -}
81c920f68688f08f4d285555f85cd904
  $fToMarkupTool_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "table"#) -}
fd13c75f186df05d8cbd9f985eff2739
  $fToMarkupTool_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</p>"#) -}
d8ff1da95b87e431892ca7296ff09973
  $fToMarkupTool_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</td>"#) -}
17668ff462d8bbf5e48951104ab3a9b5
  $fToMarkupTool_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<p"#) -}
50a0435f55e93b9ca7928228cf4fddce
  $fToMarkupTool_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "p"#) -}
7a807e77ca87b2196853cb5735b44962
  $fToMarkupTool_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</body>"#) -}
8d6f55526ef9d446c66aec92398cb3e7
  $fToMarkupTool_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<body"#) -}
22ecd1802343685b31cdc18f6a6a2d58
  $fToMarkupTool_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "body"#) -}
21a7401f629e92bc4b489bacc37cf7bf
  $fToMarkupTool_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</script>"#) -}
e1674b5eacfa1af0450fc9c0c3615487
  $fToMarkupTool_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<script"#) -}
a34404155a3b5b7ac29ba7d72fadd507
  $fToMarkupTool_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "script"#) -}
2e068af3edd4f8b77c9c9f7bf66c2970
  $fToMarkupTool_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</head>"#) -}
f3b44a8832a65a88b7a475d9eacdcece
  $fToMarkupTool_w29 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<head"#) -}
c2870a811716da9eabf6385c2666bacd
  $fToMarkupTool_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<td"#) -}
1fb52aa3f8b4911aa01cfb1008b5eb9c
  $fToMarkupTool_w30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "head"#) -}
c8161739aa36aa3fe2d6e4f10e84fba9
  $fToMarkupTool_w31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</html>"#) -}
462981b13d501fa3c77d8ac17a716d8a
  $fToMarkupTool_w32 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<html"#) -}
09cc8f61d3fc71fca8b527657ea99803
  $fToMarkupTool_w33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
4b5b1791171d6672c49a8e9e10d00c0f
  $fToMarkupTool_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "td"#) -}
b96c64f6e44fe0c53ed5e9f5e1a0254a
  $fToMarkupTool_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " type=\""#) -}
3ba7f516e5a172ac8fd6deb0840e0956
  $fToMarkupTool_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "type"#) -}
db7b176e510b4b11ae0b83601d10f5f1
  $fToMarkupTool_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " onclick=\""#) -}
94f082a110d9065cfec9b6c2025bd1b7
  $fToMarkupTool_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "onclick"#) -}
72b5b021b3c07a709cb6626429ce3fd5
  $fToMarkupTool_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</tr>"#) -}
c84ca684a3d4594bcfb6aa97036bd9c7
  $tcHTMLBlaze :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14897272260289620837##
                   14412945957028595674##
                   Htmls.$trModule
                   Htmls.$tcHTMLBlaze1) -}
abc81367338c53ce6edbcc8645f04a90
  $tcHTMLBlaze1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HTMLBlaze"#) -}
2b1b7ba1a15920fa5ba87d2a82c4c1f7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Htmls.$trModule2 Htmls.$trModule1) -}
029d6c90b2c528d56af34d0663f89e0f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Htmls"#) -}
849e1404f8989a1534b0e00704c445be
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk"#) -}
8ef2a5d0fe9b6ebca40c9113fc275399
  $w$cmimeRender ::
    Text.Blaze.ToMarkup a =>
    a -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A)><L,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Text.Blaze.ToMarkup a) (w1 :: a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                      @ ()
                      Htmls.$fMimeRenderTYPEHTMLBlazea1
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                      (Text.Blaze.toMarkup @ a w w1))) -}
dcf0c3556f1dc5d5f3110238bb6e4e98
  data HTMLBlaze
instance Servant.API.ContentTypes.Accept [TYPE, Htmls.HTMLBlaze]
  = Htmls.$fAcceptTYPEHTMLBlaze
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, Text.Blaze.Internal.MarkupM]
  = Htmls.$fMimeRenderTYPEHTMLBlazeMarkupM
instance Servant.API.ContentTypes.MimeRender [TYPE,
                                              Htmls.HTMLBlaze, .]
  = Htmls.$fMimeRenderTYPEHTMLBlazea
instance Text.Blaze.ToMarkup [Models.Tool] = Htmls.$fToMarkupTool
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

