
==================== FINAL INTERFACE ====================
2017-07-04 19:27:51.4948 UTC

interface picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Lib 8002
  interface hash: 0d2b0575b056ba38218a52ee70eca058
  ABI hash: 59ad9d3daa1122c0e26082ff62d73b61
  export-list hash: 7354d3e2f971af1d7438fd5c3da664ee
  orphan hash: 8b207d14d0563adba52cea3ee0184c18
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.imagApp
  Lib.zipSrv
module dependencies: Api Grid Htmls Models Pixels
package dependencies: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed
                      aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      appar-0.1.4@appar-0.1.4-DGWHHt2WRn9FI49prcwO9
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1@async-2.1.1-4n6HEMPJR2eJK0JpvCfuPK
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      comonad-5@comonad-5-BYydH82fZIS1vK4HJ9v9HH
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptonite-0.21@cryptonite-0.21-Er8yd96TMUKJhhoyDY0pav
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      file-embed-0.0.10@file-embed-0.0.10-KWMmUDaNSRP7AxWSEHlrrK
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-date-0.0.6.1@http-date-0.0.6.1-GjuZLg09ks27Bd9oI0ciJu
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      http2-1.6.3@http2-1.6.3-82OptI2A5ESI6RhudSAT6 integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4
                      memory-0.14.2@memory-0.14.2-CfVX41PhmpJKBOUPv4ybaa
                      microlens-0.4.8.0@microlens-0.4.8.0-5PXN9DedWooJg6UJ24ter0
                      microlens-th-0.4.1.1@microlens-th-0.4.1.1-26cEGwGOrIB7ilX0jLiOT0
                      mime-types-0.1.0.7@mime-types-0.1.0.7-31dnC2ifQ9r5TApUZagLPk
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-loops-0.4.3@monad-loops-0.4.3-ERCN4ZKCeeS5SRhwqXsLBP
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.1@network-2.6.3.1-ABFtZSq90Z9BfMXNiqgBoe
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      psqueues-0.2.2.3@psqueues-0.2.2.3-9nDehYbroydEusqdFJopTa
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      servant-JuicyPixels-0.3.0.2@servant-JuicyPixels-0.3.0.2-KFDh0ZSrRqdHyQZspaSYy6
                      servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai
                      simple-sendfile-0.2.25@simple-sendfile-0.2.25-JJ9zm1wZxYIARxlVa3oQgs
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-Ec7F62APEFzLqTOvsWpyBa
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      wai-3.2.1.1@wai-3.2.1.1-9yigkTgtHNLHh2mXrnIXo
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-2hcSbp6yMAsGQQTfre28LP
                      warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY
                      word8-0.1.2@word8-0.1.2-9WDPGCTpW7JJnsiAQavtd1
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-ABFtZSq90Z9BfMXNiqgBoe:Network.Socket
         picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Htmls
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tga
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tiff
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4:Data.IP.Range
                         microlens-0.4.8.0@microlens-0.4.8.0-5PXN9DedWooJg6UJ24ter0:Lens.Micro.Internal
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Grid
                         picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal
                         servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture c28c03ed1b5e2bad2d1a6a2be36f49e1
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types 22b7a216fd591cfd9ca02dad94569487
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Trans d69bc2e104a90fb918d853b240f7af2e
import  -/  Api cec13e727da71c433fe3c19aad96d2b9
  exports: c1ce43ad452a44a0fd00d3408a502629
  ImageAPI aaa395ca62f141a1913875c4dcb4b3a8
  imageApi d3a21f35e20458b9da28fdea66834d67
import  -/  Htmls c8f882b4e9492955dcce536e246ffd85
  exports: 3aa197b1619ffdb8f2e6e00c837ee2cb
import  -/  Models 5992fa304552c7c8ef828c4d5dfbaa4c
  exports: ed66af611eab7c3185e2115f774dae78
  Checkerboard 4556cccb471b9e23ec232714fec9e5ef
  Draw 649a4d9ca566e87ee522a85c2315c827
  Frame 1e4081a8fa652880cc6d6d9da735b78c
  Rave fac933797deb9962eff4d4bb075a0297
  Spiral 48f6c0586db73bcd57232151895cf600
  ZipImage 13d8b8fa101f7f89d31128513beda6fc
import  -/  Pixels 219a079f4f81a8a6d27c3273aebd6b68
  exports: 43e442eda0600fa3db68945090dd545d
  brightnessRGB8 afd0bc14c1200765deb48e2c9dbde010
  checkerboard 098bdd2ce69f5f47ea264241d4df530c
  imageInImage 30a1fd0877a29cdf51404a22acb1627c
  sprlImages ea38a3d0a5c30f42a3c036336a0b792b
  zipImages abe7f842c1defd430aeaad43f72d9b56
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Alternative 23b24c34dda253c03c99ee6490f6a518
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant f16ad379d06ca393241deec48780d4ce
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server 6c78f2fd217ad1104fce5a8747d45e5e
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal 8016294a2c09ad55135b1e9e2607120d
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Utils.StaticFiles 15274c23e2b46e48f4b5557ce6cd227a
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TVar 8271fdeaf6f41f205dbe31243cf91390
import  -/  warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY:Network.Wai.Handler.Warp 6b4cd67732b77647b92c9f9152f22407
import  -/  warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY:Network.Wai.Handler.Warp.Run 52f6140d106c325277d02cdea63693f7
aa20f10cae4b81e6318f96d75d73b290
  $s$fAllCTRender:a ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ '[]
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a9
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a1)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ '[]
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a9
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a1) -}
6e1b572ab6e873585bdae8528f1631dd
  $s$fAllCTRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0 -}
8cdf13eb075318be6429afc799a9cef7
  $s$fAllCTRender:a10 ::
    Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)) ->
                 Servant.JuicyPixels.$fAcceptTYPEJPEG1) -}
66319235ff51e21e07d6ee15e18a1d51
  $s$fAllCTRender:a11 ::
    Servant.API.ContentTypes.AllCTRender
      '[Api.GIFAnim 10]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Api.GIFAnim 10]
                  @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ (Api.GIFAnim 10)
                     @ '[]
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Lib.$s$fAllCTRender:a16
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a12)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ (Api.GIFAnim 10)
                     @ '[]
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Lib.$s$fAllCTRender:a16
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a12) -}
1307370bdfa214fc80836684892cb37b
  $s$fAllCTRender:a12 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Api.GIFAnim 10]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a1 -}
fe20452439b4f2dc48b15d737ee6d195
  $s$fAllCTRender:a13 :: GHC.TypeLits.KnownNat 10
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a14
                  `cast`
                (Trans
                     (Sym (GHC.TypeLits.N:SNat[0] <10>_P))
                     (Sym (GHC.TypeLits.N:KnownNat[0]) <10>_N)) -}
5f6f8282e995aaf285caec199d4c30c6
  $s$fAllCTRender:a14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
b48e6568dd458275d7095bb117b72d95
  $s$fAllCTRender:a15 ::
    Servant.API.ContentTypes.MimeRender
      (Api.GIFAnim 10)
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEGIFAnim[] -}
dd83aa427b34491ff164cc0e7ba5e9b4
  $s$fAllCTRender:a16 ::
    Servant.API.ContentTypes.Accept (Api.GIFAnim 10)
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a17
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Api.GIFAnim 10>_N)) -}
3b01ccd5f7bb03fe204bafe3c3447dd5
  $s$fAllCTRender:a17 ::
    Data.Proxy.Proxy (Api.GIFAnim 10)
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Data.Proxy.Proxy (Api.GIFAnim 10)) ->
                 Api.$fAccept(->)GIFAnim1) -}
dc3d1f6612c10cb0885b9a8f31b0b864
  $s$fAllCTRender:a18 ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ GHC.Types.Bool
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a19)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ GHC.Types.Bool
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a19) -}
4c36323a044e5127fa5311cdc2252e18
  $s$fAllCTRender:a19 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a2 -}
157a97a365b08dbdde8d3a98f096da08
  $s$fAllCTRender:a2 ::
    Data.Proxy.Proxy '[Servant.JuicyPixels.JPEG 100]
    -> Codec.Picture.Types.DynamicImage
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.JuicyPixels.JPEG 100])
                   (eta1 :: Codec.Picture.Types.DynamicImage) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.JuicyPixels.$fAcceptTYPEJPEG1,
                    Codec.Picture.Saving.imageToJpg (GHC.Types.I# 100#) eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
454bb33280eee9e35857f79c59077895
  $s$fAllCTRender:a20 ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> GHC.Types.Bool
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (eta1 :: GHC.Types.Bool) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.API.ContentTypes.$fAcceptTYPEJSON1,
                    Lib.$s$fAllCTRender:a_$sencode eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
85e4479a4d4db3a403d7ea3e00e5d3db
  $s$fAllCTRender:a21 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa -}
0394ff5113da251b4e8ae14e54606651
  $s$fAllCTRender:a22 ::
    Servant.API.ContentTypes.AllCTRender '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Htmls.HTMLBlaze]
                  @ Models.Tool
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Htmls.HTMLBlaze
                     @ '[]
                     @ Models.Tool
                     Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a23)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Htmls.HTMLBlaze
                     @ '[]
                     @ Models.Tool
                     Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a23) -}
ce8493cdca31f02ced3bb493ddab0041
  $s$fAllCTRender:a23 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a3 -}
3ab2574e495e10930392b5da235c60fc
  $s$fAllCTRender:a24 ::
    Data.Proxy.Proxy '[Htmls.HTMLBlaze]
    -> Models.Tool
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Htmls.HTMLBlaze])
                   (eta1 :: Models.Tool) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Htmls.$fAcceptTYPEHTMLBlaze1,
                    Data.ByteString.Builder.toLazyByteString
                      (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                         @ ()
                         Htmls.$fMimeRenderTYPEHTMLBlazea1
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                         (Htmls.$fToMarkupTool_$ctoMarkup eta1)))
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
fcbd750b6b4206d23747263ffc6d6c35
  $s$fAllCTRender:a25 ::
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze Models.Tool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea -}
5203f0084257ca94a26ba63dfd8ff29a
  $s$fAllCTRender:a3 ::
    Servant.API.ContentTypes.MimeRender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage -}
5f9f27f597a3f01a1d2555577bf3a519
  $s$fAllCTRender:a4 ::
    Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)
    -> Codec.Picture.Types.DynamicImage
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100))
                   (eta1 :: Codec.Picture.Types.DynamicImage) ->
                 Codec.Picture.Saving.imageToJpg (GHC.Types.I# 100#) eta1) -}
584685cbe3bfc811f7e7640e5f88d37d
  $s$fAllCTRender:a5 ::
    'GHC.Types.True Data.Type.Equality.~ 'GHC.Types.True
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a6
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <GHC.Types.Bool>_N) <'GHC.Types.True>_N <'GHC.Types.True>_N) -}
7c80e4fa655aaa8153c7efd68ac369e6
  $s$fAllCTRender:a6 :: 'GHC.Types.True GHC.Types.~~ 'GHC.Types.True
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   @ 'GHC.Types.True
                   @ 'GHC.Types.True
                   @~ <'GHC.Types.True>_N) -}
7a871f3d7fa01642006b1539fa4e1e99
  $s$fAllCTRender:a7 :: GHC.TypeLits.KnownNat 100
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a8
                  `cast`
                (Trans
                     (Sym (GHC.TypeLits.N:SNat[0] <100>_P))
                     (Sym (GHC.TypeLits.N:KnownNat[0]) <100>_N)) -}
7edeed3373acb1f8202beccffce81ec1
  $s$fAllCTRender:a8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
53c2fdb912ed6d02833895915631be88
  $s$fAllCTRender:a9 ::
    Servant.API.ContentTypes.Accept (Servant.JuicyPixels.JPEG 100)
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a10
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Servant.JuicyPixels.JPEG 100>_N)) -}
1805d1ec42175f37ff801b48e825a057
  $s$fAllCTRender:a_$s$fAllMimeRender:a0 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a3)
                  Lib.$s$fAllCTRender:a2 -}
d5ef5e95a1c56e4a18bab78806bd4a17
  $s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender ::
    Data.Proxy.Proxy '[Api.GIFAnim 10]
    -> [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Api.GIFAnim 10])
                   (eta1 :: [Codec.Picture.Types.Image
                               Codec.Picture.Types.PixelRGB8]) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   ((Api.$fMimeRenderTYPEGIFAnim[]_$cp1MimeRender
                       @ 10
                       Lib.$s$fAllCTRender:a13
                       Lib.$s$fAllCTRender:a5
                         `cast`
                       ((Data.Type.Equality.~)
                          <GHC.Types.Bool>_N
                          (Sym (LeqDef (<10>_N, <10>_N)))
                          <'GHC.Types.True>_N)_R)
                      `cast`
                    (Servant.API.ContentTypes.N:Accept[0]
                         <GHC.Types.*>_N <Api.GIFAnim 10>_N)
                      (Data.Proxy.Proxy @ GHC.Types.* @ (Api.GIFAnim 10)),
                    Api.$fMimeRenderTYPEGIFAnim[]_$cmimeRender
                      @ 10
                      Lib.$s$fAllCTRender:a13
                      Lib.$s$fAllCTRender:a5
                        `cast`
                      ((Data.Type.Equality.~)
                         <GHC.Types.Bool>_N
                         (Sym (LeqDef (<10>_N, <10>_N)))
                         <'GHC.Types.True>_N)_R
                      (Data.Proxy.Proxy @ GHC.Types.* @ (Api.GIFAnim 10))
                      eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
06cb8f83ee0bafd0041144ecccfca422
  $s$fAllCTRender:a_$s$fAllMimeRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Api.GIFAnim 10]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Api.GIFAnim 10]
                  @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ (Api.GIFAnim 10)
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Lib.$s$fAllCTRender:a15)
                  Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender -}
b8d1bb511f7036e78f1066e64dd4b466
  $s$fAllCTRender:a_$s$fAllMimeRender:a2 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Servant.API.ContentTypes.JSON
                     @ GHC.Types.Bool
                     Lib.$s$fAllCTRender:a21)
                  Lib.$s$fAllCTRender:a20 -}
beb32b0ff15aaa357161b5cd5806cf06
  $s$fAllCTRender:a_$s$fAllMimeRender:a3 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Htmls.HTMLBlaze]
                  @ Models.Tool
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Htmls.HTMLBlaze
                     @ Models.Tool
                     Lib.$s$fAllCTRender:a25)
                  Lib.$s$fAllCTRender:a24 -}
574e1ace4fa634f151efaa5dc0f36002
  $s$fAllCTRender:a_$s$fMimeRenderTYPEGIFAnim[] ::
    Servant.API.ContentTypes.MimeRender
      (Api.GIFAnim 10)
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ (Api.GIFAnim 10)
                  @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                  (Api.$fMimeRenderTYPEGIFAnim[]_$cp1MimeRender
                     @ 10
                     Lib.$s$fAllCTRender:a13
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<10>_N, <10>_N)))
                        <'GHC.Types.True>_N)_R)
                  (Api.$fMimeRenderTYPEGIFAnim[]_$cmimeRender
                     @ 10
                     Lib.$s$fAllCTRender:a13
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<10>_N, <10>_N)))
                        <'GHC.Types.True>_N)_R) -}
b353e5a99471921e90f4517f8d25fa72
  $s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea ::
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Models.Tool
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender
                     @ Models.Tool
                     Htmls.$fToMarkupTool)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender
                     @ Models.Tool
                     Htmls.$fToMarkupTool) -}
bf176f22a138f93091e75973ce2d2b06
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage ::
    Servant.API.ContentTypes.MimeRender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ (Servant.JuicyPixels.JPEG 100)
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage_$cp1MimeRender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R)
                  Lib.$s$fAllCTRender:a4 -}
dc497fa30eb2c0d4c0075adedbd580ac
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                     @ GHC.Types.Bool
                     Data.Aeson.Types.ToJSON.$fToJSONBool)
                  Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender -}
d2fedc1a7f7a1dcea7b4937cfc54c220
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> GHC.Types.Bool -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: GHC.Types.Bool) ->
                 Lib.$s$fAllCTRender:a_$sencode eta) -}
b10bda0d328e7c64296ac138a8dd2b0f
  $s$fAllCTRender:a_$sencode ::
    GHC.Types.Bool -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Bool) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Data.Aeson.Encoding.Internal.bool eta)
                     `cast`
                   (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                        <Data.Aeson.Types.Internal.Value>_P)) -}
f9083bb866c17d7d825355929b7263bb
  $s$fAllMimeUnrender:a ::
    Servant.API.ContentTypes.AllMimeUnrender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$cp1AllMimeUnrender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     @ '[]
                     Lib.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a
                        @ Codec.Picture.Types.DynamicImage))
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$callMimeUnrender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     @ '[]
                     Lib.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a
                        @ Codec.Picture.Types.DynamicImage)) -}
2b05f500d14a37a9d8fcf2fab0035d58
  $s$fAllMimeUnrender:a1 ::
    Servant.API.ContentTypes.MimeUnrender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage -}
4b8028474e07a85e52951ac8ae9cebb4
  $s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage ::
    Servant.API.ContentTypes.MimeUnrender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ (Servant.JuicyPixels.JPEG 100)
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage_$cp1MimeRender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R)
                  (Servant.JuicyPixels.$fMimeUnrenderTYPEJPEGDynamicImage_$cmimeUnrender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R) -}
747c1fc17a09a6fcb1edcd8088c322c2
  $sserve2 ::
    Data.Proxy.Proxy
      (("postImg"
        Servant.API.Sub.:> (Servant.API.Capture.Capture
                              "true/false" GHC.Types.Bool
                            Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                  '[Servant.JuicyPixels.JPEG 100]
                                                  Codec.Picture.Types.DynamicImage
                                                Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                     '[Servant.API.ContentTypes.JSON]
                                                                     GHC.Types.Bool)))
       Servant.API.Alternative.:<|> (("image"
                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                            "tool" GHC.Base.String
                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                               '[Servant.JuicyPixels.JPEG
                                                                                   100]
                                                                               Codec.Picture.Types.DynamicImage))
                                     Servant.API.Alternative.:<|> (("gif"
                                                                    Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Api.GIFAnim
                                                                                                                 10]
                                                                                                             [Codec.Picture.Types.Image
                                                                                                                Codec.Picture.Types.PixelRGB8]))
                                                                   Servant.API.Alternative.:<|> (("show"
                                                                                                  Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                        "tool"
                                                                                                                        GHC.Base.String
                                                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                           '[Htmls.HTMLBlaze]
                                                                                                                                           Models.Tool))
                                                                                                 Servant.API.Alternative.:<|> Servant.API.Raw.Raw))))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("postImg"
              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                    "true/false" GHC.Types.Bool
                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool)))
             Servant.API.Alternative.:<|> (("image"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "tool" GHC.Base.String
                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                         100]
                                                                                     Codec.Picture.Types.DynamicImage))
                                           Servant.API.Alternative.:<|> (("gif"
                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                "tool"
                                                                                                GHC.Base.String
                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                   '[Api.GIFAnim
                                                                                                                       10]
                                                                                                                   [Codec.Picture.Types.Image
                                                                                                                      Codec.Picture.Types.PixelRGB8]))
                                                                         Servant.API.Alternative.:<|> (("show"
                                                                                                        Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                              "tool"
                                                                                                                              GHC.Base.String
                                                                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                 '[Htmls.HTMLBlaze]
                                                                                                                                                 Models.Tool))
                                                                                                       Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ env
                   (w :: Data.Proxy.Proxy
                           (("postImg"
                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                   "true/false" GHC.Types.Bool
                                                 Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                       '[Servant.JuicyPixels.JPEG
                                                                           100]
                                                                       Codec.Picture.Types.DynamicImage
                                                                     Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                          '[Servant.API.ContentTypes.JSON]
                                                                                          GHC.Types.Bool)))
                            Servant.API.Alternative.:<|> (("image"
                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                 "tool"
                                                                                 GHC.Base.String
                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                                        100]
                                                                                                    Codec.Picture.Types.DynamicImage))
                                                          Servant.API.Alternative.:<|> (("gif"
                                                                                         Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                               "tool"
                                                                                                               GHC.Base.String
                                                                                                             Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                  '[Api.GIFAnim
                                                                                                                                      10]
                                                                                                                                  [Codec.Picture.Types.Image
                                                                                                                                     Codec.Picture.Types.PixelRGB8]))
                                                                                        Servant.API.Alternative.:<|> (("show"
                                                                                                                       Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                             "tool"
                                                                                                                                             GHC.Base.String
                                                                                                                                           Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                '[Htmls.HTMLBlaze]
                                                                                                                                                                Models.Tool))
                                                                                                                      Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))))
                   (w1 :: Servant.Server.Internal.Context.Context '[])
                   (w2 :: Servant.Server.Internal.RoutingApplication.Delayed
                            env
                            (Servant.Server.Internal.Server
                               (("postImg"
                                 Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                       "true/false" GHC.Types.Bool
                                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                           '[Servant.JuicyPixels.JPEG
                                                                               100]
                                                                           Codec.Picture.Types.DynamicImage
                                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                              '[Servant.API.ContentTypes.JSON]
                                                                                              GHC.Types.Bool)))
                                Servant.API.Alternative.:<|> (("image"
                                                               Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                     "tool"
                                                                                     GHC.Base.String
                                                                                   Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                        '[Servant.JuicyPixels.JPEG
                                                                                                            100]
                                                                                                        Codec.Picture.Types.DynamicImage))
                                                              Servant.API.Alternative.:<|> (("gif"
                                                                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                   "tool"
                                                                                                                   GHC.Base.String
                                                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                      '[Api.GIFAnim
                                                                                                                                          10]
                                                                                                                                      [Codec.Picture.Types.Image
                                                                                                                                         Codec.Picture.Types.PixelRGB8]))
                                                                                            Servant.API.Alternative.:<|> (("show"
                                                                                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                 "tool"
                                                                                                                                                 GHC.Base.String
                                                                                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                    '[Htmls.HTMLBlaze]
                                                                                                                                                                    Models.Tool))
                                                                                                                          Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))))) ->
                 case w of w3 { Data.Proxy.Proxy ->
                 Lib.$w$dHasServer
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (("postImg"
                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                "true/false" GHC.Types.Bool
                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                    '[Servant.JuicyPixels.JPEG 100]
                                                                    Codec.Picture.Types.DynamicImage
                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                       GHC.Types.Bool)))
                         Servant.API.Alternative.:<|> (("image"
                                                        Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                              "tool" GHC.Base.String
                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                 '[Servant.JuicyPixels.JPEG
                                                                                                     100]
                                                                                                 Codec.Picture.Types.DynamicImage))
                                                       Servant.API.Alternative.:<|> (("gif"
                                                                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                            "tool"
                                                                                                            GHC.Base.String
                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                               '[Api.GIFAnim
                                                                                                                                   10]
                                                                                                                               [Codec.Picture.Types.Image
                                                                                                                                  Codec.Picture.Types.PixelRGB8]))
                                                                                     Servant.API.Alternative.:<|> (("show"
                                                                                                                    Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                          "tool"
                                                                                                                                          GHC.Base.String
                                                                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                             '[Htmls.HTMLBlaze]
                                                                                                                                                             Models.Tool))
                                                                                                                   Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))))
                   w1
                   w2 }) -}
1b6f766083687160dfd66d0d814fda67
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
da8275d9e3e7619c23248f39c575ca4f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
e4c920c61777eecfc27c8bb520546817
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-HoOlrcFQZ6zLB3TVOgtkf"#) -}
6ac4946fdc38e275a759ffd9e2c811b4
  $w$dHasServer ::
    Data.Proxy.Proxy
      (("postImg"
        Servant.API.Sub.:> (Servant.API.Capture.Capture
                              "true/false" GHC.Types.Bool
                            Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                  '[Servant.JuicyPixels.JPEG 100]
                                                  Codec.Picture.Types.DynamicImage
                                                Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                     '[Servant.API.ContentTypes.JSON]
                                                                     GHC.Types.Bool)))
       Servant.API.Alternative.:<|> (("image"
                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                            "tool" GHC.Base.String
                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                               '[Servant.JuicyPixels.JPEG
                                                                                   100]
                                                                               Codec.Picture.Types.DynamicImage))
                                     Servant.API.Alternative.:<|> (("gif"
                                                                    Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Api.GIFAnim
                                                                                                                 10]
                                                                                                             [Codec.Picture.Types.Image
                                                                                                                Codec.Picture.Types.PixelRGB8]))
                                                                   Servant.API.Alternative.:<|> (("show"
                                                                                                  Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                        "tool"
                                                                                                                        GHC.Base.String
                                                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                           '[Htmls.HTMLBlaze]
                                                                                                                                           Models.Tool))
                                                                                                 Servant.API.Alternative.:<|> Servant.API.Raw.Raw))))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("postImg"
              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                    "true/false" GHC.Types.Bool
                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool)))
             Servant.API.Alternative.:<|> (("image"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "tool" GHC.Base.String
                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                         100]
                                                                                     Codec.Picture.Types.DynamicImage))
                                           Servant.API.Alternative.:<|> (("gif"
                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                "tool"
                                                                                                GHC.Base.String
                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                   '[Api.GIFAnim
                                                                                                                       10]
                                                                                                                   [Codec.Picture.Types.Image
                                                                                                                      Codec.Picture.Types.PixelRGB8]))
                                                                         Servant.API.Alternative.:<|> (("show"
                                                                                                        Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                              "tool"
                                                                                                                              GHC.Base.String
                                                                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                 '[Htmls.HTMLBlaze]
                                                                                                                                                 Models.Tool))
                                                                                                       Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: [0] -}
2bd671b510e5218689d3283de46cd5d2
  $wzipSrv ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> (# GHC.Types.Bool
          -> Codec.Picture.Types.DynamicImage
          -> Control.Monad.Trans.Except.ExceptT
               Servant.Server.Internal.ServantErr.ServantErr
               GHC.Types.IO
               GHC.Types.Bool,
          (GHC.Base.String
           -> Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr
                GHC.Types.IO
                Codec.Picture.Types.DynamicImage)
          Servant.API.Alternative.:<|> ((GHC.Base.String
                                         -> Control.Monad.Trans.Except.ExceptT
                                              Servant.Server.Internal.ServantErr.ServantErr
                                              GHC.Types.IO
                                              [Codec.Picture.Types.Image
                                                 Codec.Picture.Types.PixelRGB8])
                                        Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                       -> Control.Monad.Trans.Except.ExceptT
                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                            GHC.Types.IO
                                                                            Models.Tool)
                                                                      Servant.API.Alternative.:<|> Servant.Server.Internal.Server
                                                                                                     Servant.API.Raw.Raw)) #)
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [0] -}
bc4a3236cc78428bb708fd5face6575c
  imagApp :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.imagApp1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
900e4ee137dc7cb124dd63b7efd99f4f
  imagApp1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.atomically#
                        @ (GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                        Lib.imagApp8
                        s of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.atomically#
                        @ (GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                        Lib.imagApp3
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 Network.Wai.Handler.Warp.Run.$wrunSettings
                   Lib.imagApp2
                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                     `cast`
                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings13
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                     `cast`
                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Types.IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   GHC.Types.False
                   Network.Wai.Handler.Warp.Settings.defaultSettings8
                     `cast`
                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                   GHC.Types.True
                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Network.HTTP.Types.Status.Status>_R
                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (Servant.Server.serveWithContext
                      @ Api.ImageAPI
                      @ '[]
                      Lib.$sserve2
                        `cast`
                      (Sym (Servant.Server.Internal.N:HasServer[0]
                                <*>_N
                                <("postImg"
                                  Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                        "true/false" GHC.Types.Bool
                                                      Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                            '[Servant.JuicyPixels.JPEG
                                                                                100]
                                                                            Codec.Picture.Types.DynamicImage
                                                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                               '[Servant.API.ContentTypes.JSON]
                                                                                               GHC.Types.Bool)))
                                 Servant.API.Alternative.:<|> (("image"
                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                      "tool"
                                                                                      GHC.Base.String
                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                         '[Servant.JuicyPixels.JPEG
                                                                                                             100]
                                                                                                         Codec.Picture.Types.DynamicImage))
                                                               Servant.API.Alternative.:<|> (("gif"
                                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                    "tool"
                                                                                                                    GHC.Base.String
                                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                       '[Api.GIFAnim
                                                                                                                                           10]
                                                                                                                                       [Codec.Picture.Types.Image
                                                                                                                                          Codec.Picture.Types.PixelRGB8]))
                                                                                             Servant.API.Alternative.:<|> (("show"
                                                                                                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                  "tool"
                                                                                                                                                  GHC.Base.String
                                                                                                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                     '[Htmls.HTMLBlaze]
                                                                                                                                                                     Models.Tool))
                                                                                                                           Servant.API.Alternative.:<|> Servant.API.Raw.Raw)))>_N
                                <'[]>_N))
                      (Data.Proxy.Proxy @ * @ Api.ImageAPI)
                      Servant.Server.Internal.Context.$WEmptyContext
                      (case Lib.$wzipSrv ipv3 ipv5 of ww { (#,#) ww1 ww2 ->
                       (Servant.API.Alternative.:<|>
                          @ (GHC.Types.Bool
                             -> Codec.Picture.Types.DynamicImage
                             -> Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr
                                  GHC.Types.IO
                                  GHC.Types.Bool)
                          @ ((GHC.Base.String
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr
                                   GHC.Types.IO
                                   Codec.Picture.Types.DynamicImage)
                             Servant.API.Alternative.:<|> ((GHC.Base.String
                                                            -> Control.Monad.Trans.Except.ExceptT
                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                 GHC.Types.IO
                                                                 [Codec.Picture.Types.Image
                                                                    Codec.Picture.Types.PixelRGB8])
                                                           Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                                          -> Control.Monad.Trans.Except.ExceptT
                                                                                               Servant.Server.Internal.ServantErr.ServantErr
                                                                                               GHC.Types.IO
                                                                                               Models.Tool)
                                                                                         Servant.API.Alternative.:<|> Servant.Server.Internal.Server
                                                                                                                        Servant.API.Raw.Raw)))
                          ww1
                          ww2)
                         `cast`
                       (Trans
                            (Trans
                                 (<GHC.Types.Bool>_R
                                  ->_R Trans
                                           (<Codec.Picture.Types.DynamicImage>_R
                                            ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                               <Network.HTTP.Types.Method.StdMethod>_N
                                                               <GHC.Types.Bool>_N
                                                               <'[Servant.API.ContentTypes.JSON]>_N
                                                               <200>_N
                                                               <'Network.HTTP.Types.Method.POST>_N
                                                               <Control.Monad.Trans.Except.ExceptT
                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                  GHC.Types.IO>_N)))
                                           (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                          <*>_N
                                                          <Codec.Picture.Types.DynamicImage>_N
                                                          <'[Servant.JuicyPixels.JPEG 100]>_N
                                                          <Servant.API.Verbs.Verb
                                                             'Network.HTTP.Types.Method.POST
                                                             200
                                                             '[Servant.API.ContentTypes.JSON]
                                                             GHC.Types.Bool>_N
                                                          <Control.Monad.Trans.Except.ExceptT
                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                             GHC.Types.IO>_N))))
                                 (Trans
                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                     <*>_N
                                                     <GHC.Types.Bool>_N
                                                     <"true/false">_N
                                                     <Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool>_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO>_N)))
                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                     <*>_N
                                                     <Servant.API.Capture.Capture
                                                        "true/false" GHC.Types.Bool
                                                      Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                            '[Servant.JuicyPixels.JPEG
                                                                                100]
                                                                            Codec.Picture.Types.DynamicImage
                                                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                               '[Servant.API.ContentTypes.JSON]
                                                                                               GHC.Types.Bool)>_N
                                                     <"postImg">_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO>_N))))
                             Servant.API.Alternative.:<|> Trans
                                                              (Trans
                                                                   (<[GHC.Types.Char]>_R
                                                                    ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                       <Network.HTTP.Types.Method.StdMethod>_N
                                                                                       <Codec.Picture.Types.DynamicImage>_N
                                                                                       <'[Servant.JuicyPixels.JPEG
                                                                                            100]>_N
                                                                                       <200>_N
                                                                                       <'Network.HTTP.Types.Method.GET>_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N)))
                                                                   (Trans
                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                       <*>_N
                                                                                       <[GHC.Types.Char]>_N
                                                                                       <"tool">_N
                                                                                       <Servant.API.Verbs.Verb
                                                                                          'Network.HTTP.Types.Method.GET
                                                                                          200
                                                                                          '[Servant.JuicyPixels.JPEG
                                                                                              100]
                                                                                          Codec.Picture.Types.DynamicImage>_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N)))
                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                       <*>_N
                                                                                       <Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Servant.JuicyPixels.JPEG
                                                                                                                 100]
                                                                                                             Codec.Picture.Types.DynamicImage>_N
                                                                                       <"image">_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N))))
                                                               Servant.API.Alternative.:<|> Trans
                                                                                                (Trans
                                                                                                     (<[GHC.Types.Char]>_R
                                                                                                      ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                         <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                         <[Codec.Picture.Types.Image
                                                                                                                             Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <'[Api.GIFAnim
                                                                                                                              10]>_N
                                                                                                                         <200>_N
                                                                                                                         <'Network.HTTP.Types.Method.GET>_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N)))
                                                                                                     (Trans
                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                         <*>_N
                                                                                                                         <[GHC.Types.Char]>_N
                                                                                                                         <"tool">_N
                                                                                                                         <Servant.API.Verbs.Verb
                                                                                                                            'Network.HTTP.Types.Method.GET
                                                                                                                            200
                                                                                                                            '[Api.GIFAnim
                                                                                                                                10]
                                                                                                                            [Codec.Picture.Types.Image
                                                                                                                               Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N)))
                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                         <*>_N
                                                                                                                         <Servant.API.Capture.Capture
                                                                                                                            "tool"
                                                                                                                            GHC.Base.String
                                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                               '[Api.GIFAnim
                                                                                                                                                   10]
                                                                                                                                               [Codec.Picture.Types.Image
                                                                                                                                                  Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <"gif">_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N))))
                                                                                                 Servant.API.Alternative.:<|> Trans
                                                                                                                                  (Trans
                                                                                                                                       (<[GHC.Types.Char]>_R
                                                                                                                                        ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                                                           <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                                                           <Models.Tool>_N
                                                                                                                                                           <'[Htmls.HTMLBlaze]>_N
                                                                                                                                                           <200>_N
                                                                                                                                                           <'Network.HTTP.Types.Method.GET>_N
                                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                              GHC.Types.IO>_N)))
                                                                                                                                       (Trans
                                                                                                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <[GHC.Types.Char]>_N
                                                                                                                                                           <"tool">_N
                                                                                                                                                           <Servant.API.Verbs.Verb
                                                                                                                                                              'Network.HTTP.Types.Method.GET
                                                                                                                                                              200
                                                                                                                                                              '[Htmls.HTMLBlaze]
                                                                                                                                                              Models.Tool>_N
                                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                              GHC.Types.IO>_N)))
                                                                                                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <Servant.API.Capture.Capture
                                                                                                                                                              "tool"
                                                                                                                                                              GHC.Base.String
                                                                                                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                                 '[Htmls.HTMLBlaze]
                                                                                                                                                                                 Models.Tool>_N
                                                                                                                                                           <"show">_N
                                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                              GHC.Types.IO>_N))))
                                                                                                                                   Servant.API.Alternative.:<|> <Servant.Server.Internal.ServerT
                                                                                                                                                                   Servant.API.Raw.Raw
                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                                      GHC.Types.IO)>_R)_R
                                                                                                                                  (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                                                                 <Servant.API.Raw.Raw>_N
                                                                                                                                                 <"show"
                                                                                                                                                  Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                                        "tool"
                                                                                                                                                                        GHC.Base.String
                                                                                                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                                           '[Htmls.HTMLBlaze]
                                                                                                                                                                                           Models.Tool)>_N
                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                    GHC.Types.IO>_N))))_R
                                                                                                (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                               <("show"
                                                                                                                 Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                       "tool"
                                                                                                                                       GHC.Base.String
                                                                                                                                     Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                          '[Htmls.HTMLBlaze]
                                                                                                                                                          Models.Tool))
                                                                                                                Servant.API.Alternative.:<|> Servant.API.Raw.Raw>_N
                                                                                                               <"gif"
                                                                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                      "tool"
                                                                                                                                      GHC.Base.String
                                                                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                         '[Api.GIFAnim
                                                                                                                                                             10]
                                                                                                                                                         [Codec.Picture.Types.Image
                                                                                                                                                            Codec.Picture.Types.PixelRGB8])>_N
                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                  GHC.Types.IO>_N))))_R
                                                              (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                             <("gif"
                                                                               Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                     "tool"
                                                                                                     GHC.Base.String
                                                                                                   Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                        '[Api.GIFAnim
                                                                                                                            10]
                                                                                                                        [Codec.Picture.Types.Image
                                                                                                                           Codec.Picture.Types.PixelRGB8]))
                                                                              Servant.API.Alternative.:<|> (("show"
                                                                                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                   "tool"
                                                                                                                                   GHC.Base.String
                                                                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                      '[Htmls.HTMLBlaze]
                                                                                                                                                      Models.Tool))
                                                                                                            Servant.API.Alternative.:<|> Servant.API.Raw.Raw)>_N
                                                                             <"image"
                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                    "tool"
                                                                                                    GHC.Base.String
                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                       '[Servant.JuicyPixels.JPEG
                                                                                                                           100]
                                                                                                                       Codec.Picture.Types.DynamicImage)>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                GHC.Types.IO>_N))))_R
                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                           <("image"
                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                   "tool" GHC.Base.String
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                      '[Servant.JuicyPixels.JPEG
                                                                                          100]
                                                                                      Codec.Picture.Types.DynamicImage))
                                            Servant.API.Alternative.:<|> (("gif"
                                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                 "tool"
                                                                                                 GHC.Base.String
                                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                    '[Api.GIFAnim
                                                                                                                        10]
                                                                                                                    [Codec.Picture.Types.Image
                                                                                                                       Codec.Picture.Types.PixelRGB8]))
                                                                          Servant.API.Alternative.:<|> (("show"
                                                                                                         Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                               "tool"
                                                                                                                               GHC.Base.String
                                                                                                                             Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                  '[Htmls.HTMLBlaze]
                                                                                                                                                  Models.Tool))
                                                                                                        Servant.API.Alternative.:<|> Servant.API.Raw.Raw))>_N
                                           <"postImg"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "true/false" GHC.Types.Bool
                                                                Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                      '[Servant.JuicyPixels.JPEG
                                                                                          100]
                                                                                      Codec.Picture.Types.DynamicImage
                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                         '[Servant.API.ContentTypes.JSON]
                                                                                                         GHC.Types.Bool))>_N
                                           <Control.Monad.Trans.Except.ExceptT
                                              Servant.Server.Internal.ServantErr.ServantErr
                                              GHC.Types.IO>_N)))) }))
                   ipv4 } }) -}
c010a01ef50f24e2f304f2e5977b2bf1
  imagApp10 ::
    Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8)
                        Lib.imagApp11 of ds1 { (#,#) ipv2 ipv3 ->
                 ipv3 }) -}
dd7153b1f117e05d78b952a3d0390f21
  imagApp11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        270000#
                        s1 of ds { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: GHC.Prim.Addr#
                   = GHC.Prim.byteArrayContents#
                       ipv3
                         `cast`
                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                 } in
                 case {__pkg_ccall primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH hsprimitive_memset_Word8 GHC.Prim.Addr#
                                                                                                                      -> GHC.Prim.Int#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld #)}
                        ipv4
                        0#
                        270000##
                        0##
                        ipv2 of wild { Unit# ds8 ->
                 let {
                   ipv5 :: GHC.ForeignPtr.ForeignPtrContents
                   = GHC.ForeignPtr.PlainPtr ipv3
                 } in
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ipv5
                        ds8 of s' { DEFAULT ->
                 letrec {
                   $wlineGenerator :: GHC.Types.Int
                                      -> GHC.Prim.Int#
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0] -}
                   = \ (w :: GHC.Types.Int)
                       (ww :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 300#) of wild1 {
                       GHC.Types.False
                       -> case w of ww1 { GHC.Types.I# ww2 ->
                          letrec {
                            $wcolumn :: GHC.Prim.Int#
                                        -> GHC.Prim.Int#
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                            = \ (ww3 :: GHC.Prim.Int#)
                                (ww4 :: GHC.Prim.Int#)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 300#) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          ww3
                                          0##
                                          w2 of s2 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s2 of s'1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          (GHC.Prim.+# ww3 1#)
                                          200##
                                          s'1 of s4 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s4 of s'2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          (GHC.Prim.+# ww3 2#)
                                          0##
                                          s'2 of s5 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s5 of s'3 { DEFAULT ->
                                   $wcolumn
                                     (GHC.Prim.+# ww3 3#)
                                     (GHC.Prim.+# ww4 1#)
                                     s'3 } } } } } }
                                GHC.Types.True
                                -> $wlineGenerator (GHC.Types.I# ww3) (GHC.Prim.+# ww 1#) w2 }
                          } in
                          $wcolumn ww2 0# w1 }
                       GHC.Types.True -> (# w1, GHC.Tuple.() #) }
                 } in
                 case $wlineGenerator Lib.imagApp7 0# s' of ds1 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Codec.Picture.Types.Image
                      @ Codec.Picture.Types.PixelRGB8
                      300#
                      300#
                      (Data.Vector.Storable.Vector
                         @ (Codec.Picture.Types.PixelBaseComponent
                              Codec.Picture.Types.PixelRGB8)
                         270000#
                         ipv4
                         ipv5) #) } } } }) -}
a77a66635b16d5f3f238d03ea7b68eab
  imagApp2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8080#) -}
3251866766205b2001c125ccfa55c817
  imagApp3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage #)
  {- Arity: 1,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ Codec.Picture.Types.DynamicImage
                        @ GHC.Prim.RealWorld
                        Lib.imagApp4
                        s1# of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Conc.Sync.TVar @ Codec.Picture.Types.DynamicImage ipv3 #) }) -}
aaec9928c6ef621ecbd4450eae459f44
  imagApp4 :: Codec.Picture.Types.DynamicImage
  {- Unfolding: (Codec.Picture.Types.ImageRGB8 Lib.imagApp5) -}
5c5a7e62df663c215e85fb0de4dc2e8b
  imagApp5 :: Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8)
                        Lib.imagApp6 of ds1 { (#,#) ipv2 ipv3 ->
                 ipv3 }) -}
8120f4d4510671b3a71e3c6dc3db4006
  imagApp6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        270000#
                        s1 of ds { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: GHC.Prim.Addr#
                   = GHC.Prim.byteArrayContents#
                       ipv3
                         `cast`
                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                 } in
                 case {__pkg_ccall primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH hsprimitive_memset_Word8 GHC.Prim.Addr#
                                                                                                                      -> GHC.Prim.Int#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld #)}
                        ipv4
                        0#
                        270000##
                        0##
                        ipv2 of wild { Unit# ds8 ->
                 let {
                   ipv5 :: GHC.ForeignPtr.ForeignPtrContents
                   = GHC.ForeignPtr.PlainPtr ipv3
                 } in
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ipv5
                        ds8 of s' { DEFAULT ->
                 letrec {
                   $wlineGenerator :: GHC.Types.Int
                                      -> GHC.Prim.Int#
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0] -}
                   = \ (w :: GHC.Types.Int)
                       (ww :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 300#) of wild1 {
                       GHC.Types.False
                       -> case w of ww1 { GHC.Types.I# ww2 ->
                          letrec {
                            $wcolumn :: GHC.Prim.Int#
                                        -> GHC.Prim.Int#
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                            = \ (ww3 :: GHC.Prim.Int#)
                                (ww4 :: GHC.Prim.Int#)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 300#) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          ww3
                                          0##
                                          w2 of s2 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s2 of s'1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          (GHC.Prim.+# ww3 1#)
                                          0##
                                          s'1 of s4 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s4 of s'2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv4
                                          (GHC.Prim.+# ww3 2#)
                                          0##
                                          s'2 of s5 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          s5 of s'3 { DEFAULT ->
                                   $wcolumn
                                     (GHC.Prim.+# ww3 3#)
                                     (GHC.Prim.+# ww4 1#)
                                     s'3 } } } } } }
                                GHC.Types.True
                                -> $wlineGenerator (GHC.Types.I# ww3) (GHC.Prim.+# ww 1#) w2 }
                          } in
                          $wcolumn ww2 0# w1 }
                       GHC.Types.True -> (# w1, GHC.Tuple.() #) }
                 } in
                 case $wlineGenerator Lib.imagApp7 0# s' of ds1 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Codec.Picture.Types.Image
                      @ Codec.Picture.Types.PixelRGB8
                      300#
                      300#
                      (Data.Vector.Storable.Vector
                         @ (Codec.Picture.Types.PixelBaseComponent
                              Codec.Picture.Types.PixelRGB8)
                         270000#
                         ipv4
                         ipv5) #) } } } }) -}
5a281d371be7b3d6d033f44fa712041f
  imagApp7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
40821a9193c9baa364ffe70950afe1ab
  imagApp8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage #)
  {- Arity: 1,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ Codec.Picture.Types.DynamicImage
                        @ GHC.Prim.RealWorld
                        Lib.imagApp9
                        s1# of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Conc.Sync.TVar @ Codec.Picture.Types.DynamicImage ipv3 #) }) -}
2b5005a42db5f8741fb22d3ef497e985
  imagApp9 :: Codec.Picture.Types.DynamicImage
  {- Unfolding: (Codec.Picture.Types.ImageRGB8 Lib.imagApp10) -}
8400f01b61f133a3ecfa40efc775acd4
  zipSrv ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> Servant.Server.Internal.Server Api.ImageAPI
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.zipSrv1
                  `cast`
                (<GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage>_R
                 ->_R <GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage>_R
                 ->_R Trans
                          (Trans
                               (<GHC.Types.Bool>_R
                                ->_R Trans
                                         (<Codec.Picture.Types.DynamicImage>_R
                                          ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                             <Network.HTTP.Types.Method.StdMethod>_N
                                                             <GHC.Types.Bool>_N
                                                             <'[Servant.API.ContentTypes.JSON]>_N
                                                             <200>_N
                                                             <'Network.HTTP.Types.Method.POST>_N
                                                             <Control.Monad.Trans.Except.ExceptT
                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                GHC.Types.IO>_N)))
                                         (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                        <*>_N
                                                        <Codec.Picture.Types.DynamicImage>_N
                                                        <'[Servant.JuicyPixels.JPEG 100]>_N
                                                        <Servant.API.Verbs.Verb
                                                           'Network.HTTP.Types.Method.POST
                                                           200
                                                           '[Servant.API.ContentTypes.JSON]
                                                           GHC.Types.Bool>_N
                                                        <Control.Monad.Trans.Except.ExceptT
                                                           Servant.Server.Internal.ServantErr.ServantErr
                                                           GHC.Types.IO>_N))))
                               (Trans
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                   <*>_N
                                                   <GHC.Types.Bool>_N
                                                   <"true/false">_N
                                                   <Servant.API.ReqBody.ReqBody
                                                      '[Servant.JuicyPixels.JPEG 100]
                                                      Codec.Picture.Types.DynamicImage
                                                    Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                         '[Servant.API.ContentTypes.JSON]
                                                                         GHC.Types.Bool>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N)))
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                   <*>_N
                                                   <Servant.API.Capture.Capture
                                                      "true/false" GHC.Types.Bool
                                                    Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                          '[Servant.JuicyPixels.JPEG
                                                                              100]
                                                                          Codec.Picture.Types.DynamicImage
                                                                        Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                             '[Servant.API.ContentTypes.JSON]
                                                                                             GHC.Types.Bool)>_N
                                                   <"postImg">_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N))))
                           Servant.API.Alternative.:<|> Trans
                                                            (Trans
                                                                 (<[GHC.Types.Char]>_R
                                                                  ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                     <Network.HTTP.Types.Method.StdMethod>_N
                                                                                     <Codec.Picture.Types.DynamicImage>_N
                                                                                     <'[Servant.JuicyPixels.JPEG
                                                                                          100]>_N
                                                                                     <200>_N
                                                                                     <'Network.HTTP.Types.Method.GET>_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N)))
                                                                 (Trans
                                                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                     <*>_N
                                                                                     <[GHC.Types.Char]>_N
                                                                                     <"tool">_N
                                                                                     <Servant.API.Verbs.Verb
                                                                                        'Network.HTTP.Types.Method.GET
                                                                                        200
                                                                                        '[Servant.JuicyPixels.JPEG
                                                                                            100]
                                                                                        Codec.Picture.Types.DynamicImage>_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N)))
                                                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                     <*>_N
                                                                                     <Servant.API.Capture.Capture
                                                                                        "tool"
                                                                                        GHC.Base.String
                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                           '[Servant.JuicyPixels.JPEG
                                                                                                               100]
                                                                                                           Codec.Picture.Types.DynamicImage>_N
                                                                                     <"image">_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N))))
                                                             Servant.API.Alternative.:<|> Trans
                                                                                              (Trans
                                                                                                   (<[GHC.Types.Char]>_R
                                                                                                    ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                       <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                       <[Codec.Picture.Types.Image
                                                                                                                           Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <'[Api.GIFAnim
                                                                                                                            10]>_N
                                                                                                                       <200>_N
                                                                                                                       <'Network.HTTP.Types.Method.GET>_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N)))
                                                                                                   (Trans
                                                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                       <*>_N
                                                                                                                       <[GHC.Types.Char]>_N
                                                                                                                       <"tool">_N
                                                                                                                       <Servant.API.Verbs.Verb
                                                                                                                          'Network.HTTP.Types.Method.GET
                                                                                                                          200
                                                                                                                          '[Api.GIFAnim
                                                                                                                              10]
                                                                                                                          [Codec.Picture.Types.Image
                                                                                                                             Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N)))
                                                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                       <*>_N
                                                                                                                       <Servant.API.Capture.Capture
                                                                                                                          "tool"
                                                                                                                          GHC.Base.String
                                                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                             '[Api.GIFAnim
                                                                                                                                                 10]
                                                                                                                                             [Codec.Picture.Types.Image
                                                                                                                                                Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <"gif">_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N))))
                                                                                               Servant.API.Alternative.:<|> Trans
                                                                                                                                (Trans
                                                                                                                                     (<[GHC.Types.Char]>_R
                                                                                                                                      ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                                                         <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                                                         <Models.Tool>_N
                                                                                                                                                         <'[Htmls.HTMLBlaze]>_N
                                                                                                                                                         <200>_N
                                                                                                                                                         <'Network.HTTP.Types.Method.GET>_N
                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                            GHC.Types.IO>_N)))
                                                                                                                                     (Trans
                                                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                                                         <*>_N
                                                                                                                                                         <[GHC.Types.Char]>_N
                                                                                                                                                         <"tool">_N
                                                                                                                                                         <Servant.API.Verbs.Verb
                                                                                                                                                            'Network.HTTP.Types.Method.GET
                                                                                                                                                            200
                                                                                                                                                            '[Htmls.HTMLBlaze]
                                                                                                                                                            Models.Tool>_N
                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                            GHC.Types.IO>_N)))
                                                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                                                         <*>_N
                                                                                                                                                         <Servant.API.Capture.Capture
                                                                                                                                                            "tool"
                                                                                                                                                            GHC.Base.String
                                                                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                               '[Htmls.HTMLBlaze]
                                                                                                                                                                               Models.Tool>_N
                                                                                                                                                         <"show">_N
                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                            GHC.Types.IO>_N))))
                                                                                                                                 Servant.API.Alternative.:<|> <Servant.Server.Internal.ServerT
                                                                                                                                                                 Servant.API.Raw.Raw
                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                    Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                                    GHC.Types.IO)>_R)_R
                                                                                                                                (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                                                               <Servant.API.Raw.Raw>_N
                                                                                                                                               <"show"
                                                                                                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                                      "tool"
                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                                         '[Htmls.HTMLBlaze]
                                                                                                                                                                                         Models.Tool)>_N
                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                  GHC.Types.IO>_N))))_R
                                                                                              (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                             <("show"
                                                                                                               Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                     "tool"
                                                                                                                                     GHC.Base.String
                                                                                                                                   Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                        '[Htmls.HTMLBlaze]
                                                                                                                                                        Models.Tool))
                                                                                                              Servant.API.Alternative.:<|> Servant.API.Raw.Raw>_N
                                                                                                             <"gif"
                                                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                    "tool"
                                                                                                                                    GHC.Base.String
                                                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                       '[Api.GIFAnim
                                                                                                                                                           10]
                                                                                                                                                       [Codec.Picture.Types.Image
                                                                                                                                                          Codec.Picture.Types.PixelRGB8])>_N
                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                GHC.Types.IO>_N))))_R
                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                           <("gif"
                                                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                   "tool"
                                                                                                   GHC.Base.String
                                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                      '[Api.GIFAnim
                                                                                                                          10]
                                                                                                                      [Codec.Picture.Types.Image
                                                                                                                         Codec.Picture.Types.PixelRGB8]))
                                                                            Servant.API.Alternative.:<|> (("show"
                                                                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                 "tool"
                                                                                                                                 GHC.Base.String
                                                                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                    '[Htmls.HTMLBlaze]
                                                                                                                                                    Models.Tool))
                                                                                                          Servant.API.Alternative.:<|> Servant.API.Raw.Raw)>_N
                                                                           <"image"
                                                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                  "tool"
                                                                                                  GHC.Base.String
                                                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                                                         100]
                                                                                                                     Codec.Picture.Types.DynamicImage)>_N
                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                              GHC.Types.IO>_N))))_R
                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                         <("image"
                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                 "tool" GHC.Base.String
                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                        100]
                                                                                    Codec.Picture.Types.DynamicImage))
                                          Servant.API.Alternative.:<|> (("gif"
                                                                         Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                               "tool"
                                                                                               GHC.Base.String
                                                                                             Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                  '[Api.GIFAnim
                                                                                                                      10]
                                                                                                                  [Codec.Picture.Types.Image
                                                                                                                     Codec.Picture.Types.PixelRGB8]))
                                                                        Servant.API.Alternative.:<|> (("show"
                                                                                                       Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                             "tool"
                                                                                                                             GHC.Base.String
                                                                                                                           Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                '[Htmls.HTMLBlaze]
                                                                                                                                                Models.Tool))
                                                                                                      Servant.API.Alternative.:<|> Servant.API.Raw.Raw))>_N
                                         <"postImg"
                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                "true/false" GHC.Types.Bool
                                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                        100]
                                                                                    Codec.Picture.Types.DynamicImage
                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                                       GHC.Types.Bool))>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))) -}
81e062958f29c5f4d25e39cadda19cf5
  zipSrv1 ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> (GHC.Types.Bool
        -> Codec.Picture.Types.DynamicImage
        -> Control.Monad.Trans.Except.ExceptT
             Servant.Server.Internal.ServantErr.ServantErr
             GHC.Types.IO
             GHC.Types.Bool)
       Servant.API.Alternative.:<|> ((GHC.Base.String
                                      -> Control.Monad.Trans.Except.ExceptT
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           GHC.Types.IO
                                           Codec.Picture.Types.DynamicImage)
                                     Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                    -> Control.Monad.Trans.Except.ExceptT
                                                                         Servant.Server.Internal.ServantErr.ServantErr
                                                                         GHC.Types.IO
                                                                         [Codec.Picture.Types.Image
                                                                            Codec.Picture.Types.PixelRGB8])
                                                                   Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                                                  -> Control.Monad.Trans.Except.ExceptT
                                                                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                                                                       GHC.Types.IO
                                                                                                       Models.Tool)
                                                                                                 Servant.API.Alternative.:<|> Servant.Server.Internal.Server
                                                                                                                                Servant.API.Raw.Raw)))
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                   (w1 :: GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage) ->
                 case Lib.$wzipSrv w w1 of ww { (#,#) ww1 ww2 ->
                 Servant.API.Alternative.:<|>
                   @ (GHC.Types.Bool
                      -> Codec.Picture.Types.DynamicImage
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr
                           GHC.Types.IO
                           GHC.Types.Bool)
                   @ ((GHC.Base.String
                       -> Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr
                            GHC.Types.IO
                            Codec.Picture.Types.DynamicImage)
                      Servant.API.Alternative.:<|> ((GHC.Base.String
                                                     -> Control.Monad.Trans.Except.ExceptT
                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                          GHC.Types.IO
                                                          [Codec.Picture.Types.Image
                                                             Codec.Picture.Types.PixelRGB8])
                                                    Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                                   -> Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO
                                                                                        Models.Tool)
                                                                                  Servant.API.Alternative.:<|> Servant.Server.Internal.Server
                                                                                                                 Servant.API.Raw.Raw)))
                   ww1
                   ww2 }) -}
"SPEC/Lib $fAllCTRender:a @ (GIFAnim 10) @ '[] @ [Image PixelRGB8]" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                          '[Api.GIFAnim
                                                                                                              10]
                                                                                                          [Codec.Picture.Types.Image
                                                                                                             Codec.Picture.Types.PixelRGB8])
                                                                                    ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                                    '[])
                                                                                    ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                                   (Api.GIFAnim
                                                                                                      10))
  Servant.API.ContentTypes.$fAllCTRender:a @ (Api.GIFAnim 10)
                                           @ '[]
                                           @ [Codec.Picture.Types.Image
                                                Codec.Picture.Types.PixelRGB8]
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a11
"SPEC/Lib $fAllCTRender:a @ (JPEG 100) @ '[] @ DynamicImage" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                   '[Servant.JuicyPixels.JPEG
                                                                                                       100]
                                                                                                   Codec.Picture.Types.DynamicImage)
                                                                             ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                             '[])
                                                                             ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                            (Servant.JuicyPixels.JPEG
                                                                                               100))
  Servant.API.ContentTypes.$fAllCTRender:a @ (Servant.JuicyPixels.JPEG
                                                100)
                                           @ '[]
                                           @ Codec.Picture.Types.DynamicImage
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a
"SPEC/Lib $fAllCTRender:a @ HTMLBlaze @ '[] @ Tool" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                          '[Htmls.HTMLBlaze]
                                                                                          Models.Tool)
                                                                    ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                    '[])
                                                                    ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                   Htmls.HTMLBlaze)
  Servant.API.ContentTypes.$fAllCTRender:a @ Htmls.HTMLBlaze
                                           @ '[]
                                           @ Models.Tool
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a22
"SPEC/Lib $fAllCTRender:a @ JSON @ '[] @ Bool" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                     '[Servant.API.ContentTypes.JSON]
                                                                                     GHC.Types.Bool)
                                                               ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                               '[])
                                                               ($dAccept :: Servant.API.ContentTypes.Accept
                                                                              Servant.API.ContentTypes.JSON)
  Servant.API.ContentTypes.$fAllCTRender:a @ Servant.API.ContentTypes.JSON
                                           @ '[]
                                           @ GHC.Types.Bool
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a18
"SPEC/Lib $fAllMimeRender:a0 @ (GIFAnim 10) @ [Image PixelRGB8]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                                    (Api.GIFAnim
                                                                                                       10)
                                                                                                    [Codec.Picture.Types.Image
                                                                                                       Codec.Picture.Types.PixelRGB8])
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ (Api.GIFAnim 10)
                                              @ [Codec.Picture.Types.Image
                                                   Codec.Picture.Types.PixelRGB8]
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a1
"SPEC/Lib $fAllMimeRender:a0 @ (JPEG 100) @ DynamicImage" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                             (Servant.JuicyPixels.JPEG
                                                                                                100)
                                                                                             Codec.Picture.Types.DynamicImage)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ (Servant.JuicyPixels.JPEG
                                                   100)
                                              @ Codec.Picture.Types.DynamicImage
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0
"SPEC/Lib $fAllMimeRender:a0 @ HTMLBlaze @ Tool" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                    Htmls.HTMLBlaze
                                                                                    Models.Tool)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Htmls.HTMLBlaze
                                              @ Models.Tool
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a3
"SPEC/Lib $fAllMimeRender:a0 @ JSON @ Bool" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                               Servant.API.ContentTypes.JSON
                                                                               GHC.Types.Bool)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Servant.API.ContentTypes.JSON
                                              @ GHC.Types.Bool
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a2
"SPEC/Lib $fAllMimeRender:a0_$callMimeRender @ (GIFAnim 10) @ [Image
                                                                PixelRGB8]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                                                                                                                    (Api.GIFAnim
                                                                                                                                                                                       10)
                                                                                                                                                                                    [Codec.Picture.Types.Image
                                                                                                                                                                                       Codec.Picture.Types.PixelRGB8])
  Servant.API.ContentTypes.$fAllMimeRender:a0_$callMimeRender @ (Api.GIFAnim
                                                                   10)
                                                              @ [Codec.Picture.Types.Image
                                                                   Codec.Picture.Types.PixelRGB8]
                                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender
"SPEC/Lib $fAllMimeUnrender:a @ (JPEG 100) @ DynamicImage @ '[]" [ALWAYS] forall ($dAllMimeUnrender :: Servant.API.ContentTypes.AllMimeUnrender
                                                                                                         '[]
                                                                                                         Codec.Picture.Types.DynamicImage)
                                                                                 ($dMimeUnrender :: Servant.API.ContentTypes.MimeUnrender
                                                                                                      (Servant.JuicyPixels.JPEG
                                                                                                         100)
                                                                                                      Codec.Picture.Types.DynamicImage)
  Servant.API.ContentTypes.$fAllMimeUnrender:a @ (Servant.JuicyPixels.JPEG
                                                    100)
                                               @ Codec.Picture.Types.DynamicImage
                                               @ '[]
                                               $dMimeUnrender
                                               $dAllMimeUnrender
  = Lib.$s$fAllMimeUnrender:a
"SPEC/Lib $fMimeRenderTYPEGIFAnim[] @ 10" [ALWAYS] forall ($d~ :: 10
                                                                  GHC.TypeLits.<= 10)
                                                          ($dKnownNat1 :: GHC.TypeLits.KnownNat 10)
  Api.$fMimeRenderTYPEGIFAnim[] @ 10 $dKnownNat1 $d~
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEGIFAnim[]
"SPEC/Lib $fMimeRenderTYPEHTMLBlazea @ Tool" [ALWAYS] forall ($dToMarkup :: Text.Blaze.ToMarkup
                                                                              Models.Tool)
  Htmls.$fMimeRenderTYPEHTMLBlazea @ Models.Tool $dToMarkup
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea
"SPEC/Lib $fMimeRenderTYPEJPEGDynamicImage @ 100" [ALWAYS] forall ($d~ :: 100
                                                                          GHC.TypeLits.<= 100)
                                                                  ($dKnownNat1 :: GHC.TypeLits.KnownNat
                                                                                    100)
  Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage @ 100
                                                       $dKnownNat1
                                                       $d~
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage
"SPEC/Lib $fMimeRenderTYPEJSONa @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                                       GHC.Types.Bool)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa @ GHC.Types.Bool
                                                 $dToJSON
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa
"SPEC/Lib $fMimeRenderTYPEJSONa_$cmimeRender @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                                                    GHC.Types.Bool)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cmimeRender @ GHC.Types.Bool
                                                              $dToJSON
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender
"SPEC/Lib $fMimeUnrenderTYPEJPEGDynamicImage @ 100" [ALWAYS] forall ($d~ :: 100
                                                                            GHC.TypeLits.<= 100)
                                                                    ($dKnownNat1 :: GHC.TypeLits.KnownNat
                                                                                      100)
  Servant.JuicyPixels.$fMimeUnrenderTYPEJPEGDynamicImage @ 100
                                                         $dKnownNat1
                                                         $d~
  = Lib.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage
"SPEC/Lib encode @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                        GHC.Types.Bool)
  Data.Aeson.encode @ GHC.Types.Bool $dToJSON
  = Lib.$s$fAllCTRender:a_$sencode
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

