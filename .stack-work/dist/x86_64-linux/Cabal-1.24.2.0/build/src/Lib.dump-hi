
==================== FINAL INTERFACE ====================
2017-06-09 23:50:52.236468 UTC

interface picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Lib 8002
  interface hash: 9c69498fde1fac7dfbe07a9134ce39d5
  ABI hash: e6a2f4413dafc0df77390f016f62fc5c
  export-list hash: 4d6c82c2362869636e518908bbf93ef2
  orphan hash: dd8fc1fcf3bb87eeaa502c1bec6dfcb7
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.imagApp
  Lib.zipSrv
module dependencies: Api Grid Htmls Models Pixels
package dependencies: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed
                      aeson-1.0.2.1@aeson-1.0.2.1-CYngHPh1vosBJovY7C9thn
                      appar-0.1.4@appar-0.1.4-DGWHHt2WRn9FI49prcwO9
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1@async-2.1.1-4n6HEMPJR2eJK0JpvCfuPK
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-6QxKnlgzGYzLT4ZO71q1el
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      comonad-5@comonad-5-BYydH82fZIS1vK4HJ9v9HH
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptonite-0.21@cryptonite-0.21-Er8yd96TMUKJhhoyDY0pav
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      file-embed-0.0.10@file-embed-0.0.10-KWMmUDaNSRP7AxWSEHlrrK
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-date-0.0.6.1@http-date-0.0.6.1-GjuZLg09ks27Bd9oI0ciJu
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      http2-1.6.3@http2-1.6.3-82OptI2A5ESI6RhudSAT6 integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4
                      memory-0.14.2@memory-0.14.2-CfVX41PhmpJKBOUPv4ybaa
                      microlens-0.4.8.0@microlens-0.4.8.0-5PXN9DedWooJg6UJ24ter0
                      microlens-th-0.4.1.1@microlens-th-0.4.1.1-26cEGwGOrIB7ilX0jLiOT0
                      mime-types-0.1.0.7@mime-types-0.1.0.7-31dnC2ifQ9r5TApUZagLPk
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.1@network-2.6.3.1-ABFtZSq90Z9BfMXNiqgBoe
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      psqueues-0.2.2.3@psqueues-0.2.2.3-9nDehYbroydEusqdFJopTa
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq
                      servant-JuicyPixels-0.3.0.2@servant-JuicyPixels-0.3.0.2-KFDh0ZSrRqdHyQZspaSYy6
                      servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai
                      simple-sendfile-0.2.25@simple-sendfile-0.2.25-JJ9zm1wZxYIARxlVa3oQgs
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-Ec7F62APEFzLqTOvsWpyBa
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      wai-3.2.1.1@wai-3.2.1.1-9yigkTgtHNLHh2mXrnIXo
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-2hcSbp6yMAsGQQTfre28LP
                      warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY
                      word8-0.1.2@word8-0.1.2-9WDPGCTpW7JJnsiAQavtd1
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-ABFtZSq90Z9BfMXNiqgBoe:Network.Socket
         picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Htmls
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tga
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Tiff
                         JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-4HULutk0xITKNjI1pwYrD4:Data.IP.Range
                         microlens-0.4.8.0@microlens-0.4.8.0-5PXN9DedWooJg6UJ24ter0:Lens.Micro.Internal
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Grid
                         picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk:Models
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.Utils.Links
                         servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal
                         servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture c28c03ed1b5e2bad2d1a6a2be36f49e1
import  -/  JuicyPixels-3.2.8.1@JuicyPixels-3.2.8.1-4AbHYLGcEbLBNOsmMKGed:Codec.Picture.Types 22b7a216fd591cfd9ca02dad94569487
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Trans d69bc2e104a90fb918d853b240f7af2e
import  -/  Api a77364eb5bd6d4657c49fc01d22ac574
  exports: 1c7021d10c0b328ec4d502193d57f4ac
  ImageAPI bc9b6d19bab89ac785117c4e15bcb22e
  imageApi 1b64c9f2fb76b3c05f081b30e33e0a1d
import  -/  Htmls aa0035ee828be950ec0a64c28b4fe3d2
  exports: 67d6274d56ce8eb3c41abc47b0b45b11
import  -/  Models d801f338584b61c18b182f9aac54bd61
  exports: b83cc7622d83dd136fe94f56bd460b59
  Checkerboard 87b1b1e2f0ec1d59fb85486ca940f78c
  Frame 9d348997b1c334f965a8bb9d002958d9
  Rave 0a68a386e67e3949c41f152725576c95
  Spiral a5176eaaba44fef2e3ae7eee7d1247f5
  ZipImage 29c766bbc8773fc9de26eea02ed8123d
import  -/  Pixels 2a50f0d96a4c36aac3609c3137facfb7
  exports: 338420f4cb786f9da52f81c2ebb060a2
  brightnessRGB8 f8d90adc2ce9792044e9b305a5511960
  checkerboard da4742356b7802efdc172f4702dbefbb
  imageInImage 385d9bb1fab60edb5d2a477dee163f36
  sprlImages 733c1e797d483d988c593dbabb29b315
  zipImages 755194174b5a2ec83e225817ff10b61e
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API ea4c313cfea87bcfbf12f5ad55ca0674
import  -/  servant-0.9.1.1@servant-0.9.1.1-kVuyd51zvkQL9yX4P4Nq:Servant.API.Alternative 23b24c34dda253c03c99ee6490f6a518
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant f16ad379d06ca393241deec48780d4ce
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server 6c78f2fd217ad1104fce5a8747d45e5e
import  -/  servant-server-0.9.1.1@servant-server-0.9.1.1-FQ1NWT7Wr2yC5f3jkCvAai:Servant.Server.Internal 8016294a2c09ad55135b1e9e2607120d
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM.TVar 8271fdeaf6f41f205dbe31243cf91390
import  -/  warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY:Network.Wai.Handler.Warp 6b4cd67732b77647b92c9f9152f22407
import  -/  warp-3.2.11.1@warp-3.2.11.1-DxTaqp5mZpf71E3TnvlUWY:Network.Wai.Handler.Warp.Run 52f6140d106c325277d02cdea63693f7
b050bf1a7a795478f33a337cf86ec38e
  $s$fAllCTRender:a ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ '[]
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a9
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a1)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ '[]
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a9
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a1) -}
292b4d5b686c81c6a15c56d375430256
  $s$fAllCTRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0 -}
bc651a9d81bf3e12dd9f292a36683976
  $s$fAllCTRender:a10 ::
    Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)
    -> Network.HTTP.Media.MediaType.Internal.MediaType
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)) ->
                 Servant.JuicyPixels.$fAcceptTYPEJPEG1) -}
833908c561430fbc0363b2c381f5d479
  $s$fAllCTRender:a11 ::
    Servant.API.ContentTypes.AllCTRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ GHC.Types.Bool
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a12)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Servant.API.ContentTypes.JSON
                     @ '[]
                     @ GHC.Types.Bool
                     Servant.API.ContentTypes.$fAcceptTYPEJSON_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Servant.API.ContentTypes.JSON>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a12) -}
bf7f9a86d4e4b41b0fd4f75cb387c2cc
  $s$fAllCTRender:a12 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a1 -}
a00589908ec394639af1f19837e02b1b
  $s$fAllCTRender:a13 ::
    Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON]
    -> GHC.Types.Bool
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.API.ContentTypes.JSON])
                   (eta1 :: GHC.Types.Bool) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.API.ContentTypes.$fAcceptTYPEJSON1,
                    Lib.$s$fAllCTRender:a_$sencode eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
be1fc6332b449e0d82d8f0ea27c25fce
  $s$fAllCTRender:a14 ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa -}
5c1c8de4523cf14ade9388f126d031eb
  $s$fAllCTRender:a15 ::
    Servant.API.ContentTypes.AllCTRender
      '[Api.GIFAnim]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Api.GIFAnim]
                  @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Api.GIFAnim
                     @ '[]
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Api.$fAcceptTYPEGIFAnim_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0] <*>_N <Api.GIFAnim>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a16)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Api.GIFAnim
                     @ '[]
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Api.$fAcceptTYPEGIFAnim_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0] <*>_N <Api.GIFAnim>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a16) -}
32f95aa51fb33ecba6452bf8e1202134
  $s$fAllCTRender:a16 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Api.GIFAnim]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a2 -}
41c5d42d7d1cdf769b4922837da94f3e
  $s$fAllCTRender:a17 ::
    Servant.API.ContentTypes.AllCTRender '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Htmls.HTMLBlaze]
                  @ Models.Tool
                  (Servant.API.ContentTypes.$fAllCTRender:a_$cp1AllCTRender
                     @ Htmls.HTMLBlaze
                     @ '[]
                     @ Models.Tool
                     Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a18)
                  (Servant.API.ContentTypes.$fAllCTRender:a_$chandleAcceptH
                     @ Htmls.HTMLBlaze
                     @ '[]
                     @ Models.Tool
                     Htmls.$fAcceptTYPEHTMLBlaze_$ccontentType
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:Accept[0]
                               <*>_N <Htmls.HTMLBlaze>_N))
                     Servant.API.ContentTypes.$fAllMimeUnrender[]a_$callMime
                       `cast`
                     (Sym (Servant.API.ContentTypes.N:AllMime[0] <'[]>_N))
                     Lib.$s$fAllCTRender:a18) -}
aec0cc648e9447e884a22886a76a69dc
  $s$fAllCTRender:a18 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a3 -}
6fa8bdeabee8d8ab4aa55aa4f2e2c87b
  $s$fAllCTRender:a19 ::
    Data.Proxy.Proxy '[Htmls.HTMLBlaze]
    -> Models.Tool
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Htmls.HTMLBlaze])
                   (eta1 :: Models.Tool) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Htmls.$fAcceptTYPEHTMLBlaze1,
                    Data.ByteString.Builder.toLazyByteString
                      (Htmls.$fMimeRenderTYPEHTMLBlazea_go3
                         @ ()
                         Htmls.$fMimeRenderTYPEHTMLBlazea1
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                         (Htmls.$fToMarkupTool_$ctoMarkup eta1)))
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
659b77ae582467cd69072bd1452f1665
  $s$fAllCTRender:a2 ::
    Data.Proxy.Proxy '[Servant.JuicyPixels.JPEG 100]
    -> Codec.Picture.Types.DynamicImage
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Servant.JuicyPixels.JPEG 100])
                   (eta1 :: Codec.Picture.Types.DynamicImage) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Servant.JuicyPixels.$fAcceptTYPEJPEG1,
                    Codec.Picture.Saving.imageToJpg (GHC.Types.I# 100#) eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
aff86f2f73549db6e2409a2ed2d2f247
  $s$fAllCTRender:a20 ::
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze Models.Tool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea -}
87da24c18d0cc3bd721d8c5c521d80da
  $s$fAllCTRender:a3 ::
    Servant.API.ContentTypes.MimeRender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage -}
0b6caca30326407e36dc5f2783bd5111
  $s$fAllCTRender:a4 ::
    Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100)
    -> Codec.Picture.Types.DynamicImage
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy (Servant.JuicyPixels.JPEG 100))
                   (eta1 :: Codec.Picture.Types.DynamicImage) ->
                 Codec.Picture.Saving.imageToJpg (GHC.Types.I# 100#) eta1) -}
b0f447f58dde75e6871115d34e455315
  $s$fAllCTRender:a5 ::
    'GHC.Types.True Data.Type.Equality.~ 'GHC.Types.True
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a6
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <GHC.Types.Bool>_N) <'GHC.Types.True>_N <'GHC.Types.True>_N) -}
cec486086a0a95c601c1392fc7fef463
  $s$fAllCTRender:a6 :: 'GHC.Types.True GHC.Types.~~ 'GHC.Types.True
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   @ 'GHC.Types.True
                   @ 'GHC.Types.True
                   @~ <'GHC.Types.True>_N) -}
4aa291980b51db6c276b439ff21d158e
  $s$fAllCTRender:a7 :: GHC.TypeLits.KnownNat 100
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a8
                  `cast`
                (Trans
                     (Sym (GHC.TypeLits.N:SNat[0] <100>_P))
                     (Sym (GHC.TypeLits.N:KnownNat[0]) <100>_N)) -}
2a3bc306268d1867831cbb0a1e34e90a
  $s$fAllCTRender:a8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
2a8bf2e3b9c72feba9bd6e7c8ca6c745
  $s$fAllCTRender:a9 ::
    Servant.API.ContentTypes.Accept (Servant.JuicyPixels.JPEG 100)
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllCTRender:a10
                  `cast`
                (Sym (Servant.API.ContentTypes.N:Accept[0]
                          <*>_N <Servant.JuicyPixels.JPEG 100>_N)) -}
8e1d0f1905d7e9d0e9bea8e2030f7e9c
  $s$fAllCTRender:a_$s$fAllMimeRender:a0 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     Lib.$s$fAllCTRender:a3)
                  Lib.$s$fAllCTRender:a2 -}
3ea54566e7b1e8d39fbe6a18c7302c7e
  $s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender ::
    Data.Proxy.Proxy '[Api.GIFAnim]
    -> [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
    -> [(Network.HTTP.Media.MediaType.Internal.MediaType,
         Data.ByteString.Lazy.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,A><L,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Data.Proxy.Proxy '[Api.GIFAnim])
                   (eta1 :: [Codec.Picture.Types.Image
                               Codec.Picture.Types.PixelRGB8]) ->
                 GHC.Types.:
                   @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                      Data.ByteString.Lazy.Internal.ByteString)
                   (Api.$fAcceptTYPEGIFAnim_$ccontentType
                      (Data.Proxy.Proxy @ GHC.Types.* @ Api.GIFAnim),
                    Api.$fMimeRenderTYPEGIFAnim[]_$cmimeRender
                      (Data.Proxy.Proxy @ GHC.Types.* @ Api.GIFAnim)
                      eta1)
                   (GHC.Types.[]
                      @ (Network.HTTP.Media.MediaType.Internal.MediaType,
                         Data.ByteString.Lazy.Internal.ByteString))) -}
3a3545b8e2d256d2b71d66114e5fc821
  $s$fAllCTRender:a_$s$fAllMimeRender:a1 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Servant.API.ContentTypes.JSON] GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.API.ContentTypes.JSON]
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Servant.API.ContentTypes.JSON
                     @ GHC.Types.Bool
                     Lib.$s$fAllCTRender:a14)
                  Lib.$s$fAllCTRender:a13 -}
c9a868608989900fb70079d46d0e305f
  $s$fAllCTRender:a_$s$fAllMimeRender:a2 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Api.GIFAnim]
      [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Api.GIFAnim]
                  @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Api.GIFAnim
                     @ [Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8]
                     Api.$fMimeRenderTYPEGIFAnim[])
                  Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender -}
66aaee4119b8e1f9bab5ebe49e887647
  $s$fAllCTRender:a_$s$fAllMimeRender:a3 ::
    Servant.API.ContentTypes.AllMimeRender
      '[Htmls.HTMLBlaze] Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Htmls.HTMLBlaze]
                  @ Models.Tool
                  (Servant.API.ContentTypes.$fAllMimeRender:a0_$cp1AllMimeRender
                     @ Htmls.HTMLBlaze
                     @ Models.Tool
                     Lib.$s$fAllCTRender:a20)
                  Lib.$s$fAllCTRender:a19 -}
4f5753d433868fbf3b097aceb4e63fc9
  $s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea ::
    Servant.API.ContentTypes.MimeRender Htmls.HTMLBlaze Models.Tool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Htmls.HTMLBlaze
                  @ Models.Tool
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cp1MimeRender
                     @ Models.Tool
                     Htmls.$fToMarkupTool)
                  (Htmls.$fMimeRenderTYPEHTMLBlazea_$cmimeRender
                     @ Models.Tool
                     Htmls.$fToMarkupTool) -}
556777706d87e03f5fdb07cacbb6efba
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage ::
    Servant.API.ContentTypes.MimeRender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ (Servant.JuicyPixels.JPEG 100)
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage_$cp1MimeRender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R)
                  Lib.$s$fAllCTRender:a4 -}
09d630df8b515fabeec3a32c4792bbca
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa ::
    Servant.API.ContentTypes.MimeRender
      Servant.API.ContentTypes.JSON GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ Servant.API.ContentTypes.JSON
                  @ GHC.Types.Bool
                  (Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cp1MimeRender
                     @ GHC.Types.Bool
                     Data.Aeson.Types.ToJSON.$fToJSONBool)
                  Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender -}
92dd26c280f88d05f44b36294c8a8b9a
  $s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender ::
    Data.Proxy.Proxy Servant.API.ContentTypes.JSON
    -> GHC.Types.Bool -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Proxy.Proxy Servant.API.ContentTypes.JSON)
                   (eta :: GHC.Types.Bool) ->
                 Lib.$s$fAllCTRender:a_$sencode eta) -}
3b3bce2440c2b34d0d88f8cafb52d42e
  $s$fAllCTRender:a_$sencode ::
    GHC.Types.Bool -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Bool) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Data.Aeson.Encoding.Internal.bool eta)
                     `cast`
                   (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                        <Data.Aeson.Types.Internal.Value>_P)) -}
4e491e210a68502f96a3998d3140ec01
  $s$fAllMimeUnrender:a ::
    Servant.API.ContentTypes.AllMimeUnrender
      '[Servant.JuicyPixels.JPEG 100] Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ '[Servant.JuicyPixels.JPEG 100]
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$cp1AllMimeUnrender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     @ '[]
                     Lib.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a
                        @ Codec.Picture.Types.DynamicImage))
                  (Servant.API.ContentTypes.$fAllMimeUnrender:a_$callMimeUnrender
                     @ (Servant.JuicyPixels.JPEG 100)
                     @ Codec.Picture.Types.DynamicImage
                     @ '[]
                     Lib.$s$fAllMimeUnrender:a1
                     (Servant.API.ContentTypes.$fAllMimeUnrender[]a
                        @ Codec.Picture.Types.DynamicImage)) -}
2708bb0a9f3c5fb9b4d996e8591de4ae
  $s$fAllMimeUnrender:a1 ::
    Servant.API.ContentTypes.MimeUnrender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage -}
ce2a0483a2c6e734df98a108095f86e7
  $s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage ::
    Servant.API.ContentTypes.MimeUnrender
      (Servant.JuicyPixels.JPEG 100) Codec.Picture.Types.DynamicImage
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ *
                  @ (Servant.JuicyPixels.JPEG 100)
                  @ Codec.Picture.Types.DynamicImage
                  (Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage_$cp1MimeRender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R)
                  (Servant.JuicyPixels.$fMimeUnrenderTYPEJPEGDynamicImage_$cmimeUnrender
                     @ 100
                     Lib.$s$fAllCTRender:a7
                     Lib.$s$fAllCTRender:a5
                       `cast`
                     ((Data.Type.Equality.~)
                        <GHC.Types.Bool>_N
                        (Sym (LeqDef (<100>_N, <100>_N)))
                        <'GHC.Types.True>_N)_R) -}
e6f517a8f99ce2bc16d7e0a81f328fed
  $sserve2 ::
    Data.Proxy.Proxy
      (("postImg"
        Servant.API.Sub.:> (Servant.API.Capture.Capture
                              "true/false" GHC.Types.Bool
                            Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                  '[Servant.JuicyPixels.JPEG 100]
                                                  Codec.Picture.Types.DynamicImage
                                                Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                     '[Servant.API.ContentTypes.JSON]
                                                                     GHC.Types.Bool)))
       Servant.API.Alternative.:<|> (("image"
                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                            "tool" GHC.Base.String
                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                               '[Servant.JuicyPixels.JPEG
                                                                                   100]
                                                                               Codec.Picture.Types.DynamicImage))
                                     Servant.API.Alternative.:<|> (("gif"
                                                                    Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Api.GIFAnim]
                                                                                                             [Codec.Picture.Types.Image
                                                                                                                Codec.Picture.Types.PixelRGB8]))
                                                                   Servant.API.Alternative.:<|> ("show"
                                                                                                 Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                       "tool"
                                                                                                                       GHC.Base.String
                                                                                                                     Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                          '[Htmls.HTMLBlaze]
                                                                                                                                          Models.Tool)))))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("postImg"
              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                    "true/false" GHC.Types.Bool
                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool)))
             Servant.API.Alternative.:<|> (("image"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "tool" GHC.Base.String
                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                         100]
                                                                                     Codec.Picture.Types.DynamicImage))
                                           Servant.API.Alternative.:<|> (("gif"
                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                "tool"
                                                                                                GHC.Base.String
                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                   '[Api.GIFAnim]
                                                                                                                   [Codec.Picture.Types.Image
                                                                                                                      Codec.Picture.Types.PixelRGB8]))
                                                                         Servant.API.Alternative.:<|> ("show"
                                                                                                       Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                             "tool"
                                                                                                                             GHC.Base.String
                                                                                                                           Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                '[Htmls.HTMLBlaze]
                                                                                                                                                Models.Tool))))))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ env
                   (w :: Data.Proxy.Proxy
                           (("postImg"
                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                   "true/false" GHC.Types.Bool
                                                 Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                       '[Servant.JuicyPixels.JPEG
                                                                           100]
                                                                       Codec.Picture.Types.DynamicImage
                                                                     Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                          '[Servant.API.ContentTypes.JSON]
                                                                                          GHC.Types.Bool)))
                            Servant.API.Alternative.:<|> (("image"
                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                 "tool"
                                                                                 GHC.Base.String
                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                                        100]
                                                                                                    Codec.Picture.Types.DynamicImage))
                                                          Servant.API.Alternative.:<|> (("gif"
                                                                                         Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                               "tool"
                                                                                                               GHC.Base.String
                                                                                                             Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                  '[Api.GIFAnim]
                                                                                                                                  [Codec.Picture.Types.Image
                                                                                                                                     Codec.Picture.Types.PixelRGB8]))
                                                                                        Servant.API.Alternative.:<|> ("show"
                                                                                                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                            "tool"
                                                                                                                                            GHC.Base.String
                                                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                               '[Htmls.HTMLBlaze]
                                                                                                                                                               Models.Tool))))))
                   (w1 :: Servant.Server.Internal.Context.Context '[])
                   (w2 :: Servant.Server.Internal.RoutingApplication.Delayed
                            env
                            (Servant.Server.Internal.Server
                               (("postImg"
                                 Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                       "true/false" GHC.Types.Bool
                                                     Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                           '[Servant.JuicyPixels.JPEG
                                                                               100]
                                                                           Codec.Picture.Types.DynamicImage
                                                                         Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                              '[Servant.API.ContentTypes.JSON]
                                                                                              GHC.Types.Bool)))
                                Servant.API.Alternative.:<|> (("image"
                                                               Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                     "tool"
                                                                                     GHC.Base.String
                                                                                   Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                        '[Servant.JuicyPixels.JPEG
                                                                                                            100]
                                                                                                        Codec.Picture.Types.DynamicImage))
                                                              Servant.API.Alternative.:<|> (("gif"
                                                                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                   "tool"
                                                                                                                   GHC.Base.String
                                                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                      '[Api.GIFAnim]
                                                                                                                                      [Codec.Picture.Types.Image
                                                                                                                                         Codec.Picture.Types.PixelRGB8]))
                                                                                            Servant.API.Alternative.:<|> ("show"
                                                                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                "tool"
                                                                                                                                                GHC.Base.String
                                                                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                   '[Htmls.HTMLBlaze]
                                                                                                                                                                   Models.Tool))))))) ->
                 case w of w3 { Data.Proxy.Proxy ->
                 Lib.$w$dHasServer
                   @ env
                   (Data.Proxy.Proxy
                      @ *
                      @ (("postImg"
                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                "true/false" GHC.Types.Bool
                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                    '[Servant.JuicyPixels.JPEG 100]
                                                                    Codec.Picture.Types.DynamicImage
                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                       GHC.Types.Bool)))
                         Servant.API.Alternative.:<|> (("image"
                                                        Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                              "tool" GHC.Base.String
                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                 '[Servant.JuicyPixels.JPEG
                                                                                                     100]
                                                                                                 Codec.Picture.Types.DynamicImage))
                                                       Servant.API.Alternative.:<|> (("gif"
                                                                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                            "tool"
                                                                                                            GHC.Base.String
                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                               '[Api.GIFAnim]
                                                                                                                               [Codec.Picture.Types.Image
                                                                                                                                  Codec.Picture.Types.PixelRGB8]))
                                                                                     Servant.API.Alternative.:<|> ("show"
                                                                                                                   Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                         "tool"
                                                                                                                                         GHC.Base.String
                                                                                                                                       Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                            '[Htmls.HTMLBlaze]
                                                                                                                                                            Models.Tool))))))
                   w1
                   w2 }) -}
e879f7abc874c6927a6c38242bd3e747
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
208770979e3caa14e904cd75c8d0fae1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
78239cda4a2a90f44394878e1bc05c6e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "picFun-0.1.0.0-JNPOSgLeq7jJoAtQCvQXmk"#) -}
aa820ee8200966709d4cdc8488815b44
  $w$dHasServer ::
    Data.Proxy.Proxy
      (("postImg"
        Servant.API.Sub.:> (Servant.API.Capture.Capture
                              "true/false" GHC.Types.Bool
                            Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                  '[Servant.JuicyPixels.JPEG 100]
                                                  Codec.Picture.Types.DynamicImage
                                                Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                     '[Servant.API.ContentTypes.JSON]
                                                                     GHC.Types.Bool)))
       Servant.API.Alternative.:<|> (("image"
                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                            "tool" GHC.Base.String
                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                               '[Servant.JuicyPixels.JPEG
                                                                                   100]
                                                                               Codec.Picture.Types.DynamicImage))
                                     Servant.API.Alternative.:<|> (("gif"
                                                                    Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Api.GIFAnim]
                                                                                                             [Codec.Picture.Types.Image
                                                                                                                Codec.Picture.Types.PixelRGB8]))
                                                                   Servant.API.Alternative.:<|> ("show"
                                                                                                 Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                       "tool"
                                                                                                                       GHC.Base.String
                                                                                                                     Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                          '[Htmls.HTMLBlaze]
                                                                                                                                          Models.Tool)))))
    -> Servant.Server.Internal.Context.Context '[]
    -> Servant.Server.Internal.RoutingApplication.Delayed
         env
         (Servant.Server.Internal.Server
            (("postImg"
              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                    "true/false" GHC.Types.Bool
                                  Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool)))
             Servant.API.Alternative.:<|> (("image"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "tool" GHC.Base.String
                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                         100]
                                                                                     Codec.Picture.Types.DynamicImage))
                                           Servant.API.Alternative.:<|> (("gif"
                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                "tool"
                                                                                                GHC.Base.String
                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                   '[Api.GIFAnim]
                                                                                                                   [Codec.Picture.Types.Image
                                                                                                                      Codec.Picture.Types.PixelRGB8]))
                                                                         Servant.API.Alternative.:<|> ("show"
                                                                                                       Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                             "tool"
                                                                                                                             GHC.Base.String
                                                                                                                           Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                '[Htmls.HTMLBlaze]
                                                                                                                                                Models.Tool))))))
    -> Servant.Server.Internal.Router.Router env
  {- Arity: 3, Strictness: <S,1*H><L,U><L,U>, Inline: [0] -}
30e2cb3bffebf9f69ea9ba85d3f8e1d0
  $wzipSrv ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> (# GHC.Types.Bool
          -> Codec.Picture.Types.DynamicImage
          -> Control.Monad.Trans.Except.ExceptT
               Servant.Server.Internal.ServantErr.ServantErr
               GHC.Types.IO
               GHC.Types.Bool,
          (GHC.Base.String
           -> Control.Monad.Trans.Except.ExceptT
                Servant.Server.Internal.ServantErr.ServantErr
                GHC.Types.IO
                Codec.Picture.Types.DynamicImage)
          Servant.API.Alternative.:<|> ((GHC.Base.String
                                         -> Control.Monad.Trans.Except.ExceptT
                                              Servant.Server.Internal.ServantErr.ServantErr
                                              GHC.Types.IO
                                              [Codec.Picture.Types.Image
                                                 Codec.Picture.Types.PixelRGB8])
                                        Servant.API.Alternative.:<|> (GHC.Base.String
                                                                      -> Control.Monad.Trans.Except.ExceptT
                                                                           Servant.Server.Internal.ServantErr.ServantErr
                                                                           GHC.Types.IO
                                                                           Models.Tool)) #)
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [0] -}
eb6f72df2110eb88464b60ee63463ffb
  imagApp :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.imagApp1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
474a69a963b5b3419a0d6cd8831a56c1
  imagApp1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.atomically#
                        @ (GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                        Lib.imagApp8
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.atomically#
                        @ (GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                        Lib.imagApp3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Network.Wai.Handler.Warp.Run.$wrunSettings
                   Lib.imagApp2
                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                     `cast`
                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings13
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                     `cast`
                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Types.IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   GHC.Types.False
                   Network.Wai.Handler.Warp.Settings.defaultSettings8
                     `cast`
                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                   GHC.Types.True
                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Network.HTTP.Types.Status.Status>_R
                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (Servant.Server.serveWithContext
                      @ Api.ImageAPI
                      @ '[]
                      Lib.$sserve2
                        `cast`
                      (Sym (Servant.Server.Internal.N:HasServer[0]
                                <*>_N
                                <("postImg"
                                  Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                        "true/false" GHC.Types.Bool
                                                      Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                            '[Servant.JuicyPixels.JPEG
                                                                                100]
                                                                            Codec.Picture.Types.DynamicImage
                                                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                               '[Servant.API.ContentTypes.JSON]
                                                                                               GHC.Types.Bool)))
                                 Servant.API.Alternative.:<|> (("image"
                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                      "tool"
                                                                                      GHC.Base.String
                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                         '[Servant.JuicyPixels.JPEG
                                                                                                             100]
                                                                                                         Codec.Picture.Types.DynamicImage))
                                                               Servant.API.Alternative.:<|> (("gif"
                                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                    "tool"
                                                                                                                    GHC.Base.String
                                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                       '[Api.GIFAnim]
                                                                                                                                       [Codec.Picture.Types.Image
                                                                                                                                          Codec.Picture.Types.PixelRGB8]))
                                                                                             Servant.API.Alternative.:<|> ("show"
                                                                                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                                 "tool"
                                                                                                                                                 GHC.Base.String
                                                                                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                    '[Htmls.HTMLBlaze]
                                                                                                                                                                    Models.Tool))))>_N
                                <'[]>_N))
                      (Data.Proxy.Proxy @ * @ Api.ImageAPI)
                      Servant.Server.Internal.Context.$WEmptyContext
                      (case Lib.$wzipSrv ipv1 ipv3 of ww { (#,#) ww1 ww2 ->
                       (Servant.API.Alternative.:<|>
                          @ (GHC.Types.Bool
                             -> Codec.Picture.Types.DynamicImage
                             -> Control.Monad.Trans.Except.ExceptT
                                  Servant.Server.Internal.ServantErr.ServantErr
                                  GHC.Types.IO
                                  GHC.Types.Bool)
                          @ ((GHC.Base.String
                              -> Control.Monad.Trans.Except.ExceptT
                                   Servant.Server.Internal.ServantErr.ServantErr
                                   GHC.Types.IO
                                   Codec.Picture.Types.DynamicImage)
                             Servant.API.Alternative.:<|> ((GHC.Base.String
                                                            -> Control.Monad.Trans.Except.ExceptT
                                                                 Servant.Server.Internal.ServantErr.ServantErr
                                                                 GHC.Types.IO
                                                                 [Codec.Picture.Types.Image
                                                                    Codec.Picture.Types.PixelRGB8])
                                                           Servant.API.Alternative.:<|> (GHC.Base.String
                                                                                         -> Control.Monad.Trans.Except.ExceptT
                                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                                              GHC.Types.IO
                                                                                              Models.Tool)))
                          ww1
                          ww2)
                         `cast`
                       (Trans
                            (Trans
                                 (<GHC.Types.Bool>_R
                                  ->_R Trans
                                           (<Codec.Picture.Types.DynamicImage>_R
                                            ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                               <Network.HTTP.Types.Method.StdMethod>_N
                                                               <GHC.Types.Bool>_N
                                                               <'[Servant.API.ContentTypes.JSON]>_N
                                                               <200>_N
                                                               <'Network.HTTP.Types.Method.POST>_N
                                                               <Control.Monad.Trans.Except.ExceptT
                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                  GHC.Types.IO>_N)))
                                           (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                          <*>_N
                                                          <Codec.Picture.Types.DynamicImage>_N
                                                          <'[Servant.JuicyPixels.JPEG 100]>_N
                                                          <Servant.API.Verbs.Verb
                                                             'Network.HTTP.Types.Method.POST
                                                             200
                                                             '[Servant.API.ContentTypes.JSON]
                                                             GHC.Types.Bool>_N
                                                          <Control.Monad.Trans.Except.ExceptT
                                                             Servant.Server.Internal.ServantErr.ServantErr
                                                             GHC.Types.IO>_N))))
                                 (Trans
                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                     <*>_N
                                                     <GHC.Types.Bool>_N
                                                     <"true/false">_N
                                                     <Servant.API.ReqBody.ReqBody
                                                        '[Servant.JuicyPixels.JPEG 100]
                                                        Codec.Picture.Types.DynamicImage
                                                      Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                           '[Servant.API.ContentTypes.JSON]
                                                                           GHC.Types.Bool>_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO>_N)))
                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                     <*>_N
                                                     <Servant.API.Capture.Capture
                                                        "true/false" GHC.Types.Bool
                                                      Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                            '[Servant.JuicyPixels.JPEG
                                                                                100]
                                                                            Codec.Picture.Types.DynamicImage
                                                                          Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                               '[Servant.API.ContentTypes.JSON]
                                                                                               GHC.Types.Bool)>_N
                                                     <"postImg">_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                        GHC.Types.IO>_N))))
                             Servant.API.Alternative.:<|> Trans
                                                              (Trans
                                                                   (<[GHC.Types.Char]>_R
                                                                    ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                       <Network.HTTP.Types.Method.StdMethod>_N
                                                                                       <Codec.Picture.Types.DynamicImage>_N
                                                                                       <'[Servant.JuicyPixels.JPEG
                                                                                            100]>_N
                                                                                       <200>_N
                                                                                       <'Network.HTTP.Types.Method.GET>_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N)))
                                                                   (Trans
                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                       <*>_N
                                                                                       <[GHC.Types.Char]>_N
                                                                                       <"tool">_N
                                                                                       <Servant.API.Verbs.Verb
                                                                                          'Network.HTTP.Types.Method.GET
                                                                                          200
                                                                                          '[Servant.JuicyPixels.JPEG
                                                                                              100]
                                                                                          Codec.Picture.Types.DynamicImage>_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N)))
                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                       <*>_N
                                                                                       <Servant.API.Capture.Capture
                                                                                          "tool"
                                                                                          GHC.Base.String
                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                             '[Servant.JuicyPixels.JPEG
                                                                                                                 100]
                                                                                                             Codec.Picture.Types.DynamicImage>_N
                                                                                       <"image">_N
                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                          GHC.Types.IO>_N))))
                                                               Servant.API.Alternative.:<|> Trans
                                                                                                (Trans
                                                                                                     (<[GHC.Types.Char]>_R
                                                                                                      ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                         <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                         <[Codec.Picture.Types.Image
                                                                                                                             Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <'[Api.GIFAnim]>_N
                                                                                                                         <200>_N
                                                                                                                         <'Network.HTTP.Types.Method.GET>_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N)))
                                                                                                     (Trans
                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                         <*>_N
                                                                                                                         <[GHC.Types.Char]>_N
                                                                                                                         <"tool">_N
                                                                                                                         <Servant.API.Verbs.Verb
                                                                                                                            'Network.HTTP.Types.Method.GET
                                                                                                                            200
                                                                                                                            '[Api.GIFAnim]
                                                                                                                            [Codec.Picture.Types.Image
                                                                                                                               Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N)))
                                                                                                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                         <*>_N
                                                                                                                         <Servant.API.Capture.Capture
                                                                                                                            "tool"
                                                                                                                            GHC.Base.String
                                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                               '[Api.GIFAnim]
                                                                                                                                               [Codec.Picture.Types.Image
                                                                                                                                                  Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                         <"gif">_N
                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                            Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                            GHC.Types.IO>_N))))
                                                                                                 Servant.API.Alternative.:<|> Trans
                                                                                                                                  (<[GHC.Types.Char]>_R
                                                                                                                                   ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                                                      <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                                                      <Models.Tool>_N
                                                                                                                                                      <'[Htmls.HTMLBlaze]>_N
                                                                                                                                                      <200>_N
                                                                                                                                                      <'Network.HTTP.Types.Method.GET>_N
                                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                         Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                         GHC.Types.IO>_N)))
                                                                                                                                  (Trans
                                                                                                                                       (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                                                      <*>_N
                                                                                                                                                      <[GHC.Types.Char]>_N
                                                                                                                                                      <"tool">_N
                                                                                                                                                      <Servant.API.Verbs.Verb
                                                                                                                                                         'Network.HTTP.Types.Method.GET
                                                                                                                                                         200
                                                                                                                                                         '[Htmls.HTMLBlaze]
                                                                                                                                                         Models.Tool>_N
                                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                         Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                         GHC.Types.IO>_N)))
                                                                                                                                       (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                                                      <*>_N
                                                                                                                                                      <Servant.API.Capture.Capture
                                                                                                                                                         "tool"
                                                                                                                                                         GHC.Base.String
                                                                                                                                                       Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                            '[Htmls.HTMLBlaze]
                                                                                                                                                                            Models.Tool>_N
                                                                                                                                                      <"show">_N
                                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                         Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                         GHC.Types.IO>_N)))))_R
                                                                                                (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                               <"show"
                                                                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                      "tool"
                                                                                                                                      GHC.Base.String
                                                                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                         '[Htmls.HTMLBlaze]
                                                                                                                                                         Models.Tool)>_N
                                                                                                               <"gif"
                                                                                                                Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                      "tool"
                                                                                                                                      GHC.Base.String
                                                                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                         '[Api.GIFAnim]
                                                                                                                                                         [Codec.Picture.Types.Image
                                                                                                                                                            Codec.Picture.Types.PixelRGB8])>_N
                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                  Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                  GHC.Types.IO>_N))))_R
                                                              (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                             <("gif"
                                                                               Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                     "tool"
                                                                                                     GHC.Base.String
                                                                                                   Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                        '[Api.GIFAnim]
                                                                                                                        [Codec.Picture.Types.Image
                                                                                                                           Codec.Picture.Types.PixelRGB8]))
                                                                              Servant.API.Alternative.:<|> ("show"
                                                                                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                  "tool"
                                                                                                                                  GHC.Base.String
                                                                                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                     '[Htmls.HTMLBlaze]
                                                                                                                                                     Models.Tool))>_N
                                                                             <"image"
                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                    "tool"
                                                                                                    GHC.Base.String
                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                       '[Servant.JuicyPixels.JPEG
                                                                                                                           100]
                                                                                                                       Codec.Picture.Types.DynamicImage)>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                GHC.Types.IO>_N))))_R
                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                           <("image"
                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                   "tool" GHC.Base.String
                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                      '[Servant.JuicyPixels.JPEG
                                                                                          100]
                                                                                      Codec.Picture.Types.DynamicImage))
                                            Servant.API.Alternative.:<|> (("gif"
                                                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                 "tool"
                                                                                                 GHC.Base.String
                                                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                    '[Api.GIFAnim]
                                                                                                                    [Codec.Picture.Types.Image
                                                                                                                       Codec.Picture.Types.PixelRGB8]))
                                                                          Servant.API.Alternative.:<|> ("show"
                                                                                                        Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                              "tool"
                                                                                                                              GHC.Base.String
                                                                                                                            Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                 '[Htmls.HTMLBlaze]
                                                                                                                                                 Models.Tool)))>_N
                                           <"postImg"
                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                  "true/false" GHC.Types.Bool
                                                                Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                      '[Servant.JuicyPixels.JPEG
                                                                                          100]
                                                                                      Codec.Picture.Types.DynamicImage
                                                                                    Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                         '[Servant.API.ContentTypes.JSON]
                                                                                                         GHC.Types.Bool))>_N
                                           <Control.Monad.Trans.Except.ExceptT
                                              Servant.Server.Internal.ServantErr.ServantErr
                                              GHC.Types.IO>_N)))) }))
                   ipv2 } }) -}
dc8443598ac29d27cb2fe9ac8bbaa6dd
  imagApp10 ::
    Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8)
                        Lib.imagApp11 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
9c1e9155da7c50ef82cb33c46e67e654
  imagApp11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        270000#
                        s1 of ds { (#,#) ipv ipv1 ->
                 let {
                   ipv2 :: GHC.Prim.Addr#
                   = GHC.Prim.byteArrayContents#
                       ipv1
                         `cast`
                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                 } in
                 case {__pkg_ccall primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH hsprimitive_memset_Word8 GHC.Prim.Addr#
                                                                                                                      -> GHC.Prim.Int#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld #)}
                        ipv2
                        0#
                        270000##
                        0##
                        ipv of wild { Unit# ds8 ->
                 let {
                   ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                   = GHC.ForeignPtr.PlainPtr ipv1
                 } in
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ipv3
                        ds8 of s' { DEFAULT ->
                 letrec {
                   $wlineGenerator :: GHC.Types.Int
                                      -> GHC.Prim.Int#
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0] -}
                   = \ (w :: GHC.Types.Int)
                       (ww :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 300#) of wild1 {
                       GHC.Types.False
                       -> case w of ww1 { GHC.Types.I# ww2 ->
                          letrec {
                            $wcolumn :: GHC.Prim.Int#
                                        -> GHC.Prim.Int#
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                            = \ (ww3 :: GHC.Prim.Int#)
                                (ww4 :: GHC.Prim.Int#)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 300#) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          ww3
                                          0##
                                          w2 of s2 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s2 of s'1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          (GHC.Prim.+# ww3 1#)
                                          200##
                                          s'1 of s4 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s4 of s'2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          (GHC.Prim.+# ww3 2#)
                                          0##
                                          s'2 of s5 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s5 of s'3 { DEFAULT ->
                                   $wcolumn
                                     (GHC.Prim.+# ww3 3#)
                                     (GHC.Prim.+# ww4 1#)
                                     s'3 } } } } } }
                                GHC.Types.True
                                -> $wlineGenerator (GHC.Types.I# ww3) (GHC.Prim.+# ww 1#) w2 }
                          } in
                          $wcolumn ww2 0# w1 }
                       GHC.Types.True -> (# w1, GHC.Tuple.() #) }
                 } in
                 case $wlineGenerator Lib.imagApp7 0# s' of ds1 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    Codec.Picture.Types.Image
                      @ Codec.Picture.Types.PixelRGB8
                      300#
                      300#
                      (Data.Vector.Storable.Vector
                         @ (Codec.Picture.Types.PixelBaseComponent
                              Codec.Picture.Types.PixelRGB8)
                         270000#
                         ipv2
                         ipv3) #) } } } }) -}
f5e47cf3c542a0219b2d6754a01c67d6
  imagApp2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8080#) -}
61082c27e13a059751c4943f8429f52c
  imagApp3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage #)
  {- Arity: 1,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ Codec.Picture.Types.DynamicImage
                        @ GHC.Prim.RealWorld
                        Lib.imagApp4
                        s1# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Conc.Sync.TVar @ Codec.Picture.Types.DynamicImage ipv1 #) }) -}
749445627ba274874366366321cd427b
  imagApp4 :: Codec.Picture.Types.DynamicImage
  {- Unfolding: (Codec.Picture.Types.ImageRGB8 Lib.imagApp5) -}
35295770a242198f9a795b6941d05fec
  imagApp5 :: Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8)
                        Lib.imagApp6 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
f4fdde2a782b4f3a5bfd6c37168981fd
  imagApp6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Codec.Picture.Types.Image Codec.Picture.Types.PixelRGB8 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        270000#
                        s1 of ds { (#,#) ipv ipv1 ->
                 let {
                   ipv2 :: GHC.Prim.Addr#
                   = GHC.Prim.byteArrayContents#
                       ipv1
                         `cast`
                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                 } in
                 case {__pkg_ccall primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH hsprimitive_memset_Word8 GHC.Prim.Addr#
                                                                                                                      -> GHC.Prim.Int#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld #)}
                        ipv2
                        0#
                        270000##
                        0##
                        ipv of wild { Unit# ds8 ->
                 let {
                   ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                   = GHC.ForeignPtr.PlainPtr ipv1
                 } in
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ipv3
                        ds8 of s' { DEFAULT ->
                 letrec {
                   $wlineGenerator :: GHC.Types.Int
                                      -> GHC.Prim.Int#
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,U>, Inline: [0] -}
                   = \ (w :: GHC.Types.Int)
                       (ww :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww 300#) of wild1 {
                       GHC.Types.False
                       -> case w of ww1 { GHC.Types.I# ww2 ->
                          letrec {
                            $wcolumn :: GHC.Prim.Int#
                                        -> GHC.Prim.Int#
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                            = \ (ww3 :: GHC.Prim.Int#)
                                (ww4 :: GHC.Prim.Int#)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww4 300#) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          ww3
                                          0##
                                          w2 of s2 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s2 of s'1 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          (GHC.Prim.+# ww3 1#)
                                          0##
                                          s'1 of s4 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s4 of s'2 { DEFAULT ->
                                   case GHC.Prim.writeWord8OffAddr#
                                          @ GHC.Prim.RealWorld
                                          ipv2
                                          (GHC.Prim.+# ww3 2#)
                                          0##
                                          s'2 of s5 { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.PtrRepLifted
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv3
                                          s5 of s'3 { DEFAULT ->
                                   $wcolumn
                                     (GHC.Prim.+# ww3 3#)
                                     (GHC.Prim.+# ww4 1#)
                                     s'3 } } } } } }
                                GHC.Types.True
                                -> $wlineGenerator (GHC.Types.I# ww3) (GHC.Prim.+# ww 1#) w2 }
                          } in
                          $wcolumn ww2 0# w1 }
                       GHC.Types.True -> (# w1, GHC.Tuple.() #) }
                 } in
                 case $wlineGenerator Lib.imagApp7 0# s' of ds1 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    Codec.Picture.Types.Image
                      @ Codec.Picture.Types.PixelRGB8
                      300#
                      300#
                      (Data.Vector.Storable.Vector
                         @ (Codec.Picture.Types.PixelBaseComponent
                              Codec.Picture.Types.PixelRGB8)
                         270000#
                         ipv2
                         ipv3) #) } } } }) -}
99f4b581cb047590fc92df2bfd19003e
  imagApp7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9e991d01e22c5c5c1fc9b56e1359a175
  imagApp8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage #)
  {- Arity: 1,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newTVar#
                        @ Codec.Picture.Types.DynamicImage
                        @ GHC.Prim.RealWorld
                        Lib.imagApp9
                        s1# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Conc.Sync.TVar @ Codec.Picture.Types.DynamicImage ipv1 #) }) -}
afc39719e6718c4d7212d357658e08db
  imagApp9 :: Codec.Picture.Types.DynamicImage
  {- Unfolding: (Codec.Picture.Types.ImageRGB8 Lib.imagApp10) -}
1a2def9b863a6c0e9a38574c0654ee86
  zipSrv ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> Servant.Server.Internal.Server Api.ImageAPI
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.zipSrv1
                  `cast`
                (<GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage>_R
                 ->_R <GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage>_R
                 ->_R Trans
                          (Trans
                               (<GHC.Types.Bool>_R
                                ->_R Trans
                                         (<Codec.Picture.Types.DynamicImage>_R
                                          ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                             <Network.HTTP.Types.Method.StdMethod>_N
                                                             <GHC.Types.Bool>_N
                                                             <'[Servant.API.ContentTypes.JSON]>_N
                                                             <200>_N
                                                             <'Network.HTTP.Types.Method.POST>_N
                                                             <Control.Monad.Trans.Except.ExceptT
                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                GHC.Types.IO>_N)))
                                         (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m5[0]
                                                        <*>_N
                                                        <Codec.Picture.Types.DynamicImage>_N
                                                        <'[Servant.JuicyPixels.JPEG 100]>_N
                                                        <Servant.API.Verbs.Verb
                                                           'Network.HTTP.Types.Method.POST
                                                           200
                                                           '[Servant.API.ContentTypes.JSON]
                                                           GHC.Types.Bool>_N
                                                        <Control.Monad.Trans.Except.ExceptT
                                                           Servant.Server.Internal.ServantErr.ServantErr
                                                           GHC.Types.IO>_N))))
                               (Trans
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                   <*>_N
                                                   <GHC.Types.Bool>_N
                                                   <"true/false">_N
                                                   <Servant.API.ReqBody.ReqBody
                                                      '[Servant.JuicyPixels.JPEG 100]
                                                      Codec.Picture.Types.DynamicImage
                                                    Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                         '[Servant.API.ContentTypes.JSON]
                                                                         GHC.Types.Bool>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N)))
                                    (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                   <*>_N
                                                   <Servant.API.Capture.Capture
                                                      "true/false" GHC.Types.Bool
                                                    Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                          '[Servant.JuicyPixels.JPEG
                                                                              100]
                                                                          Codec.Picture.Types.DynamicImage
                                                                        Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                             '[Servant.API.ContentTypes.JSON]
                                                                                             GHC.Types.Bool)>_N
                                                   <"postImg">_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                      GHC.Types.IO>_N))))
                           Servant.API.Alternative.:<|> Trans
                                                            (Trans
                                                                 (<[GHC.Types.Char]>_R
                                                                  ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                     <Network.HTTP.Types.Method.StdMethod>_N
                                                                                     <Codec.Picture.Types.DynamicImage>_N
                                                                                     <'[Servant.JuicyPixels.JPEG
                                                                                          100]>_N
                                                                                     <200>_N
                                                                                     <'Network.HTTP.Types.Method.GET>_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N)))
                                                                 (Trans
                                                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                     <*>_N
                                                                                     <[GHC.Types.Char]>_N
                                                                                     <"tool">_N
                                                                                     <Servant.API.Verbs.Verb
                                                                                        'Network.HTTP.Types.Method.GET
                                                                                        200
                                                                                        '[Servant.JuicyPixels.JPEG
                                                                                            100]
                                                                                        Codec.Picture.Types.DynamicImage>_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N)))
                                                                      (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                     <*>_N
                                                                                     <Servant.API.Capture.Capture
                                                                                        "tool"
                                                                                        GHC.Base.String
                                                                                      Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                           '[Servant.JuicyPixels.JPEG
                                                                                                               100]
                                                                                                           Codec.Picture.Types.DynamicImage>_N
                                                                                     <"image">_N
                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                        Servant.Server.Internal.ServantErr.ServantErr
                                                                                        GHC.Types.IO>_N))))
                                                             Servant.API.Alternative.:<|> Trans
                                                                                              (Trans
                                                                                                   (<[GHC.Types.Char]>_R
                                                                                                    ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                       <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                       <[Codec.Picture.Types.Image
                                                                                                                           Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <'[Api.GIFAnim]>_N
                                                                                                                       <200>_N
                                                                                                                       <'Network.HTTP.Types.Method.GET>_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N)))
                                                                                                   (Trans
                                                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                       <*>_N
                                                                                                                       <[GHC.Types.Char]>_N
                                                                                                                       <"tool">_N
                                                                                                                       <Servant.API.Verbs.Verb
                                                                                                                          'Network.HTTP.Types.Method.GET
                                                                                                                          200
                                                                                                                          '[Api.GIFAnim]
                                                                                                                          [Codec.Picture.Types.Image
                                                                                                                             Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N)))
                                                                                                        (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                       <*>_N
                                                                                                                       <Servant.API.Capture.Capture
                                                                                                                          "tool"
                                                                                                                          GHC.Base.String
                                                                                                                        Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                             '[Api.GIFAnim]
                                                                                                                                             [Codec.Picture.Types.Image
                                                                                                                                                Codec.Picture.Types.PixelRGB8]>_N
                                                                                                                       <"gif">_N
                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                          GHC.Types.IO>_N))))
                                                                                               Servant.API.Alternative.:<|> Trans
                                                                                                                                (<[GHC.Types.Char]>_R
                                                                                                                                 ->_R Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPEVerbm0[0]
                                                                                                                                                    <Network.HTTP.Types.Method.StdMethod>_N
                                                                                                                                                    <Models.Tool>_N
                                                                                                                                                    <'[Htmls.HTMLBlaze]>_N
                                                                                                                                                    <200>_N
                                                                                                                                                    <'Network.HTTP.Types.Method.GET>_N
                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                       GHC.Types.IO>_N)))
                                                                                                                                (Trans
                                                                                                                                     (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m11[0]
                                                                                                                                                    <*>_N
                                                                                                                                                    <[GHC.Types.Char]>_N
                                                                                                                                                    <"tool">_N
                                                                                                                                                    <Servant.API.Verbs.Verb
                                                                                                                                                       'Network.HTTP.Types.Method.GET
                                                                                                                                                       200
                                                                                                                                                       '[Htmls.HTMLBlaze]
                                                                                                                                                       Models.Tool>_N
                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                       GHC.Types.IO>_N)))
                                                                                                                                     (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:>m4[0]
                                                                                                                                                    <*>_N
                                                                                                                                                    <Servant.API.Capture.Capture
                                                                                                                                                       "tool"
                                                                                                                                                       GHC.Base.String
                                                                                                                                                     Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                                          '[Htmls.HTMLBlaze]
                                                                                                                                                                          Models.Tool>_N
                                                                                                                                                    <"show">_N
                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                                                       GHC.Types.IO>_N)))))_R
                                                                                              (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                                                             <"show"
                                                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                    "tool"
                                                                                                                                    GHC.Base.String
                                                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                       '[Htmls.HTMLBlaze]
                                                                                                                                                       Models.Tool)>_N
                                                                                                             <"gif"
                                                                                                              Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                    "tool"
                                                                                                                                    GHC.Base.String
                                                                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                       '[Api.GIFAnim]
                                                                                                                                                       [Codec.Picture.Types.Image
                                                                                                                                                          Codec.Picture.Types.PixelRGB8])>_N
                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                Servant.Server.Internal.ServantErr.ServantErr
                                                                                                                GHC.Types.IO>_N))))_R
                                                            (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                                                           <("gif"
                                                                             Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                   "tool"
                                                                                                   GHC.Base.String
                                                                                                 Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                      '[Api.GIFAnim]
                                                                                                                      [Codec.Picture.Types.Image
                                                                                                                         Codec.Picture.Types.PixelRGB8]))
                                                                            Servant.API.Alternative.:<|> ("show"
                                                                                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                                "tool"
                                                                                                                                GHC.Base.String
                                                                                                                              Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                                   '[Htmls.HTMLBlaze]
                                                                                                                                                   Models.Tool))>_N
                                                                           <"image"
                                                                            Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                  "tool"
                                                                                                  GHC.Base.String
                                                                                                Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                     '[Servant.JuicyPixels.JPEG
                                                                                                                         100]
                                                                                                                     Codec.Picture.Types.DynamicImage)>_N
                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                              Servant.Server.Internal.ServantErr.ServantErr
                                                                              GHC.Types.IO>_N))))_R
                          (Sub (Sym (Servant.Server.Internal.D:R:ServerTTYPE:<|>m[0]
                                         <("image"
                                           Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                 "tool" GHC.Base.String
                                                               Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                        100]
                                                                                    Codec.Picture.Types.DynamicImage))
                                          Servant.API.Alternative.:<|> (("gif"
                                                                         Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                               "tool"
                                                                                               GHC.Base.String
                                                                                             Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                  '[Api.GIFAnim]
                                                                                                                  [Codec.Picture.Types.Image
                                                                                                                     Codec.Picture.Types.PixelRGB8]))
                                                                        Servant.API.Alternative.:<|> ("show"
                                                                                                      Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                                                                            "tool"
                                                                                                                            GHC.Base.String
                                                                                                                          Servant.API.Sub.:> Servant.API.Verbs.Get
                                                                                                                                               '[Htmls.HTMLBlaze]
                                                                                                                                               Models.Tool)))>_N
                                         <"postImg"
                                          Servant.API.Sub.:> (Servant.API.Capture.Capture
                                                                "true/false" GHC.Types.Bool
                                                              Servant.API.Sub.:> (Servant.API.ReqBody.ReqBody
                                                                                    '[Servant.JuicyPixels.JPEG
                                                                                        100]
                                                                                    Codec.Picture.Types.DynamicImage
                                                                                  Servant.API.Sub.:> Servant.API.Verbs.Post
                                                                                                       '[Servant.API.ContentTypes.JSON]
                                                                                                       GHC.Types.Bool))>_N
                                         <Control.Monad.Trans.Except.ExceptT
                                            Servant.Server.Internal.ServantErr.ServantErr
                                            GHC.Types.IO>_N)))) -}
37b64137d9cdb0f61779fda74f1fa59a
  zipSrv1 ::
    GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage
    -> (GHC.Types.Bool
        -> Codec.Picture.Types.DynamicImage
        -> Control.Monad.Trans.Except.ExceptT
             Servant.Server.Internal.ServantErr.ServantErr
             GHC.Types.IO
             GHC.Types.Bool)
       Servant.API.Alternative.:<|> ((GHC.Base.String
                                      -> Control.Monad.Trans.Except.ExceptT
                                           Servant.Server.Internal.ServantErr.ServantErr
                                           GHC.Types.IO
                                           Codec.Picture.Types.DynamicImage)
                                     Servant.API.Alternative.:<|> ((GHC.Base.String
                                                                    -> Control.Monad.Trans.Except.ExceptT
                                                                         Servant.Server.Internal.ServantErr.ServantErr
                                                                         GHC.Types.IO
                                                                         [Codec.Picture.Types.Image
                                                                            Codec.Picture.Types.PixelRGB8])
                                                                   Servant.API.Alternative.:<|> (GHC.Base.String
                                                                                                 -> Control.Monad.Trans.Except.ExceptT
                                                                                                      Servant.Server.Internal.ServantErr.ServantErr
                                                                                                      GHC.Types.IO
                                                                                                      Models.Tool)))
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage)
                   (w1 :: GHC.Conc.Sync.TVar Codec.Picture.Types.DynamicImage) ->
                 case Lib.$wzipSrv w w1 of ww { (#,#) ww1 ww2 ->
                 Servant.API.Alternative.:<|>
                   @ (GHC.Types.Bool
                      -> Codec.Picture.Types.DynamicImage
                      -> Control.Monad.Trans.Except.ExceptT
                           Servant.Server.Internal.ServantErr.ServantErr
                           GHC.Types.IO
                           GHC.Types.Bool)
                   @ ((GHC.Base.String
                       -> Control.Monad.Trans.Except.ExceptT
                            Servant.Server.Internal.ServantErr.ServantErr
                            GHC.Types.IO
                            Codec.Picture.Types.DynamicImage)
                      Servant.API.Alternative.:<|> ((GHC.Base.String
                                                     -> Control.Monad.Trans.Except.ExceptT
                                                          Servant.Server.Internal.ServantErr.ServantErr
                                                          GHC.Types.IO
                                                          [Codec.Picture.Types.Image
                                                             Codec.Picture.Types.PixelRGB8])
                                                    Servant.API.Alternative.:<|> (GHC.Base.String
                                                                                  -> Control.Monad.Trans.Except.ExceptT
                                                                                       Servant.Server.Internal.ServantErr.ServantErr
                                                                                       GHC.Types.IO
                                                                                       Models.Tool)))
                   ww1
                   ww2 }) -}
"SPEC/Lib $fAllCTRender:a @ (JPEG 100) @ '[] @ DynamicImage" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                   '[Servant.JuicyPixels.JPEG
                                                                                                       100]
                                                                                                   Codec.Picture.Types.DynamicImage)
                                                                             ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                             '[])
                                                                             ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                            (Servant.JuicyPixels.JPEG
                                                                                               100))
  Servant.API.ContentTypes.$fAllCTRender:a @ (Servant.JuicyPixels.JPEG
                                                100)
                                           @ '[]
                                           @ Codec.Picture.Types.DynamicImage
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a
"SPEC/Lib $fAllCTRender:a @ GIFAnim @ '[] @ [Image PixelRGB8]" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                                     '[Api.GIFAnim]
                                                                                                     [Codec.Picture.Types.Image
                                                                                                        Codec.Picture.Types.PixelRGB8])
                                                                               ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                               '[])
                                                                               ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                              Api.GIFAnim)
  Servant.API.ContentTypes.$fAllCTRender:a @ Api.GIFAnim
                                           @ '[]
                                           @ [Codec.Picture.Types.Image
                                                Codec.Picture.Types.PixelRGB8]
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a15
"SPEC/Lib $fAllCTRender:a @ HTMLBlaze @ '[] @ Tool" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                          '[Htmls.HTMLBlaze]
                                                                                          Models.Tool)
                                                                    ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                                    '[])
                                                                    ($dAccept :: Servant.API.ContentTypes.Accept
                                                                                   Htmls.HTMLBlaze)
  Servant.API.ContentTypes.$fAllCTRender:a @ Htmls.HTMLBlaze
                                           @ '[]
                                           @ Models.Tool
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a17
"SPEC/Lib $fAllCTRender:a @ JSON @ '[] @ Bool" [ALWAYS] forall ($dAllMimeRender :: Servant.API.ContentTypes.AllMimeRender
                                                                                     '[Servant.API.ContentTypes.JSON]
                                                                                     GHC.Types.Bool)
                                                               ($dAllMime :: Servant.API.ContentTypes.AllMime
                                                                               '[])
                                                               ($dAccept :: Servant.API.ContentTypes.Accept
                                                                              Servant.API.ContentTypes.JSON)
  Servant.API.ContentTypes.$fAllCTRender:a @ Servant.API.ContentTypes.JSON
                                           @ '[]
                                           @ GHC.Types.Bool
                                           $dAccept
                                           $dAllMime
                                           $dAllMimeRender
  = Lib.$s$fAllCTRender:a11
"SPEC/Lib $fAllMimeRender:a0 @ (JPEG 100) @ DynamicImage" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                             (Servant.JuicyPixels.JPEG
                                                                                                100)
                                                                                             Codec.Picture.Types.DynamicImage)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ (Servant.JuicyPixels.JPEG
                                                   100)
                                              @ Codec.Picture.Types.DynamicImage
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0
"SPEC/Lib $fAllMimeRender:a0 @ GIFAnim @ [Image PixelRGB8]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                               Api.GIFAnim
                                                                                               [Codec.Picture.Types.Image
                                                                                                  Codec.Picture.Types.PixelRGB8])
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Api.GIFAnim
                                              @ [Codec.Picture.Types.Image
                                                   Codec.Picture.Types.PixelRGB8]
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a2
"SPEC/Lib $fAllMimeRender:a0 @ HTMLBlaze @ Tool" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                    Htmls.HTMLBlaze
                                                                                    Models.Tool)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Htmls.HTMLBlaze
                                              @ Models.Tool
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a3
"SPEC/Lib $fAllMimeRender:a0 @ JSON @ Bool" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                               Servant.API.ContentTypes.JSON
                                                                               GHC.Types.Bool)
  Servant.API.ContentTypes.$fAllMimeRender:a0 @ Servant.API.ContentTypes.JSON
                                              @ GHC.Types.Bool
                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a1
"SPEC/Lib $fAllMimeRender:a0_$callMimeRender @ GIFAnim @ [Image
                                                           PixelRGB8]" [ALWAYS] forall ($dMimeRender :: Servant.API.ContentTypes.MimeRender
                                                                                                                                                                          Api.GIFAnim
                                                                                                                                                                          [Codec.Picture.Types.Image
                                                                                                                                                                             Codec.Picture.Types.PixelRGB8])
  Servant.API.ContentTypes.$fAllMimeRender:a0_$callMimeRender @ Api.GIFAnim
                                                              @ [Codec.Picture.Types.Image
                                                                   Codec.Picture.Types.PixelRGB8]
                                                              $dMimeRender
  = Lib.$s$fAllCTRender:a_$s$fAllMimeRender:a0_$callMimeRender
"SPEC/Lib $fAllMimeUnrender:a @ (JPEG 100) @ DynamicImage @ '[]" [ALWAYS] forall ($dAllMimeUnrender :: Servant.API.ContentTypes.AllMimeUnrender
                                                                                                         '[]
                                                                                                         Codec.Picture.Types.DynamicImage)
                                                                                 ($dMimeUnrender :: Servant.API.ContentTypes.MimeUnrender
                                                                                                      (Servant.JuicyPixels.JPEG
                                                                                                         100)
                                                                                                      Codec.Picture.Types.DynamicImage)
  Servant.API.ContentTypes.$fAllMimeUnrender:a @ (Servant.JuicyPixels.JPEG
                                                    100)
                                               @ Codec.Picture.Types.DynamicImage
                                               @ '[]
                                               $dMimeUnrender
                                               $dAllMimeUnrender
  = Lib.$s$fAllMimeUnrender:a
"SPEC/Lib $fMimeRenderTYPEHTMLBlazea @ Tool" [ALWAYS] forall ($dToMarkup :: Text.Blaze.ToMarkup
                                                                              Models.Tool)
  Htmls.$fMimeRenderTYPEHTMLBlazea @ Models.Tool $dToMarkup
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEHTMLBlazea
"SPEC/Lib $fMimeRenderTYPEJPEGDynamicImage @ 100" [ALWAYS] forall ($d~ :: 100
                                                                          GHC.TypeLits.<= 100)
                                                                  ($dKnownNat1 :: GHC.TypeLits.KnownNat
                                                                                    100)
  Servant.JuicyPixels.$fMimeRenderTYPEJPEGDynamicImage @ 100
                                                       $dKnownNat1
                                                       $d~
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJPEGDynamicImage
"SPEC/Lib $fMimeRenderTYPEJSONa @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                                       GHC.Types.Bool)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa @ GHC.Types.Bool
                                                 $dToJSON
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa
"SPEC/Lib $fMimeRenderTYPEJSONa_$cmimeRender @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                                                    GHC.Types.Bool)
  Servant.API.ContentTypes.$fMimeRenderTYPEJSONa_$cmimeRender @ GHC.Types.Bool
                                                              $dToJSON
  = Lib.$s$fAllCTRender:a_$s$fMimeRenderTYPEJSONa_$cmimeRender
"SPEC/Lib $fMimeUnrenderTYPEJPEGDynamicImage @ 100" [ALWAYS] forall ($d~ :: 100
                                                                            GHC.TypeLits.<= 100)
                                                                    ($dKnownNat1 :: GHC.TypeLits.KnownNat
                                                                                      100)
  Servant.JuicyPixels.$fMimeUnrenderTYPEJPEGDynamicImage @ 100
                                                         $dKnownNat1
                                                         $d~
  = Lib.$s$fAllMimeUnrender:a_$s$fMimeUnrenderTYPEJPEGDynamicImage
"SPEC/Lib encode @ Bool" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                        GHC.Types.Bool)
  Data.Aeson.encode @ GHC.Types.Bool $dToJSON
  = Lib.$s$fAllCTRender:a_$sencode
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

